// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;
// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой

Перем мИмяФайла;                        // имя файла запросов
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
//Перем мИдетДобавление;                  // признак добавления
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи

Перем мРезультатЗапроса;                // результат 
Перем мВыборкаРезультата;

//Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
//Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу
Перем мКэшПустыхЗначений;

Перем мСхемаКомпоновки;
Перем мМассивВременныхТаблицКомпоновщика;
Перем мФлагМаскировкиАвтоупорядочивание;
Перем мНаборДанных;
Перем мПарсер;
Перем мТаблицаКоординат;
Перем мРежимДереваЗапроса;
Перем мРежимСворачивания;
Перем мРежимРедактирования;
Перем мТекущаяСтрокаДереваЗапроса;
Перем мСлужебноеПолеТекстовогоДокумента;
Перем мТекстЗапросаДерева;
Перем мСравнительТабличныхДокументов;
Перем мИзмененияМенеджераВременныхТаблиц;
Перем мИсторияФайлов;
Перем мСтруктураВосстановления;
Перем мАнализТехножурнала;
Перем мЗапросЗагруженВКонсоль;
Перем мДанныеРасшифровки;

Функция ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ЭкземплярКомпоненты)

	ИнициализироватьГлобальныйКонтекстПодсказки(ЭкземплярКомпоненты);
	
	Если ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(мРезультатЗапроса));
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("мРезультатЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов), мРезультатЗапроса);
	ИначеЕсли ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(мОбъектЗапроса));
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("мОбъектЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов), мОбъектЗапроса);
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("вПолучитьПараметр", "Метод", Новый ОписаниеТипов);
	ИначеЕсли ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата Тогда
		//ЭкземплярКомпоненты.ОчиститьТаблицуСловЛокальногоКонтекста();
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СтрокаТаблицыЗначений"));
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("СтрокаРезультата", "Свойство", Новый ОписаниеТипов(МассивТипов), мРезультатЗапроса);
	ИначеЕсли ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса Тогда
		//МаркерЭкземпляра = КомпонентаТекстаЗапроса.ИмяКласса + "_" + КомпонентаТекстаЗапроса.Имя;
		//Если Лев(Кнопка.Имя, СтрДлина(МаркерЭкземпляра)) = МаркерЭкземпляра Тогда
			Для Каждого СтрокаПараметра Из Параметры Цикл
				ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("&" + СтрокаПараметра.ИмяПараметра, "Свойство");
			КонецЦикла;
		//КонецЕсли; 
		Возврат Неопределено;
	КонецЕсли;
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста(
		"Параметры", "Свойство", Новый ОписаниеТипов("Структура"), СтруктураПараметров);
		
	Возврат Неопределено;

КонецФункции // ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров()

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	
	// Специальная обработка команд компоненты ДО
	ЭкземплярКомпоненты = ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка);
	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ЭкземплярКомпоненты);
	
	Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "Проверить")
	Тогда
		мОбъектЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если Не ПолучитьПараметрыИзЗапроса() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если мРежимДереваЗапроса Тогда
		Развернули = Ложь;
		Если Ложь
			Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов")
		Тогда
			КоманднаяПанельТекстЗапросаИзменитьИлиСохранитьУзелДерева(, Истина);
			Если мРежимСворачивания Тогда 
				Если Не КоманднаяПанельТекстЗапросаСворачивать() Тогда 
					Возврат;
				КонецЕсли;
				Развернули = Истина;
			КонецЕсли;
		ИначеЕсли Ложь
			Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КопироватьВБуферОбменаВесьТекст") 
			Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КопироватьВБуферОбменаТекстВВидеКода") 
		Тогда
			Если мРежимСворачивания Тогда 
				Если Не КоманднаяПанельТекстЗапросаСворачивать() Тогда 
					Возврат;
				КонецЕсли;
				Развернули = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ПерейтиКОпределению") Тогда
		ТекущееВыражение = КомпонентаТекстаЗапроса.ПолучитьТекущееОбъектноеВыражение();
		Если Лев(ТекущееВыражение, 1) = "&" Тогда
			СтрокаПараметра = Параметры.Найти(Сред(ТекущееВыражение, 2));
			Если СтрокаПараметра <> Неопределено Тогда
				Если СтрокаПараметра.ЭтоВыражение = Истина Тогда
					Попытка 
						Значение = Вычислить(СтрокаПараметра.Значение);
						ОткрытьЗначение(Значение);
					Исключение
						ЛксСообщитьСУчетомМодальности("Ошибка при вычислении параметра """ + СтрокаПараметра.ИмяПараметра + """"
							+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
					КонецПопытки;
				Иначе
					Значение = СтрокаПараметра.Значение;
					ОткрытьЗначение(Значение);
				КонецЕсли;
			КонецЕсли; 
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	Если ЭкземплярКомпоненты <> Неопределено Тогда
		Результат = ЭкземплярКомпоненты.Нажатие(Кнопка);
	КонецЕсли;
	
	// Специальная обработка команд компоненты ПОСЛЕ
	Если мРежимДереваЗапроса Тогда
		Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ПерейтиКОпределению") Тогда
			СтрокаПодзапроса = ДеревоЗапроса.Строки.Найти(Результат, "Псевдоним", Истина);
			Если СтрокаПодзапроса <> Неопределено Тогда
				Если СохранитьТекущийПодзапрос() Тогда 
					СтрокаПодзапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Строки.Найти(Результат, "Псевдоним", Истина);
					ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаПодзапроса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Развернули Тогда
			Если Не мРежимРедактирования Тогда
				КоманднаяПанельТекстЗапросаСворачивать();
			КонецЕсли; 
			//Если мРежимРедактирования Тогда 
			//	КоманднаяПанельТекстЗапросаИзменитьИлиСохранитьУзелДерева(, Истина);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка = Неопределено)

	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	Если Ложь
		Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов") 
		Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КопироватьВБуферОбменаВесьТекст") 
		Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ВставитьИзБуфераОбменаВесьТекст") 
	Тогда
		ЭкземплярКомпоненты = КомпонентаТекстаЗапроса;
	Иначе
		Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
			ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя];
		Иначе
			ЭкземплярКомпоненты = КомпонентаТекстаЗапроса;
		КонецЕсли;
	КонецЕсли;

	Возврат ЭкземплярКомпоненты;

КонецФункции

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойАвтоОбновитьСправку()
	
	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	//Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
	//	ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя];
	//Иначе
		ЭкземплярКомпоненты = КомпонентаТекстаЗапроса;
	//КонецЕсли;
	ЭкземплярКомпоненты.АвтоОбновитьСправку();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция вПолучитьПараметр(ИмяПараметра)
	
	НайденнаяСтрока = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
	Возврат НайденнаяСтрока.Значение;
	
КонецФункции

// Получает текст запроса из текстового поля
//
// Параметры:
//  СВыделением - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция вПолучитьТекстЗапроса(ИспользоватьТекущийПодзапрос = Ложь)
	
	ТекстПоля = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если мРежимДереваЗапроса Тогда
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда
			Если Истина
				И ИспользоватьТекущийПодзапрос
				И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
			Тогда
				ТекстПоля = РазвернутьВложенныеЗапросы(ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока, ТекстПоля);
				Если ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.ТипУзла = "<ChooseTable>" Тогда
					ТекстПоля = "ВЫБРАТЬ * ИЗ " + ТекстПоля + " КАК ВложенныйЗапрос";
				КонецЕсли;
			Иначе 
				ТекстПоля = РазвернутьВложенныеЗапросы(ДеревоЗапроса.Строки[0], мТекстЗапросаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
		
	Возврат ТекстПоля;
		
КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура УстановитьТекстПоляТекстаЗапроса(Текст)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);
	
КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура мУстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // мУстановитьЗаголовокФормы()

// Предлагает сохранить текущий подзапрос, если он находился в режиме редактирования.
//
// Параметры:
//  Булево - Истина - если пользователь согласился не сохранять или сохранять, Ложь - если отказался.
//
Функция СохранитьТекущийПодзапрос()

	Если мРежимРедактирования Тогда
		Возврат КоманднаяПанельТекстЗапросаЗакончитьРедактирование();
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // СохранитьТекущийПодзапрос()

// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()
	
	Если Истина
		И мЗапросЗагруженВКонсоль
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрока <> НеОпределено 
	Тогда
		
		ТекстЗапроса = вПолучитьТекстЗапроса();
		Если мТекущаяСтрока.ТекстЗапроса <> ТекстЗапроса Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		мТекущаяСтрока.ТекстЗапроса = ТекстЗапроса;
		
		мТекущаяСтрока.ПараметрыЗапроса = Параметры.Скопировать();
		мТекущаяСтрока.КодПередВыполнениемЗапроса = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
		мТекущаяСтрока.КодОбработкиСтрокиРезультата = ЭлементыФормы.КодОбработкиСтрокиРезультата.ПолучитьТекст();
		мТекущаяСтрока.КодОбработкиРезультата = ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст();
		мТекущаяСтрока.Настройка = Новый ХранилищеЗначения(Компоновщик.Настройки);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()
	
	//// Для совместимости со старыми версиями
	//Если ДеревоЗапросов.Колонки.Найти("КодОбработкиСтрокиРезультата") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодОбработкиСтрокиРезультата");
	//КонецЕсли;
	//Если ДеревоЗапросов.Колонки.Найти("КодПередВыполнениемЗапроса") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодПередВыполнениемЗапроса");
	//КонецЕсли;
	//Если ДеревоЗапросов.Колонки.Найти("КодОбработкиРезультата") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодОбработкиРезультата");
	//КонецЕсли;
	
	ДеревоЗапросов.Строки.Очистить();
	мТекущаяСтрока = Неопределено;
	ОчиститьДеревоЗапроса();
	УстановитьТекстПоляТекстаЗапроса("");
	Параметры.Очистить();
	
КонецПроцедуры // ОчиститьЗначения()

Процедура ОткрытьФайлПоПолномуИмени(ПолноеИмяФайла, ОчиститьПередЗагрузкой = Истина)
	
	мИмяФайла = ПолноеИмяФайла;
	Файл = Новый Файл(мИмяФайла);
	мИмяПути = Файл.Путь;
	ЗагрузитьЗапросыИзФайла(ОчиститьПередЗагрузкой);
	СохранитьИмяФайла();
	
КонецПроцедуры

Процедура ОткрытьФайлИзИстории(Кнопка) 
	
	СтрокаИстории = мИсторияФайлов[Число(Сред(Кнопка.Имя, 2))];
	ОткрытьФайлПоПолномуИмени(СтрокаИстории.Значение);
	
КонецПроцедуры

Процедура ОбновитьПодменюИсторииФайлов()
	
	Если Не мРежимРедактора Тогда
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Файл.Кнопки.ОткрытьПоследние.Кнопки;
		ирНеглобальный.ОбновитьПодменюИсторииФайловЛкс(мИсторияФайлов, Кнопки);
	КонецЕсли; 
	
КонецПроцедуры

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()
	
	СохранитьЗначение("ирКонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("ирКонсольЗапросов_ИмяПути",  мИмяПути);
	
	Если ЗначениеЗаполнено(мИмяФайла) Тогда
		ирНеглобальный.ДобавитьВИсториюЭлементЛкс(мИсторияФайлов, мИмяФайла);
		СохранитьЗначение("ирКонсольЗапросов.мИсторияФайлов", мИсторияФайлов);
		ОбновитьПодменюИсторииФайлов();
	КонецЕсли; 
	
КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура ВосстановитьИмяФайла()
	
	мИмяФайла = ВосстановитьЗначение("ирКонсольЗапросов_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("ирКонсольЗапросов_ИмяПути");
	
	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;
	
	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьИмяФайла()

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево, ОчиститьПередЗагрузкой = Истина)
	
	Если ОчиститьПередЗагрузкой Тогда 
		НовоеДерево.Строки.Очистить();
	КонецЕсли;
	
	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока, ОчиститьПередЗагрузкой = Истина);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьДеревоЗапросов()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура СоздатьНовыйФайлЗапросов(Отладка = Ложь)

	мИмяФайла = "";
	мИмяПути = "";
	Если Не Отладка Тогда 
		СохранитьИмяФайла();
	КонецЕсли;
	
	вОчиститьЗначения();
	мУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;
	
	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Запрос = "Запросы";
	мТекущаяСтрока.ТекстЗапроса = "";
	//мИдетДобавление = Истина;
	мАктивизированаДобавляемаяЗапись = Истина;
	
	ПриИзмененииДереваЗапросов();
	ЭтаФорма.ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст("");
	ЭтаФорма.ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст("");
	ЭтаФорма.ЭлементыФормы.КодПередВыполнениемЗапроса.УстановитьТекст("");
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьЗапросыИзФайла(ОчиститьПередЗагрузкой = Истина)
	
	//Проверим существование файла.
	ФайлЗначения = Новый Файл(мИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);
	
	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда
		
		Модифицированность = Не ОчиститьПередЗагрузкой;
		Если ОчиститьПередЗагрузкой Тогда
			вОчиститьЗначения();
			мУстановитьЗаголовокФормы();
		КонецЕсли;
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаВремТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		
		Модифицированность = Не ОчиститьПередЗагрузкой;
		Если ОчиститьПередЗагрузкой Тогда
			вОчиститьЗначения();
			мУстановитьЗаголовокФормы();
		КонецЕсли;
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов, ОчиститьПередЗагрузкой);
		
	Иначе // Формат файла не опознан
		СоздатьНовыйФайлЗапросов();
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
		|Создан новый файл", 10);
	КонецЕсли;
	
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - Булево, *Ложь - признак необходимости предупреждения перед сохранением;
//	ЗапрашиватьИмяФайла - Булево, *Ложь - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь, ОповеститьВладельца = Ложь, Знач ИмяФайла = Неопределено, 
	СброситьМодифицированность = Неопределено)
	
	Если СброситьМодифицированность = Неопределено Тогда
		СброситьМодифицированность = Не мРежимРедактора;
	КонецЕсли; 
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = мИмяФайла;
	КонецЕсли; 
	
	СохранитьПодзапрос = Истина;
	Если ЗапрашиватьСохранение Тогда
		Если мРежимРедактирования Тогда
			Ответ = Вопрос("Выполняется редактирование строки дерева запроса. Сохранить ее изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли;
			СохранитьПодзапрос = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли; 
	КонецЕсли; 
	Если СохранитьПодзапрос Тогда
		Если Не СохранитьТекущийПодзапрос() Тогда 
			Возврат Ложь;
		КонецЕсли;
	Иначе
		КоманднаяПанельТекстЗапросаОтменитьРедактирование();
	КонецЕсли; 
	
	вСохранитьЗапросТекущейСтроки();
	
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Истина
		И (Ложь
			Или мРежимРедактора 
			Или ОповеститьВладельца)
		И ВладелецФормы <> Неопределено
		И Не ЗапрашиватьИмяФайла
		И Не ЗначениеЗаполнено(ИмяФайла)  // Добавлено 06.12.2012
	Тогда
		мОбъектЗапроса.Текст = мТекущаяСтрока.ТекстЗапроса;
		ТекстЗапросаКорректен = Ложь;
		Если ПолучитьПараметрыИзЗапроса(, Ложь) Тогда
			Если УстановитьТипЗапроса(, Истина) Тогда 
				ТекстЗапросаКорректен = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ТекстЗапросаКорректен Тогда 
			Ответ = Вопрос("Текст запроса содержит ошибки. Продолжить сохранение запроса?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		//КонструкторЗапроса = Новый КонструкторЗапроса;
		//КонструкторЗапроса.РежимКомпоновкиДанных = Истина;
		//ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		//Попытка
		//	КонструкторЗапроса.Текст = ТекстЗапроса;
		//Исключение
		//	ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса,,,, МодальныйРежим, ИнформацияОбОшибке());
		//	Возврат;
		//КонецПопытки;
		
		Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаборДанных", мРедактируемыйНаборДанных);
			СтруктураПараметров.Вставить("Параметры", Параметры);
			СтруктураПараметров.Вставить("Запрос", мТекущаяСтрока.ТекстЗапроса);
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(СтруктураПараметров);
		Иначе//Если мТекущаяСтрока.ТипЗапроса = "Построитель" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Параметры", Параметры);
			СтруктураПараметров.Вставить("ТекстЗапроса", мТекущаяСтрока.ТекстЗапроса);
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(СтруктураПараметров);
		КонецЕсли;
	Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Заголовок = "Укажите файл для сохранения списка запросов";
		ДиалогВыбораФайла.Фильтр = ирНеглобальный.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sel", "Файл консоли запросов");
		ДиалогВыбораФайла.Расширение = "sel";
		ДиалогВыбораФайла.Каталог = мИмяПути;
		ФайлВыбран = ирНеглобальный.СохранитьФайлВКонсолиСВосстановлениемЛкс(ДиалогВыбораФайла, ИмяФайла, мИмяФайла, ДеревоЗапросов, мСтруктураВосстановления, 
			ЗапрашиватьИмяФайла);
		Если ФайлВыбран Тогда
			мИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			мИмяПути = ДиалогВыбораФайла.Каталог;
			СохранитьИмяФайла();
		Иначе
			Возврат Ложь;
		КонецЕсли;
		Если СброситьМодифицированность Тогда
			Модифицированность = Ложь;
			мУстановитьЗаголовокФормы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СохранитьЗапросыВФайл()

Процедура ОбновитьРазмерДинамическойТаблицы() Экспорт

	ирНеглобальный.ПослеЗагрузкиДинамическойВыборкиВТабличноеПолеЛкс(ЭтаФорма, мВыборкаРезультата,
		ЭлементыФормы.КоманднаяПанельТаблица, ЭлементыФормы.РазмерТаблицы);

КонецПроцедуры // ОбновитьРазмерДинамическойТаблицы()

// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьРезультатЗапроса()
	
	ЛксСостояние("Загрузка результата...");
	Если мРезультатЗапроса <> Неопределено Тогда
		Если мВыборкаРезультата = Неопределено Тогда
			мВыборкаРезультата = мРезультатЗапроса.Выбрать();
			РазмерРезультата = мВыборкаРезультата.Количество();
			Если Ложь
				Или Не мРежимДереваЗапроса 
				Или (Истина
					И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
					И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Родитель = Неопределено
					И Не мРежимРедактирования)
			Тогда
				мТекущаяСтрока.РазмерРезультата = РазмерРезультата;
			КонецЕсли; 
			Если Истина
				И мРежимДереваЗапроса 
				И Не мРежимРедактирования
			Тогда
				мТекущаяСтрокаДереваЗапроса.РазмерРезультата = РазмерРезультата;
			КонецЕсли; 
		КонецЕсли; 
		Если Ложь
			Или ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица
			Или ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.КодОбработкиСтрокиРезультата
		Тогда
			Если ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица.Значение = Null Тогда
				ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПервуюПорциюЛкс(ЭтаФорма, мРезультатЗапроса, мВыборкаРезультата,
					ЭлементыФормы.КоманднаяПанельТаблица);
				//ЭлементыФормы.РезультатТаблица.Данные = "РезультатТаблица";
				ЭлементыФормы.РезультатТаблица.СоздатьКолонки();
				НастроитьКолонкиТаблицыРезультата();
				ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица.Значение = Неопределено;
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатДерево Тогда
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Null Тогда
				мВыборкаРезультата = мРезультатЗапроса.Выбрать();
				ЗагрузитьДерево = Истина; 
				ДопустимыйРазмерРезультат = 500000;
				Если мВыборкаРезультата.Количество() > ДопустимыйРазмерРезультат Тогда
					ЗагрузитьДерево = Ложь; 
					Ответ = Вопрос("Размер выборки составляет более " + ДопустимыйРазмерРезультат + " строк. "
						"Построение дерева может выполняться долго и вызвать нехватку памяти.
						|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
					Если Ответ = КодВозвратаДиалога.ОК Тогда
						ЗагрузитьДерево = Истина;
					КонецЕсли;
				КонецЕсли; 
				Если ЗагрузитьДерево Тогда
					РезультатДерево = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					//ЭлементыФормы.РезультатДерево.Данные = "РезультатДерево";
					ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Неопределено;
				Иначе
					РезультатДерево = Новый ДеревоЗначений;
				КонецЕсли; 
				ЭлементыФормы.РезультатДерево.СоздатьКолонки();
				Для Каждого Колонка Из ЭлементыФормы.РезультатДерево.Колонки Цикл
					Колонка.ТолькоПросмотр = Истина;
				КонецЦикла; 
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатТабличныйДокумент Тогда
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Null Тогда
				мВыборкаРезультата = мРезультатЗапроса.Выбрать();
				ЗагрузитьТабличныйДокумент = Истина; 
				ДопустимыйРазмерРезультат = 500000;
				Если мВыборкаРезультата.Количество() > ДопустимыйРазмерРезультат Тогда
					ЗагрузитьТабличныйДокумент = Ложь; 
					Ответ = Вопрос("Размер выборки составляет более " + ДопустимыйРазмерРезультат + " строк. "
						"вывод в табличный документ может выполняться долго и вызвать нехватку памяти.
						|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
					Если Ответ = КодВозвратаДиалога.ОК Тогда
						ЗагрузитьТабличныйДокумент = Истина;
					КонецЕсли;
				КонецЕсли; 
				ЭлементыФормы.РезультатТабличныйДокумент.Очистить();
				Если ЗагрузитьТабличныйДокумент Тогда
					ирНеглобальный.ВывестиТаблицуВТабличныйДокументЛкс(мРезультатЗапроса, ЭлементыФормы.РезультатТабличныйДокумент,
						мДанныеРасшифровки);
					ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатСводнаяТаблица Тогда
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Null Тогда
				мВыборкаРезультата = мРезультатЗапроса.Выбрать();
				Попытка
					ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезультатЗапроса;
				Исключение
				КонецПопытки;
				ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЛксСостояние();
	
КонецПроцедуры // ЗагрузитьРезультат()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура вОбработкаАвтосохранения()
	
	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("АвтоСохранить", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("АвтоСохранить");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаАвтосохранения()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СоздатьНовыйФайлЗапросов();
	КонецЕсли;
	
КонецПроцедуры // НовыйФайл()

Процедура ПриИзмененииДереваЗапросов()

	ОбновитьДоступностьПанелиЗапроса();
	Если Истина
		И ДеревоЗапросов.Строки.Количество() > 0
		И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = Неопределено
	Тогда 
	    ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДереваЗапросов()

Процедура ОткрытьФайл(ОчиститьПередЗагрузкой = Истина)
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		ДиалогВыбораФайла.ПолноеИмяФайла = мИмяФайла;
		ДиалогВыбораФайла.Каталог = мИмяПути;
		ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки списка запросов";
		ДиалогВыбораФайла.Фильтр = ирНеглобальный.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sel", "Файл консоли запросов");
		ДиалогВыбораФайла.Расширение = "sel";
		
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ОткрытьФайлПоПолномуИмени(ДиалогВыбораФайла.ПолноеИмяФайла, ОчиститьПередЗагрузкой);
		КонецЕсли;
		
	КонецЕсли;
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()
	
	вСохранитьЗапросыВФайл();
	
КонецПроцедуры // Сохранить()

// Обработчик автоматического сохранения  
//
Процедура АвтоСохранить()
	
	Если Истина
		И мРежимДереваЗапроса 
		И мРежимРедактирования
	Тогда
		// Ничего не делаем
	ИначеЕсли Не ЗначениеЗаполнено(мИмяФайла) Тогда
		// Ничего не делаем
	Иначе
		вСохранитьЗапросыВФайл();
	КонецЕсли;
	
КонецПроцедуры // Сохранить()

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()
	
	вСохранитьЗапросыВФайл(Ложь, Истина);
	
КонецПроцедуры // СохранитьКак()

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура НастройкаАвтосохранения()
	
	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();
	
	вОбработкаАвтосохранения();
	
КонецПроцедуры // НастройкаАвтосохранения()

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()
	
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;
	
	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();
	
КонецПроцедуры // ПеренестиСтрокуДерева()

Функция УстановитьПараметрыЗапроса(ОбъектЗапроса = Неопределено)

	Если ОбъектЗапроса = Неопределено Тогда
		ОбъектЗапроса = мОбъектЗапроса;
	КонецЕсли;
	мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	Если ОбъектЗапроса <> мОбъектЗапроса Тогда
		ЗаполнитьЗначенияСвойств(ОбъектЗапроса, мОбъектЗапроса, "Текст, МенеджерВременныхТаблиц");
	КонецЕсли; 
	Если Не ПолучитьПараметрыИзЗапроса() Тогда 
		Возврат Ложь;
	КонецЕсли;
	Неуникальные = ирНеглобальный.ПолучитьНеуникальныеЗначенияКолонкиТаблицыЛкс(Параметры, "ИмяПараметра");
	Для Каждого Неуникальный Из Неуникальные Цикл
		Сообщить("Имя параметра """ + Неуникальный + """ неуникально!", СтатусСообщения.Внимание);
	КонецЦикла; 
	ВычислитьПараметрыЗапроса(ОбъектЗапроса);
	Возврат Истина;
	
КонецФункции // УстановитьПараметрыЗапроса()

Процедура ВычислитьПараметрыЗапроса(ОбъектЗапроса = Неопределено)
	
	Если ОбъектЗапроса = Неопределено Тогда
		ОбъектЗапроса = мОбъектЗапроса;
	КонецЕсли;
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	Для каждого СтрокаПараметров Из Параметры Цикл
		Если СтрокаПараметров.ЭтоВыражение = Истина Тогда
			Если ЗначениеЗаполнено(СтрокаПараметров.Выражение) Тогда
				ТекстАлгоритма = "
				|Параметры = _П0;
				|лПараметры = _П0; // Устаревшее
				|Результат = " + СтрокаПараметров.Выражение;
				Попытка 
					Значение = ирНеглобальный.ВыполнитьАлгоритм(ТекстАлгоритма,,, СтруктураПараметров);
				Исключение
					ЛксСообщитьСУчетомМодальности("Ошибка при вычислении параметра """ + СтрокаПараметров.ИмяПараметра + """"
						+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
					Продолжить;
				КонецПопытки;
			Иначе
				Значение = Неопределено;
			КонецЕсли; 
			СтрокаПараметров.Значение = Значение;
		КонецЕсли;
		Если Не ЛксЛиИмяПеременной(СтрокаПараметров.ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли; 
		ОбъектЗапроса.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрыВКомпонентуВыполненияКода(ЭкземплярКомпоненты)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста(
		"Параметры", "Свойство", Новый ОписаниеТипов("Структура"), СтруктураПараметров);
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметров()

	СтруктураПараметров = Новый Структура;
	Для Каждого СтрокаПараметра Из Параметры Цикл
		Если ЛксЛиИмяПеременной(СтрокаПараметра.ИмяПараметра) Тогда
			СтруктураПараметров.Вставить(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос(Сохранять = Истина)
	
	вСохранитьЗапросТекущейСтроки();
	Если Истина
		И мРежимДереваЗапроса 
		И мРежимРедактирования
	Тогда
		// Ничего не делаем
	Иначе
		вСохранитьЗапросыВФайл(,,, мСтруктураВосстановления.ФайлВосстановления.ПолноеИмя, Ложь);
	КонецЕсли; 
	
	//мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	//Если Не ПолучитьПараметрыИзЗапроса() Тогда 
	//	Возврат;
	//КонецЕсли;
	Если Не УстановитьПараметрыЗапроса() Тогда
		Возврат;
	КонецЕсли;
	Если мТекущаяСтрока.НовыйМенеджерВремменныхТаблиц Тогда
		мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли; 
	МассивСоздаваемыхВременныхТаблиц = ПолучитьРезультирующийЗапрос(мОбъектЗапроса);
	Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
		ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
	КонецЕсли;
	
    ДобавитьПараметрыВКомпонентуВыполненияКода(ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса);
	Если Не ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ВыполнитьПрограммныйКод() Тогда 
		Возврат;
	КонецЕсли;
		
	ТекстЗапроса = мОбъектЗапроса.Текст;
	Для Каждого ИмяСоздаваемойВременнойТаблицы Из МассивСоздаваемыхВременныхТаблиц Цикл
		Если Не ЗначениеЗаполнено(ИмяСоздаваемойВременнойТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяСоздаваемойВременнойТаблицы;
		Попытка
			мОбъектЗапроса.Выполнить();
			Успех = Истина;
		Исключение
			Успех = Ложь;
		КонецПопытки;
		Если Не мИзмененияМенеджераВременныхТаблиц.Свойство(ИмяСоздаваемойВременнойТаблицы) Тогда
			мИзмененияМенеджераВременныхТаблиц.Вставить(ИмяСоздаваемойВременнойТаблицы, Успех);
		КонецЕсли; 
	КонецЦикла;
	мОбъектЗапроса.Текст = ТекстЗапроса;
	
	// Осторожная выборка
	ВыполнятьПредварительныйЗапрос = ВосстановитьЗначение("ир_ВыполнятьПредварительныйЗапрос");
	БезопасныйПорогКоличестваСтрок = ВосстановитьЗначение("ир_БезопасныйПорогКоличестваСтрок");
	Если ВыполнятьПредварительныйЗапрос = Истина Тогда
		КоличествоСтрок = ирКэш.Получить().ПолучитьГрубоКоличествоСтрокВРезультатеЗапроса(мОбъектЗапроса, ЛиЗамерВремени, МодальныйРежим);
		Если ТипЗнч(КоличествоСтрок) = Тип("Строка") Тогда
			Ответ = Вопрос("При выполнении предварительного запроса произошла ошибка:
			|" + КоличествоСтрок + "
			|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Если БезопасныйПорогКоличестваСтрок * 1000 < КоличествоСтрок Тогда
				Ответ = Вопрос("Размер таблицы результата составит " + КоличествоСтрок + " строк. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ <> КодВозвратаДиалога.ОК Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ТекстЗапроса = мОбъектЗапроса.Текст;
		Для Каждого ИмяСоздаваемойВременнойТаблицы Из МассивСоздаваемыхВременныхТаблиц Цикл
			Если Не ЗначениеЗаполнено(ИмяСоздаваемойВременнойТаблицы) Тогда
				Продолжить;
			КонецЕсли;
			мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяСоздаваемойВременнойТаблицы;
			Попытка
				мОбъектЗапроса.Выполнить();
			Исключение КонецПопытки;
		КонецЦикла;
		мОбъектЗапроса.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	мАнализТехножурнала = Обработки.ирАнализТехножурнала.Создать();
	мАнализТехножурнала.НачатьТрассу("КонсольЗапросов");
	ДатаНачалаВыполнения = ирСервер.ПолучитьТекущуюДатуЛкс();
	НачалоВыполнения = ирКэш.Получить().ПолучитьТекущееВремяВМиллисекундах();
	ЛксСостояние("Выполняется запрос");
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли; 
	Попытка 
		мРезультатЗапроса = мОбъектЗапроса.Выполнить();
	Исключение
		// Антибаг платформы 8.1. Зависает приложение, если пытаемся установить выделение на невидимой странице.
		ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
		Если ВыполнятьВТранзакции Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		мАнализТехножурнала.КончитьТрассу();
		ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
			ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	мВыборкаРезультата = Неопределено;
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	//ЛксСостояние("");
	
	КонецВыполнения = ирКэш.Получить().ПолучитьТекущееВремяВМиллисекундах();
	ДатаКонцаВыполнения = ирСервер.ПолучитьТекущуюДатуЛкс();
	мАнализТехножурнала.КончитьТрассу();
	ДлительностьВыполнения = КонецВыполнения - НачалоВыполнения;
	Если Ложь
		Или Не мРежимДереваЗапроса 
		Или (Истина
			И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
			И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Родитель = Неопределено
			И Не мРежимРедактирования)
	Тогда
		мТекущаяСтрока.Длительность = ДлительностьВыполнения;
	КонецЕсли; 
	Если Истина
		И мРежимДереваЗапроса 
		И Не мРежимРедактирования
	Тогда
		#Если _ Тогда
		    мТекущаяСтрокаДереваЗапроса = ДеревоЗапросов.Строки[0];
		#КонецЕсли
		мТекущаяСтрокаДереваЗапроса.ДлительностьПолная = ДлительностьВыполнения;
		ОбновитьЧистуюДлительность(мТекущаяСтрокаДереваЗапроса);
		Если мТекущаяСтрокаДереваЗапроса.Родитель <> Неопределено Тогда
			ОбновитьЧистуюДлительность(мТекущаяСтрокаДереваЗапроса.Родитель);
		КонецЕсли; 
	КонецЕсли; 
	Если ЛиЗамерВремени Тогда
		ЛксСообщитьСУчетомМодальности("Длительность формирования результата - " + Строка(ДлительностьВыполнения) + " мс", МодальныйРежим);
	КонецЕсли;
	
	ЭлементыФормы.Запрос1С.УстановитьТекст(мОбъектЗапроса.Текст);
	
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица.Значение = Null;
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатДерево.Значение = Null;
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатСводнаяТаблица.Значение = Null;
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатТабличныйДокумент.Значение = Null;
	ПанельРезультатаПриСменеСтраницы();
	
КонецПроцедуры // ВыполнитьЗапрос()

Процедура ОбновитьЧистуюДлительность(СтрокаДереваЗапроса)

	Если Ложь
		Или СтрокаДереваЗапроса.ДлительностьПолная = Неопределено 
		Или ирНеглобальный.СтрокиРавныЛкс(СтрокаДереваЗапроса.ТипУзла, "<ChooseTable>")
	Тогда
		Возврат;
	КонецЕсли; 
	ОбщаяДлительностьДочерних = 0;
	ЧистуюДлительностьМожноРасчитать = Истина;
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если Истина
			И ДочерняяСтрока.ДлительностьПолная = Неопределено 
			И Не ирНеглобальный.СтрокиРавныЛкс(ДочерняяСтрока.ТипУзла, "<ChooseTable>")
		Тогда
			ЧистуюДлительностьМожноРасчитать = Ложь;
			Прервать;
		КонецЕсли; 
		Если ирНеглобальный.СтрокиРавныЛкс(ДочерняяСтрока.ТипУзла, "<ChooseTable>") Тогда
			ДочерняяДлительность = 0;
		Иначе
			ДочерняяДлительность = ДочерняяСтрока.ДлительностьПолная;
		КонецЕсли; 
		ОбщаяДлительностьДочерних = ОбщаяДлительностьДочерних + ДочерняяДлительность;
	КонецЦикла;
	Если ЧистуюДлительностьМожноРасчитать Тогда
		СтрокаДереваЗапроса.ДлительностьЧистая = СтрокаДереваЗапроса.ДлительностьПолная - ОбщаяДлительностьДочерних;
	КонецЕсли; 

КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультатВТабличныйДокументСГруппировками()
	Перем ЗаголовокКолонки;
	
	Если мРезультатЗапроса <> Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
		КоличествоКолонок = мРезультатЗапроса.Колонки.Количество();
		
		Выборка = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголвка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголвка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезультатЗапроса.Колонки[ТекущееПоле].Имя;
			Область.ШиринаКолонки = мРезультатЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголвка);
		ОбластьЗаголвка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголвка.Шрифт = Новый Шрифт(ОбластьЗаголвка.Шрифт, , , Истина, , ,);
		ОбластьЗаголвка.ЦветФона = Новый Цвет(255, 255, 0);
		ОбластьЗаголвка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

Процедура ЗагрузитьЗапросВКонсоль()

	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	мЗапросЗагруженВКонсоль = Истина
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрока <> НеОпределено 
		И мТекущаяСтрока.ТипЗапроса <> "Папка";
	ОчиститьДеревоЗапроса();
	УстановитьТекстПоляТекстаЗапроса("");
	Параметры.Очистить();
	Если мЗапросЗагруженВКонсоль Тогда
		ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(мТекущаяСтрока.КодОбработкиСтрокиРезультата);
		ЭлементыФормы.КодПередВыполнениемЗапроса.УстановитьТекст(мТекущаяСтрока.КодПередВыполнениемЗапроса);
		ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст(мТекущаяСтрока.КодОбработкиРезультата);
		УстановитьТекстПоляТекстаЗапроса(мТекущаяСтрока.ТекстЗапроса);
		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		Если Не ИсходнаяТаблицаПараметров = Неопределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				НоваяСтрока = Параметры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы);
				Если Истина
					И ИсходнаяТаблицаПараметров.Колонки.Найти("Значение") = Неопределено 
					И ИсходнаяТаблицаПараметров.Колонки.Найти("ЗначениеПараметра") <> Неопределено
				Тогда
					НоваяСтрока.Значение = СтрокаИсходнойТаблицы.ЗначениеПараметра; // Для поддержки старых форматов
				КонецЕсли;
				Если Истина
					И ИсходнаяТаблицаПараметров.Колонки.Найти("Выражение") = Неопределено 
					И СтрокаИсходнойТаблицы.ЭтоВыражение = Истина
				Тогда
					НоваяСтрока.Выражение = НоваяСтрока.Значение; // Для поддержки старых форматов
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;
		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		Если ТипЗнч(мТекущаяСтрока.Настройка) = Тип("ХранилищеЗначения") Тогда
			Компоновщик.ЗагрузитьНастройки(мТекущаяСтрока.Настройка.Получить());
		КонецЕсли;
		ВычислитьПараметрыЗапроса();
		УправлениеКолонкамиПараметры();
		Если мРежимДереваЗапроса Тогда 
			Если Не РазобратьТекстЗапроса(ЭлементыФормы.ТекстЗапроса) Тогда 
				КоманднаяПанельФормыРежимДереваЗапроса(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса);
			Иначе
				ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
			КонецЕсли;
		КонецЕсли;
		УстановитьТипЗапроса();
	Иначе
		ЛксИзменитьСвернутость(Ложь, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ВыполнитьЗапрос.Доступность = мЗапросЗагруженВКонсоль;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Открыть_КонсольКомпоновокДанных.Доступность = мЗапросЗагруженВКонсоль;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ИсполняемыйЗапрос.Доступность = мЗапросЗагруженВКонсоль;
	//ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Доступность = мТекущаяСтрока <> НеОпределено; // Доступность для подменю не реализована в платформе
	ОбновитьДоступностьПанелиЗапроса();

КонецПроцедуры

Процедура УничтожитьВременныеТаблицыПодзапроса(СтрокаДереваЗапроса)

	Если Не мРежимСворачивания Тогда
		Возврат;
	КонецЕсли;
	// Уничтожим служебные временные таблицы
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ДочерняяСтрока.ТипУзла = "<InUnion>" Тогда 
			Продолжить;
		КонецЕсли;
		Если ДочерняяСтрока.ТипУзла <> "<FromUnion>" Тогда 
			УничтожитьВременныеТаблицыПодзапроса(ДочерняяСтрока);
		Иначе
			ИмяВременнойТаблицы = ДочерняяСтрока.Псевдоним;
			Если ИмяВременнойТаблицы <> Неопределено Тогда 
				мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
				Попытка
					мОбъектЗапроса.Выполнить();
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УничтожитьВременныеТаблицыПодзапроса()

Процедура ОчиститьДеревоЗапроса()

	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	мТекущаяСтрокаДереваЗапроса = Неопределено;
	ДеревоЗапроса.Строки.Очистить();

КонецПроцедуры // ОчиститьДеревоЗапроса()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если мЗапросЗагруженВКонсоль Тогда
		ВыполнитьЗапрос();
	КонецЕсли; 
	
КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	вСохранитьЗапросТекущейСтроки();
	ЗагрузитьЗапросВКонсоль();
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Копирование Тогда
		Отказ = Истина;
		вСохранитьЗапросТекущейСтроки();
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Элемент.Значение.Строки.Добавить();
		КонецЕсли; 
		ЛксСкопироватьСтрокиДерева(ТекСтрока, НоваяСтрока);
		Элемент.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли; 
	
	//мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	//Если Истина
	//	И Элемент.ТекущаяСтрока.Родитель = Неопределено
	//	И ДеревоЗапросов.Строки.Количество() = 1
	//Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Модифицированность = Истина;
	мТекущаяСтрока = Неопределено;
	
КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		мТекущаяСтрока = Неопределено;
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Запрос) Тогда 
		Элемент.ТекущиеДанные.Запрос = "Запрос";
	КонецЕсли;
	
	// Здесь уже в дереве есть сама строка почему то
	//НовоеИмя = Элемент.ТекущиеДанные.Запрос;
	//Пока ДеревоЗапросов.Строки.Найти(НовоеИмя, "Запрос", Истина) <> Неопределено Цикл
	//	НовоеИмя = НовоеИмя + "1";
	//КонецЦикла;
	//Элемент.ТекущиеДанные.Запрос = НовоеИмя;
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыгрузки = НеОпределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли;
	
	//ДеревоЗапросовПриАктивизацииСтроки(Элемент);
	
	//Если мИдетДобавление Тогда
	//	
	//	Если ОтменаРедактирования Тогда
	//		мТекущаяСтрока = Неопределено;
	//	КонецЕсли;
	//	
	//	мИдетДобавление = Ложь;
	//КонецЕсли;
	
	//Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

// Обработчик изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // СпособВыгрузкиПриИзменении()

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТаблицаРезультатаВыбор()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
	
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ТекстЗапроса, ЭлементыФормы.КоманднаяПанельТекстЗапроса, Истина, , мОбъектЗапроса);

	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодПередВыполнениемЗапроса, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
		
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодОбработкиРезультата, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
		
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодОбработкиСтрокиРезультата, , Ложь, "ВыполнитьЛокальноКодОбработкиСтрокиРезультата", ЭтаФорма);
		
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(ТипЗнч(мОбъектЗапроса));
	//ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ДобавитьСловоЛокальногоКонтекста(
	//		"мОбъектЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов));
	//		
	
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
	// Такой прием нужен для обхода штатного ограничения типа
	КолонкаРасширенногоЗначения = ЭлементыФормы.Параметры.Колонки.Значение;
	ЭлементУправления = КолонкаРасширенногоЗначения.ЭлементУправления;
	КолонкаРасширенногоЗначения.Данные = "Значение"; 
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаВыбора = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОчистки = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОткрытия = Истина;

	ЭлементыФормы.МенюДереваЗапросов.Кнопки.МенюДереваЗапросов.Кнопки.СохранитьВЭлементСправочникаЗапросы.Доступность = ирКэш.Получить().Это2iS;
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.НастройкаОсторожностиВыборкиДанных.Пометка = 
		ВосстановитьЗначение("ир_ВыполнятьПредварительныйЗапрос") = Истина;
	ЭтотОбъект.ВыполнятьВТранзакции = ВосстановитьЗначение("ирКонсольЗапросов_ВыполнятьВТранзакции") = Истина;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимТранзакции.Пометка = ВыполнятьВТранзакции;
	//ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ВключитьТехножурнал.Пометка = ВключитьТехножурнал;
	Если ирКэш.Получить().ВерсияПлатформы >= 801012 Тогда
		ЭлементыФормы.ПанельНастройкиПостроителя.Видимость = Истина;
	КонецЕсли;
	
	Если мРежимРедактора Тогда
		ЭлементыФормы.ДеревоЗапросов.ТолькоПросмотр = Истина;
		ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки.СкопироватьВНовыйЗапрос.Доступность = Ложь;
		//Для Каждого лКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки Цикл
		//	лКнопка.Доступность = Ложь;
		//КонецЦикла;
		Заголовок = мЗаголовокФормы + " : " + " Редактирование";
		ВладелецФормы.Панель.Доступность = Ложь;
		
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		Кнопки.НовыйФайл.Доступность = Ложь;
		Кнопки.ОткрытьФайл.Доступность = Ложь;
		Кнопки.Сохранить.Доступность = Ложь;
		Кнопки.НастройкаАвтосохранения.Доступность = Ложь;
		//Кнопки.ПеренестиСтрокуДерева.Доступность = Ложь;
		
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Файл.Кнопки;
		Кнопки.НовыйФайл.Доступность = Ложь;
		Кнопки.ОткрытьФайл.Доступность = Ложь;
		Кнопки.ОткрытьПоследние.Доступность = Ложь;
		Кнопки.ОбъединитьФайл.Доступность = Ложь;
		Кнопки.Сохранить.Доступность = Ложь;
		Кнопки.НастройкаАвтосохранения.Доступность = Ложь;
	Иначе
		
	КонецЕсли;
	
	Если мОбъектЗапроса.МенеджерВременныхТаблиц = Неопределено Тогда
		мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если Не (Ложь
		Или мРежимОтладки // Было закомментировано
		//Или мРежимРедактора
		Или ДеревоЗапросов.Строки.Количество() > 0)
	Тогда
	
		ИмяФайлаВосстановления = ирНеглобальный.ПроверитьВыбратьФайлВосстановленияКонсолиЛкс(мСтруктураВосстановления);
		Если ИмяФайлаВосстановления <> "" Тогда
			мИмяФайла = ИмяФайлаВосстановления;
			мИмяПути = "";
		Иначе
			// Попытаемся загрузить последний открывавшийся файл запросов
			ВосстановитьИмяФайла();
		КонецЕсли;
		Если ПустаяСтрока(мИмяФайла) Тогда
			СоздатьНовыйФайлЗапросов();
		Иначе
			ЗагрузитьЗапросыИзФайла();
		КонецЕсли;
		Если ИмяФайлаВосстановления <> "" Тогда
			Модифицированность = Истина;
			УдалитьФайлы(ИмяФайлаВосстановления);
		КонецЕсли; 
		
		ИспользоватьАвтосохранение = ВосстановитьЗначение("ирКонсольЗапросов_ИспользоватьАвтосохранение");
		ИнтервалАвтосохранения = ВосстановитьЗначение("ирКонсольЗапросов_ИнтервалАвтосохранения");
		Если Ложь
			Или ИнтервалАвтосохранения < 1
			Или ИнтервалАвтосохранения = Неопределено
		Тогда
			ИнтервалАвтосохранения = 1;
		КонецЕсли;
		вОбработкаАвтосохранения();
	Иначе
		ПриИзмененииДереваЗапросов();
	КонецЕсли;
	
	мИсторияФайлов = ВосстановитьЗначение("ирКонсольЗапросов.мИсторияФайлов");
	Если мИсторияФайлов = Неопределено Тогда
		мИсторияФайлов = Новый СписокЗначений;
	КонецЕсли;
	ОбновитьПодменюИсторииФайлов();
		
	Если мРежимРедактора Тогда
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.РежимКомпоновкиДанных = (мТекущаяСтрока.ТипЗапроса = "Компоновка");
	КонецЕсли;
	Если мРежимОтладки Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.УдалитьВременныеТаблицы.Доступность = Ложь;
		КоманднаяПанельФормыРежимДереваЗапроса();
	Иначе
		ЛксИзменитьСвернутость(Ложь, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Ложь
		Или ЗначениеВыбора = ДеревоЗапросов
		Или ТипЗнч(ЗначениеВыбора) = Тип("СтрокаДереваЗначений")
	Тогда 
		вСохранитьЗапросТекущейСтроки();
		НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрока);
		вСкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока);
		РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
		РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
		мТекущаяСтрока = НеОпределено;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Свойство("Формула") Тогда
			ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
			ТекущиеДанные.Выражение = ЗначениеВыбора.Формула;
			ВычислитьПараметрыЗапроса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мРежимДереваЗапроса Тогда 
		мОбъектЗапроса.Текст = мТекстЗапросаДерева;
	КонецЕсли;
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СохранитьЗначение("ирКонсольЗапросов_ИспользоватьАвтосохранение", ИспользоватьАвтосохранение);
		СохранитьЗначение("ирКонсольЗапросов_ИнтервалАвтосохранения", ИнтервалАвтосохранения);
		СохранитьЗначение("ирКонсольЗапросов_ВыполнятьВТранзакции", ВыполнятьВТранзакции);
	Иначе
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;
	Если Не Отказ Тогда
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ПанельРезультата, ЭтаФорма.ЭлементыФормы.РазделительГоризонтальный, ЭтаФорма.Панель, "низ");
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли; 
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ПанельРезультата;
	КонецЕсли; 
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элемент.Страницы.Индекс(Элемент.ТекущаяСтраница);
	КонецЕсли; 
	ЗагрузитьРезультатЗапроса();
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
Процедура ВыполнитьОбработкуСтрокРезультата(ТекстДляВыполнения)

	Если флРаботатьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Продолжать = Истина;
	ВремяНачалаОбработки = ТекущаяДата();
	ВыборкаРезультата = мРезультатЗапроса.Выбрать();
	Индикатор = ЛксПолучитьИндикаторПроцесса(ВыборкаРезультата.Количество());
	ТекстДляВыполнения = "Параметры = _П0; СтрокаРезультата = _П1;" + ТекстДляВыполнения;
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	ВсеСчитано = ВыборкаРезультата.Количество() = РезультатТаблица.Количество();
	Если ВсеСчитано Тогда
		Для Каждого СтрокаРезультата Из РезультатТаблица Цикл
			ЛксОбработатьИндикатор(Индикатор);
			НомерСтроки = РезультатТаблица.Индекс(СтрокаРезультата) + 1;
			Попытка
				ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, ,, СтруктураПараметров, СтрокаРезультата);
			Исключение
				Если Не флПропускатьОшибки Тогда
					ВызватьИсключение 
				КонецЕсли;
				ЛксСообщитьСУчетомМодальности("Строка №" + НомерСтроки + ": " + ОписаниеОшибки(), МодальныйРежим);
			КонецПопытки;
		КонецЦикла;
	Иначе
		Пока ВыборкаРезультата.Следующий() Цикл
			ЛксОбработатьИндикатор(Индикатор);
			Попытка
				ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, ,, СтруктураПараметров, ВыборкаРезультата);
			Исключение
				Если Не флПропускатьОшибки Тогда
					ВызватьИсключение 
				КонецЕсли;
				ЛксСообщитьСУчетомМодальности(ОписаниеОшибки(), МодальныйРежим);
			КонецПопытки;
		КонецЦикла; 
	КонецЕсли; 
	ЛксОсвободитьИндикаторПроцесса(, Истина);
	Если флРаботатьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбработкуСтрокРезультата()

Процедура КнопкаВыполнитьОбработкуТаблицыРезультата(Элемент)
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат;
	КонецЕсли; 
	ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата);
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата.ВыполнитьПрограммныйКод();
	
КонецПроцедуры

Процедура КнопкаВыполнитьОбработкуРезультата(Элемент)
	
	ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата);
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата.ВыполнитьПрограммныйКод();
	
КонецПроцедуры

Процедура СвернутьНажатие(Элемент)
	
	ЛксДеревоЗначенийСвернуть(ЭлементыФормы.РезультатДерево, истина);
	
КонецПроцедуры

Процедура РазвернутьНажатие(Элемент)
	
	// Вставить содержимое обработчика.
	ЛксДеревоЗначенийСвернуть(ЭлементыФормы.РезультатДерево, Ложь);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СтарыйТекстЗапроса = мОбъектЗапроса.Текст;
	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	// Оставляем в менеджере временных таблиц только те таблицы, которые существовали
	Для Каждого КлючИЗначение Из мИзмененияМенеджераВременныхТаблиц Цикл
		Если КлючИЗначение.Значение = Истина Тогда
			Продолжить;
		КонецЕсли; 
		мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		Попытка
			мОбъектЗапроса.Выполнить();
		Исключение 
		КонецПопытки;
	КонецЦикла;
	мОбъектЗапроса.Текст = СтарыйТекстЗапроса;
	ирНеглобальный.УдалитьФайлВосстановленияКонсолиСБлокировкойЛкс(мСтруктураВосстановления);
	Если мРежимРедактора Тогда
		// Иногда здесь может быть уже отсутствующая форма
		Если ВладелецФормы <> Неопределено Тогда
			ВладелецФормы.Панель.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;

	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	// Уничтожение всех экземпляров компоненты. Обязательный блок.
	Для Каждого Экземпляр Из ПолеТекстовогоДокументаСКонтекстнойПодсказкой Цикл
		Экземпляр.Значение.Уничтожить();
	КонецЦикла;
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЗамерВремени(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛиЗамерВремени = Кнопка.Пометка;
	
КонецПроцедуры

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Функция ВыполнитьЛокальноКодОбработкиСтрокиРезультата(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	Если ЛиСинтаксическийКонтроль Тогда
		ирНеглобальный.ВыполнитьАлгоритм("Параметры = _П0; " + ТекстДляВыполнения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат Неопределено;
	КонецЕсли;
	ВыполнитьОбработкуСтрокРезультата(ТекстДляВыполнения);
	
КонецФункции // ВыполнитьЛокальноКодОбработкиСтрокиРезультата()

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Функция ВыполнитьЛокально(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	ТекстДляВыполнения = "Параметры = _П0; мРезультатЗапроса = _П1; мОбъектЗапроса = _П2;" + ТекстДляВыполнения;
	ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, , , ПолучитьСтруктуруПараметров(), мРезультатЗапроса, мОбъектЗапроса);
	//Выполнить(ТекстДляВыполнения);

КонецФункции // ВыполнитьЛокальноКодОбработкиРезультата()

Процедура УправлениеКолонкамиПараметры()

	ЭлементыФормы.Параметры.Колонки.Выражение.Видимость = Параметры.Найти(Истина, "ЭтоВыражение") <> Неопределено;
	
КонецПроцедуры

Процедура ПараметрыЭтоВыражениеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоВыражение = Истина Тогда
		Если Не ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") Тогда
			ТекущиеДанные.Значение = "";
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ЭтоВыражение = Ложь Тогда
		Если Истина
			И ТекущиеДанные.ТипЗначения <> Неопределено 
			И Не ТекущиеДанные.НеИспользоватьОграничениеТипа
		Тогда
			ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		КонецЕсли;
			
	ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда
		Если Не ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
			Значение = ТекущиеДанные.Значение;
			ТекущиеДанные.Значение = Новый СписокЗначений;
			Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
				Если ТекущиеДанные.ТипЗначения <> Неопределено Тогда
					ТекущиеДанные.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
				КонецЕсли;
			КонецЕсли;
			Если Значение <> Неопределено Тогда
				ТекущиеДанные.Значение.Добавить(Значение);
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
			Если ТекущиеДанные.Значение.Количество() <> 0 Тогда
				ТекущиеДанные.Значение = ТекущиеДанные.Значение[0].Значение;
			Иначе
				ТекущиеДанные.Значение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеКолонкамиПараметры();
	ВычислитьПараметрыЗапроса();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыУдалитьВременныеТаблицы(Кнопка)
	
	мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
КонецПроцедуры

Функция ПолучитьПараметрыИзЗапроса(ЛиДобавлятьНовые = Истина, ОбновитьНастройки = Истина, СтартоваяСтрока = 0)

	Попытка
		ПараметрыЗапроса = мОбъектЗапроса.НайтиПараметры();
	Исключение
		// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
		ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
		ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, СтартоваяСтрока, , Истина, МодальныйРежим,
			ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	Если ЛиДобавлятьНовые Тогда
		Параметры.Колонки.Добавить("НИмя", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрокаПараметра Из Параметры Цикл
			СтрокаПараметра.НИмя = НРег(СтрокаПараметра.ИмяПараметра);
		КонецЦикла;
		Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			ИмяПараметра =  ПараметрЗапроса.Имя;
			СтрокаПараметров = Параметры.Найти(НРег(ИмяПараметра), "НИмя");
			Если СтрокаПараметров <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//СтрокаПараметров = Параметры.Найти("#" + ИмяПараметра, "ИмяПараметра");
			//Если СтрокаПараметров <> Неопределено Тогда
			//	Продолжить;
			//КонецЕсли;
			СтрокаПараметров = Параметры.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
			СтрокаПараметров.ЭтоВыражение = Ложь;
			СтрокаПараметров.ТипЗначения = ПараметрЗапроса.ТипЗначения;
			Если Не СтрокаПараметров.НеИспользоватьОграничениеТипа Тогда
				СтрокаПараметров.Значение = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметров.Значение);
			КонецЕсли; 
		КонецЦикла;
		Параметры.Колонки.Удалить("НИмя");
	КонецЕсли;

	Если ОбновитьНастройки Тогда
		УстановитьТипЗапроса();
	КонецЕсли; 
	Возврат Истина;

КонецФункции // ПолучитьПараметрыИзЗапроса()

Функция ОбновитьКомпоновщик(ТекстЗапроса, ПоказыватьОшибки = Ложь)

	Успех = Истина;
	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	Попытка
		ТекстЗапроса = ирКэш.Получить().ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	Исключение
		ТекстЗапроса = "";
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	Попытка
		// На пакетных подзапросах ломается
		// Получить верхнего родителя
		// Склеить тексты всех их предшественников в запрос1
		// Определить массив встречающихся в запросе1 временных таблиц
		// Добавить к тексту запроса выборки из каждой временной таблицы
		// Загрузить запрос1 в построитель
		// Получить из построителя Соответствие имен временных таблиц пакета и массивов колонок
		лПостроительЗапроса = Новый ПостроительЗапроса;
		лПостроительЗапроса.Текст = ТекстЗапроса;
		лПостроительЗапроса.ЗаполнитьНастройки();
		мНаборДанных.Запрос = ТекстЗапроса;
		мНаборДанных.Поля.Очистить();
		Для Каждого ДоступноеПоле Из лПостроительЗапроса.ДоступныеПоля Цикл
			ПолеНабораДанных = мНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле = ДоступноеПоле.Имя;
			ПолеНабораДанных.ПутьКДанным = ДоступноеПоле.ПутьКДанным;
			ПолеНабораДанных.Заголовок = ДоступноеПоле.Представление;
		КонецЦикла;
		// Параметры здесь будут актуальными, если УстановитьПараметрыЗапроса уже была вызвана
		ирНеглобальный.ЗаполнитьПараметрыСхемыПоЗапросуЛкс(мСхемаКомпоновки, мОбъектЗапроса);
	Исключение
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Новый СхемаКомпоновкиДанных));
		Возврат Ложь;
	КонецПопытки;
		
	Попытка
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
		мФлагМаскировкиАвтоупорядочивание = Ложь;
	Исключение
		// Печальная ситуация. Кривость платформы привела к такому коду.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ИнформацияОбОшибке.Причина.Причина.Причина.Причина.Описание;
		Диагноз = ЛксПолучитьПоследнийФрагмент(ОписаниеОшибки, "<<?>>");
		МаркерАвтоупорядочивание = "АВТОУПОРЯДОЧИВАНИЕ";
		Если Диагноз = МаркерАвтоупорядочивание Тогда
			Координаты = ЛксПолучитьМассивИзСтрокиСРазделителем(ЛксПолучитьСтрокуМеждуМаркерами(ОписаниеОшибки, "{(", ")}"), ",");
			мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
			мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(Число(Координаты[0]), Число(Координаты[1]),
				Число(Координаты[0]), Число(Координаты[1]) + СтрДлина(МаркерАвтоупорядочивание));
			мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "";
			мНаборДанных.Запрос = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
			мФлагМаскировкиАвтоупорядочивание = Истина;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
		Иначе
			Успех = Ложь;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Новый СхемаКомпоновкиДанных));
			Если ПоказыватьОшибки Тогда
				// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
				ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
				ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
					ИнформацияОбОшибке.Причина.Причина.Причина.Причина);
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
	Компоновщик.Восстановить();
	Возврат Успех;

КонецФункции // ОбновитьКомпоновщик()

Функция ОбновитьПостроитель(ТекстЗапроса, ПоказыватьОшибки = Ложь)

	Успех = Истина;
	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	
	Попытка
		ТекстЗапроса = ирКэш.Получить().ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	Исключение
		ТекстЗапроса = "";
		Успех = Ложь;
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	//ВосстанавливатьПорядок = (Построитель.Порядок.Количество() > 0);
	ВосстанавливатьПорядок = Ложь;
	СтарыеНастройки = Построитель.ПолучитьНастройки(Истина, ВосстанавливатьПорядок, Ложь, Ложь, Ложь);
	Попытка
		
		Построитель.Текст = ТекстЗапроса;
		Построитель.ЗаполнитьНастройки();
		Построитель.УстановитьНастройки(СтарыеНастройки, Истина, ВосстанавливатьПорядок, Ложь, Ложь, Ложь);
	Исключение
		Успех = Ложь;
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	Возврат Успех;

КонецФункции // ОбновитьПостроитель()

// Обработчик нажатия кнопки командной панели "Дополнить из запроса"
//
Процедура КоманднаяПанельФормыПолучитьИзЗапроса(Кнопка)
	
	// Истина или Ложь - здесь спорный вопрос
	мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	Если Не ПолучитьПараметрыИзЗапроса() Тогда 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Функция СкопироватьТекущийПодзапросВНовыйЗапрос(Смещение = Неопределено)

	ТекстПодзапроса = вПолучитьТекстЗапроса(Истина);
	ИмяПодзапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Имя;
	вСохранитьЗапросТекущейСтроки();
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ТекущаяСтрока.Родитель <> Неопределено Тогда
		КоллекцияСтрокДерева = ТекущаяСтрока.Родитель.Строки;
	Иначе
		КоллекцияСтрокДерева = ТекущаяСтрока.Владелец().Строки;
	КонецЕсли;
	Если Смещение = Неопределено Тогда
		НоваяСтрокаЗапроса = КоллекцияСтрокДерева.Добавить();
	Иначе
		НоваяСтрокаЗапроса = КоллекцияСтрокДерева.Вставить(КоллекцияСтрокДерева.Индекс(ТекущаяСтрока) + Смещение);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапроса, ТекущаяСтрока);
	НоваяСтрокаЗапроса.ТекстЗапроса = ТекстПодзапроса;
	НоваяСтрокаЗапроса.Запрос = ИмяПодзапроса;
	Возврат НоваяСтрокаЗапроса;

КонецФункции // СкопироватьТекущийПодзапросВНовыйЗапрос()

Процедура МенюДереваЗапросаСкопироватьВНовыйЗапрос(Кнопка = Неопределено)
	
	НоваяСтрокаЗапроса = СкопироватьТекущийПодзапросВНовыйЗапрос(-1);
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаЗапроса;
	
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	ПривестиЗначениеПараметраКОграничениюТипов();
	ирНеглобальный.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(ЭлементыФормы.Параметры, СтандартнаяОбработка, ,
		Не ТекущиеДанные.НеИспользоватьОграничениеТипа);
	
КонецПроцедуры

Процедура ПривестиЗначениеПараметраКОграничениюТипов()
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
		ЭлементыФормы.Параметры.Колонки.Значение.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов; 
	Иначе
		ЭлементыФормы.Параметры.Колонки.Значение.ЭлементУправления.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		Если ТекущиеДанные.ЭтоВыражение = Ложь Тогда 
			ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда
			Если ТекущиеДанные.Значение.Количество() = 0 Тогда // Иначе можно потерять значения в списке
				ТекущиеДанные.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыТипЗначенияПриИзменении(Элемент)
	
	ПривестиЗначениеПараметраКОграничениюТипов();
	
КонецПроцедуры

Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если Истина
		И НоваяСтрока 
		И Не Копирование
	Тогда 
		ТекущиеДанные.ЭтоВыражение = Ложь;
	КонецЕсли;
	Если Истина
		И НоваяСтрока 
		И Копирование
	Тогда 
		ТекущиеДанные.ИмяПараметра = ТекущиеДанные.ИмяПараметра + "1";
	КонецЕсли;
	ПолеЗначениеПараметра = Элемент.Колонки.Значение.ЭлементУПравления;
	Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
		Если ТекущиеДанные.ЭтоВыражение = Ложь Тогда
			ПолеЗначениеПараметра.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда 
			Если ТекущиеДанные.Значение.Количество() = 0 Тогда // Иначе можно потерять значения в списке
				ТекущиеДанные.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоВыражение = 2 Тогда 
			ТекущиеДанные.Значение.ТипЗначения = Новый ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЭтоВыражениеОчистка(Элемент, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Перем ЭлементСписка;
	
	ЭлементСписка = Элемент.Колонки.ЭтоВыражение.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ДанныеСтроки.ЭтоВыражение);
	
	Если ЭлементСписка <> Неопределено Тогда 
		ОформлениеСтроки.Ячейки.ЭтоВыражение.Текст = ЭлементСписка.Представление;
	КонецЕсли;
	
	Если ДанныеСтроки.Значение <> Неопределено Тогда 
		ЛксОформитьЯчейкуСРасширеннымЗначением(ОформлениеСтроки.Ячейки.Значение, ДанныеСтроки.Значение, Элемент.Колонки.Значение);
	КонецЕсли;
	Если ДанныеСтроки.ЭтоВыражение = Истина Тогда 
		ОформлениеСтроки.Ячейки.Значение.ЦветФона = ЦветаСтиля.ирЦветФонаВычисляемогоЗначения;
	КонецЕсли; 
	ОформлениеСтроки.Ячейки.ТекущийТипЗначения.УстановитьТекст("" + ТипЗнч(ДанныеСтроки.Значение));
	
	Если ДанныеСтроки <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Выражение.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение <> Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение = Истина;
		ОформлениеСтроки.Ячейки.ТипЗначения.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение = Истина;
		ОформлениеСтроки.Ячейки.НеИспользоватьОграничениеТипа.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение = Истина;
	КонецЕсли; 
	
	ирНеглобальный.ТабличноеПолеСВложеннымиКоллекциямиПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыОчистить(Кнопка)
	
	Параметры.Очистить();

КонецПроцедуры

Процедура ПоказатьТекстПодзапроса()

	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекстЗапроса = ТекущаяСтрока.Текст;
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	КонецЕсли; 

КонецПроцедуры

Процедура СоздатьВременныеТаблицы(СтрокаДереваЗапроса)

	// Создадим служебные временные таблицы
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ДочерняяСтрока.ТипУзла = "<InUnion>" Тогда 
			Продолжить;
		КонецЕсли;
		Если ДочерняяСтрока.ТипУзла <> "<FromUnion>" Тогда 
			СоздатьВременныеТаблицы(ДочерняяСтрока);
		Иначе
			ВременныйПостроительЗапроса = Новый ПостроительЗапроса;
			Попытка
				ТекстЗапроса = ирКэш.Получить().ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, РазвернутьВложенныеЗапросы(ДочерняяСтрока));
			Исключение
				// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
				ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
				
				ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
					ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
			Попытка 
				ВременныйПостроительЗапроса.Текст = ТекстЗапроса;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Если Найти(ОписаниеОшибки, "Ожидается псевдоним запроса") > 0 Тогда
					// Сюда попадаем, когда у временной таблицы нет псевдонима
					//ЛксСообщитьСУчетомМодальности("В запросе присутствуют временные таблицы без псевдонимов. "
					//	+ "Корректная работа программы возможна только при наличии у каждой временной таблицы псевдонима",
					//ЛксСообщитьСУчетомМодальности("В запросе присутствуют временные таблицы без псевдонимов. "
					//	+ "Для максимальной функциональности рекомендуется задать каждой временной таблице псевдоним",
					//	МодальныйРежим, СтатусСообщения.Внимание);
					ЛксСообщитьСУчетомМодальности("В запросе присутствуют временные таблицы без псевдонимов. "
						+ "Для максимальной функциональности рекомендуется задать каждой временной таблице псевдоним",
						0, СтатусСообщения.Внимание);
				КонецЕсли; 
				Продолжить;
			КонецПопытки;
			ВременныйПостроительЗапроса.ЗаполнитьНастройки();
			КоллекцияПолей = Новый Массив;
			Для Каждого ВыбранноеПоле Из ВременныйПостроительЗапроса.ВыбранныеПоля Цикл
				ДоступноеПоле = ЛксНайтиПолеНастройкиПоПутиКДанным(ВременныйПостроительЗапроса.ДоступныеПоля, ВыбранноеПоле.ПутьКДанным);
				Поле = Новый Структура;
				Поле.Вставить("Имя", ВыбранноеПоле.Имя);
				Поле.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
				КоллекцияПолей.Добавить(Поле);
			КонецЦикла;
			мОбъектЗапроса.Текст = ЛксПолучитьЗапросИмитаторКоллекцииПолей(КоллекцияПолей) + " ПОМЕСТИТЬ " + ДочерняяСтрока.Псевдоним;
			мОбъектЗапроса.Выполнить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СоздатьВременныеТаблицы()


Процедура ДеревоЗапросаПриАктивизацииСтроки(Элемент = Неопределено)
	
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка; 
	
	Элемент = ЭлементыФормы.ДеревоЗапроса;
	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		мТекущаяСтрокаДереваЗапроса.ТекущееВыделение = Новый Структура("НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка",
			НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
			
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	ДоступностьКомандПодзапроса = Истина
		И ТекущаяСтрока <> Неопределено
		И (Ложь
			Или ТекущаяСтрока.ТипУзла = "<FromUnion>"
			//Или ТекущаяСтрока.ТипУзла = "<InUnion>"
			);
	КнопкиПодменю = ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки;
	КнопкиПодменю.ПеренестиВНовыйЗапрос.Доступность = ДоступностьКомандПодзапроса;
	
	ДоступностьКомандТаблицы = Истина
		И ТекущаяСтрока <> Неопределено
		И (Ложь
			Или ТекущаяСтрока.ТипУзла = "<ChooseTable>"
			Или ТекущаяСтрока.ТипУзла = "<FromUnion>"
			Или ТекущаяСтрока.ТипУзла = "<SelectRoot>");
	КнопкиПодменю = ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки;
	КнопкиПодменю.ПреобразоватьВПодзапрос.Доступность = ДоступностьКомандТаблицы;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапросаСоздания = ЭтаФорма.ДеревоЗапроса.Строки.Найти("Создание_" + ТекущаяСтрока.Имя, "Имя", Истина);
	КнопкиПодменю.ПерейтиКСозданию.Доступность = ДоступностьКомандТаблицы И СтрокаЗапросаСоздания <> Неопределено;
	
	// Баг платформы
	ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
	
	ПоказатьТекстПодзапроса();
	
	мТекущаяСтрокаДереваЗапроса = ТекущаяСтрока;
	ТекущееВыделение = мТекущаяСтрокаДереваЗапроса.ТекущееВыделение;
	Если ТекущееВыделение <> Неопределено Тогда
		ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(ТекущееВыделение.НачальнаяСтрока, ТекущееВыделение.НачальнаяКолонка,
			ТекущееВыделение.КонечнаяСтрока, ТекущееВыделение.КонечнаяКолонка);
	КонецЕсли;
	
	Если мРежимСворачивания Тогда
		СоздатьВременныеТаблицы(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросаПриАктивизацииСтроки()

Процедура УстановитьДоступностьКнопокКоманднойПанели(Кнопки, Доступность)
	
	Для Каждого Кнопка Из Кнопки Цикл 
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
			Если Кнопка.ИзменяетДанные Тогда
				Кнопка.Доступность = Доступность;
			КонецЕсли;
		ИначеЕсли Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			УстановитьДоступностьКнопокКоманднойПанели(Кнопка.Кнопки, Доступность);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаблокироватьРедактированиеТекстаЗапроса(Флаг)

	ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Флаг;
	УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки, Не Флаг);
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ОтменитьРедактирование.Доступность = Не Флаг;
	Если Флаг Тогда
		УстановитьКнопкуИзменитьПодзапрос();
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапросов.ТолькоПросмотр = Не Флаг Или мРежимРедактора;
	УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельФормы.Кнопки, Флаг);
	ЭлементыФормы.ДеревоЗапросов.Доступность = Флаг;
	ЭлементыФормы.ДеревоЗапроса.Доступность = Флаг;
	Если Флаг Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса.Доступность = Истина;
	КонецЕсли;
	мРежимРедактирования = Не Флаг;
	
КонецПроцедуры

Процедура ДеревоЗапросаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
	
КонецПроцедуры

// Проверяет корректность текущего подзапроса.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - корректность запроса.
//
Функция ПроверитьТекстПодзапроса()

	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.ТипУзла = "<ChooseTable>" Тогда
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ТекстЗапроса + " КАК ВложенныйЗапрос";
	КонецЕсли;
	ТекущийПодзапрос = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	СтартоваяСтрока = 0;
	Если ТекущийПодзапрос <> Неопределено Тогда
		ТекущийПодзапрос = ТекущийПодзапрос.Родитель;
		Пока Истина
			И ТекущийПодзапрос <> Неопределено
			//И ТекущийПодзапрос.ТипУзла <> "<FromUnion>"
			//И ТекущийПодзапрос.ТипУзла <> "<InUnion>"
			И Не ЛиСворачиваемыйТипУзла(ТекущийПодзапрос.ТипУзла)
		Цикл
			ТекущийПодзапрос = ТекущийПодзапрос.Родитель;
		КонецЦикла;
		Если ТекущийПодзапрос <> Неопределено Тогда
			ТекстЗапроса = "ВЫБРАТЬ * ИЗ (" + Символы.ПС + ТекстЗапроса + Символы.ПС + ") КАК ВложенныйЗапрос";
			СтартоваяСтрока = -1;
		КонецЕсли;
	КонецЕсли;
	мОбъектЗапроса.Текст = ТекстЗапроса;
	Возврат ПолучитьПараметрыИзЗапроса(Ложь, , СтартоваяСтрока);
	
КонецФункции // ПроверитьТекстПодзапроса()

Функция КоманднаяПанельТекстЗапросаЗакончитьРедактирование(Кнопка = Неопределено, НовыйРежимСворачивания = Неопределено)
	
	СтрокаДанных = Неопределено;
	ТекущийПодзапрос = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если мРежимРедактирования Тогда
		Если Не ПроверитьТекстПодзапроса() Тогда 
			Если Кнопка = Неопределено Тогда 
				Ответ = Вопрос("Обнаружена ошибка в тексте подзапроса. Отменить редактирование узла дерева запроса?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
				Если Ответ = КодВозвратаДиалога.ОК Тогда 
					ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекущийПодзапрос.Текст);
				КонецЕсли;
				Если Ответ = КодВозвратаДиалога.Отмена Тогда 
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПутьВДереве = ЛксПолучитьСтрокуПутиВДереве(ТекущийПодзапрос, "Псевдоним");
	СвернутыйТекстНовогоПодзапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	РазвернутыйТекстНовогоПодзапроса = РазвернутьВложенныеЗапросы(ТекущийПодзапрос, СвернутыйТекстНовогоПодзапроса);
	Если Прав(РазвернутыйТекстНовогоПодзапроса, 1) <> Символы.ПС Тогда
		РазвернутыйТекстНовогоПодзапроса = РазвернутыйТекстНовогоПодзапроса + Символы.ПС
	КонецЕсли; 
	//Если ТекущийПодзапрос.Текст <> РазвернутыйТекстНовогоПодзапроса Тогда
	//	// Фактически текст не изменился. Поэтому не будем обновлять дерево
	//КонецЕсли; 
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(мТекстЗапросаДерева);
	СтрокаДанных = ТекущийПодзапрос.СтрокаДанных;
	Если мРежимРедактирования Тогда
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных = ТекущийПодзапрос.СтрокаДанных;
			мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
				СтрокаДанных.НачальнаяСтрока,
				СтрокаДанных.НачальнаяКолонка,
				СтрокаДанных.КонечнаяСтрока,
				СтрокаДанных.КонечнаяКолонка);
			Если ЛиСворачиваемыйТипУзла(ТекущийПодзапрос.ТипУзла) Тогда
				мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "(" + РазвернутыйТекстНовогоПодзапроса + ")";
			Иначе
				мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = РазвернутыйТекстНовогоПодзапроса;
			КонецЕсли;
		Иначе
			мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(РазвернутыйТекстНовогоПодзапроса);
		КонецЕсли;
		мОбъектЗапроса.Текст = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
		// **** Этот же блок можно выполнить по результату РазобратьТекстЗапроса()
		Попытка
			ПараметрыЗапроса = мОбъектЗапроса.НайтиПараметры();
		Исключение
			ЛксСообщитьСУчетомМодальности("Сохранение изменений невозможно, т.к. они приводят к ошибкам в вышестоящих подзапросах:"
				+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;

	ОчиститьДеревоЗапроса();
	Если НовыйРежимСворачивания <> Неопределено Тогда
		мРежимСворачивания = НовыйРежимСворачивания;
	КонецЕсли;
	СтарыйОбработчик = ЭлементыФормы.ДеревоЗапроса.ПолучитьДействие("ПриАктивизацииСтроки");
	ЭлементыФормы.ДеревоЗапроса.УстановитьДействие("ПриАктивизацииСтроки", Неопределено);
	Если Не РазобратьТекстЗапроса(мСлужебноеПолеТекстовогоДокумента) Тогда 
		ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
		КоманднаяПанельФормыРежимДереваЗапроса();
		Возврат Истина;
	КонецЕсли; 
	НоваяТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДереве);
	Если НоваяТекущаяСтрока <> ДеревоЗапроса Тогда 
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли;
	СтруктураВыделения = ирНеглобальный.ПолеТекста_ПолучитьДиапазонВыделенияЛкс(ЭлементыФормы.ТекстЗапроса);
	ДеревоЗапросаПриАктивизацииСтроки();
	ЭлементыФормы.ДеревоЗапроса.УстановитьДействие("ПриАктивизацииСтроки", СтарыйОбработчик);
	Если НовыйРежимСворачивания = Неопределено Тогда
		ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	КонецЕсли;
	ирНеглобальный.ПолеТекста_УстановитьДиапазонВыделенияЛкс(ЭлементыФормы.ТекстЗапроса, СтруктураВыделения);
	Если Не мРежимРедактирования Тогда
		вСохранитьЗапросыВФайл(,,, мСтруктураВосстановления.ФайлВосстановления.ПолноеИмя, Ложь);
	КонецЕсли; 
	Возврат Истина;
	
КонецФункции

Процедура КоманднаяПанельТекстЗапросаОтменитьРедактирование(Кнопка = Неопределено)
	
	ПоказатьТекстПодзапроса();
	ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаИзменитьИлиСохранитьУзелДерева(Кнопка = Неопределено, ПринудительноИзменить = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева;
	КонецЕсли;
	Если Истина
		И ПринудительноИзменить <> Истина
		И Кнопка.Текст = "Сохранить" 
	Тогда
		Если КоманднаяПанельТекстЗапросаЗакончитьРедактирование(Кнопка) Тогда
			УстановитьКнопкуИзменитьПодзапрос();
		КонецЕсли; 
	Иначе
		ЗаблокироватьРедактированиеТекстаЗапроса(Ложь);
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса.Доступность = Ложь;
		Кнопка.Текст = "Сохранить";
		Кнопка.Подсказка = "Сохранить текст узла дерева запроса";
		Кнопка.Пояснение = Кнопка.Подсказка;
		Кнопка.Картинка = БиблиотекаКартинок.ЗакончитьРедактирование;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьКнопкуИзменитьПодзапрос()

	Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева;
	Кнопка.Текст = "Изменить ";
	Кнопка.Подсказка = "Изменить текст узла дерева запроса";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Картинка = БиблиотекаКартинок.Изменить;
	Возврат Неопределено;
	
КонецФункции

Процедура КоманднаяПанельФормыРежимДереваЗапроса(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса;
	КонецЕсли;
	НовыйРежимДереваЗапроса = Не Кнопка.Пометка;
	
	Если Ложь
		Или мТекущаяСтрока = Неопределено
		//Или мТекущаяСтрока.ТипЗапроса = "Папка"
	Тогда
		//мРежимДереваЗапроса = НовыйРежимДереваЗапроса;
		Кнопка.Пометка = НовыйРежимДереваЗапроса;
		Возврат;
	КонецЕсли; 
	Если мПарсер = Неопределено Тогда
		Если Не ИнициализироватьПарсерЗапроса() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не НовыйРежимДереваЗапроса Тогда 
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда 
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(РазвернутьВложенныеЗапросы(ДеревоЗапроса.Строки[0], мТекстЗапросаДерева));
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();
	Если мТекущаяСтрока.ТипЗапроса <> "Папка" Тогда
		Если НовыйРежимДереваЗапроса Тогда 
			Если Не РазобратьТекстЗапроса(ЭлементыФормы.ТекстЗапроса) Тогда 
				Возврат;
			КонецЕсли;
			ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
		Иначе
			ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Ложь;
			УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки, Истина);
			ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева.Доступность = Ложь;
			мРежимРедактирования = Ложь;
		КонецЕсли;
		ЛксИзменитьСвернутость(НовыйРежимДереваЗапроса, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли; 
	мРежимДереваЗапроса = НовыйРежимДереваЗапроса;
	Кнопка.Пометка = мРежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева.Доступность = мРежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ПерейтиКРодительскомуУзлу.Доступность = мРежимДереваЗапроса;
	//ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Сворачивать.Доступность = мРежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.УдалитьВременныеТаблицы.Доступность = Истина
		И Не мРежимДереваЗапроса
		И Не мРежимОтладки;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНоваяКонсоль(Кнопка)
	
	ЛксОткрытьНовоеОкноОбработки(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПАРСЕР

Функция ИнициализироватьПарсерЗапроса()

	мПарсер = ирКэш.Получить().мПолучитьПарсер("ГрамматикаЯзыкаЗапросов");
	Если мПарсер <> Неопределено Тогда 
		ДеревоЗапроса.Колонки.Добавить("СтрокаДанных");
		ДеревоЗапроса.Колонки.Добавить("ТекущееВыделение");
		ДеревоЗапроса.Колонки.Добавить("Псевдоним");
	КонецЕсли;
	Возврат мПарсер <> Неопределено;

КонецФункции // ИнициализироватьПарсерЗапроса()

Функция ПолучитьГраничныйТерминалПравила(Сокращение, ИндексГраницы = 0)

	НовыйУзел = Неопределено;
	НовыеДанные = Сокращение;
	Пока НовыеДанные <> Неопределено Цикл 
		Данные = НовыеДанные;
		Узел = НовыйУзел;
		НовыеДанные = Неопределено;
		НовыйУзел = Неопределено;
		Для Сч1 = 1 По Данные.TokenCount Цикл
			Если ИндексГраницы = 1  Тогда
				УзелКандидат = Данные.Tokens(Данные.TokenCount - Сч1);
			Иначе
				УзелКандидат = Данные.Tokens(Сч1 - 1);
			КонецЕсли; 
			Если ТипЗнч(УзелКандидат.Data) = Тип("Строка") Тогда
				Узел = УзелКандидат;
				НовыеДанные = Неопределено;
				Прервать;
			КонецЕсли;
			Если ТипЗнч(УзелКандидат.Data) = Тип("COMОбъект") Тогда
				Если УзелКандидат.Data.TokenCount > 0 Тогда
					НовыйУзел = УзелКандидат;
					НовыеДанные = УзелКандидат.Data;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Узел;

КонецФункции // ПолучитьГраничныйТерминалПравила()

Функция РазобратьТекстЗапроса(ПолеТекстовогоДокумента, СтроитьДеревоЗапроса = Истина)
	
	Если мПарсер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ПолеТекстовогоДокумента.ПолучитьТекст();
	мОбъектЗапроса.Текст = ТекстЗапроса;
	//Если Не ПолучитьПараметрыИзЗапроса(, Ложь) Тогда 
	//	Возврат Ложь;
	//КонецЕсли;
	
	Состояние("Идет анализ текста запроса...");
	
	Если СтроитьДеревоЗапроса Тогда 
		мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
		мТаблицаКоординат.Очистить();
	КонецЕсли;
	
	gpMsgTokenRead			= 1;
	gpMsgReduction			= 2;
	gpMsgAccept				= 3;
	gpMsgNotLoadedError		= 4;
	gpMsgLexicalError		= 5;
	gpMsgSyntaxError 		= 6;
	gpMsgCommentError		= 7;
	gpMsgInternalError		= 8;
	gpMsgCommentBlockRead	= 9;
	gpMsgCommentLineRead	= 10;
	
	мПарсер.OpenTextString(ТекстЗапроса);

	Закончили = Ложь;

	Пока Не Закончили Цикл 
		Ответ = мПарсер.Parse();
		Если Ложь
			Или Ответ = gpMsgLexicalError 
			Или (Истина // Хотя Builder в этом случае диагностируе лексическую ошибку, этот парсер почему то бесконечно выдает статус 7
				И Ответ = 7 
				И мПарсер.CurrentReduction = Неопределено)
		Тогда
			мПарсер.PopInputToken();
			Закончили = Истина;
			ЛксСообщитьСУчетомМодальности(ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента) + "Ошибка лексического анализатора!",
				МодальныйРежим, СтатусСообщения.Важное);
			ПоказатьТекущиеКоординаты();
		ИначеЕсли Ответ = gpMsgSyntaxError Тогда
			ЛксСообщитьСУчетомМодальности(ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента) + "Синтаксическая ошибка """ 
				+ мПарсер.CurrentToken().Data + """"
				//+ ", ожидается: " + ПолучитьСтрокуОжидаемыхТокенов()
				, МодальныйРежим, СтатусСообщения.Важное);
			мПарсер.PushInputToken(мПарсер.Tokens(0));
			ПоказатьТекущиеКоординаты();
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgReduction Тогда
		ИначеЕсли Ответ = gpMsgAccept Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgCommentError Тогда
		ИначеЕсли Ответ = gpMsgTokenRead Тогда
		ИначеЕсли Ответ = gpMsgInternalError Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgNotLoadedError Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgCommentBlockRead Тогда
		ИначеЕсли Ответ = gpMsgCommentLineRead Тогда
		КонецЕсли;
	КонецЦикла;
	
	Если СтроитьДеревоЗапроса Тогда 
		ПостроитьНисходящееЗапросы(ДеревоЗапроса, мПарсер.CurrentReduction);
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда
			ОбработатьДеревоЗапроса(ДеревоЗапроса.Строки[0], ДеревоЗапроса.Строки[0].СтрокаДанных.НачальнаяСтрока,
				ДеревоЗапроса.Строки[0].СтрокаДанных.НачальнаяКолонка);
			ДеревоЗапроса.Строки.Сортировать("Порядок Убыв", Истина);
			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(1, 1, 1, 1);
			ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ДеревоЗапроса.Строки[0];
			ЭлементыФормы.ДеревоЗапроса.Развернуть(ДеревоЗапроса.Строки[0], Истина);
			// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=999555#999555
			ЭлементыФормы.ДеревоЗапроса.ОбновитьСтроки();
			
			мТекстЗапросаДерева = ТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
	Состояние();
	Возврат (Ответ = gpMsgAccept);
	
КонецФункции // РазобратьТекстЗапроса

Процедура ПоказатьТекущиеКоординаты()

	// Баг платформы
	ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(мПарсер.CurrentLineNumber(), 1,
		мПарсер.CurrentLineNumber(), 1024);

КонецПроцедуры // ПоказатьКоординаты()

Функция ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента)
	
	Возврат ЛксПолучитьПредставлениеИзИдентификатора(ПолеТекстовогоДокумента.Имя)
		+ ": Строка " + мПарсер.CurrentLineNumber() + ": {(" + мПарсер.CurrentLineNumber() + "," + мПарсер.CurrentColumnNumber() + ")}: ";
		
КонецФункции // ПолучитьКоординатыВТекстеЗапроса()

Функция ПолучитьСтрокуОжидаемыхТокенов()

	СтрокаОжидаемыхТокенов = "";
	Для й = 0 по мПарсер.TokenCount() - 1 Цикл
		Токен = мПарсер.Tokens(й);
		СтрокаОжидаемыхТокенов = СтрокаОжидаемыхТокенов + ", " + Токен.Text;
	КонецЦикла;
	Возврат Сред(СтрокаОжидаемыхТокенов, 3);

КонецФункции // ПолучитьСтрокуОжидаемыхТокенов()

Функция ПостроитьНисходящееЗапросы(СтрокаДерева, Данные, Знач ЭтоВыборТаблицы = Ложь, Знач ПсевдонимСверху = Неопределено, Знач ЭтоСозданиеТаблицы = Ложь)
	
	Если Данные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	СтрокаВниз = СтрокаДерева;
	РодительскоеПравило = Данные.ParentRule.RuleNonterminal.Text;
	СоздатьУзелСразу = Ложь
		Или ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений")
		Или РодительскоеПравило = "<CreateUnion>"
		Или РодительскоеПравило = "<SelectUnion>"
		Или РодительскоеПравило = "<SimpleUnion>"
		Или (Истина
			И СтрокаДерева.ТипУзла = "<Packet>"
			И РодительскоеПравило <> "<Packet>")
		Или (Истина
			И (Ложь 
				Или РодительскоеПравило = "<SelectQuery>"
				Или РодительскоеПравило = "<CreateQuery>"
				Или РодительскоеПравило = "<Query>")
			И (Ложь
				Или СтрокаДерева.ТипУзла = "<Packet>"
				Или СтрокаДерева.ТипУзла = "<SelectUnion>"
				Или СтрокаДерева.ТипУзла = "<CreateUnion>"
				Или СтрокаДерева.ТипУзла = "<SimpleUnion>"))
		;
	Если СоздатьУзелСразу Тогда 
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.ТипУзла = РодительскоеПравило;
		СтрокаВниз = НоваяСтрока;
	КонецЕсли;
	Если Ложь
		//Или (Истина
		//	И СтрокаВниз.Имя = ""
		//	И (Ложь
		//		Или СтрокаВниз.Родитель = Неопределено
		//		Или СтрокаВниз.Родитель.ТипУзла = "<Packet>"))
		//Или РодительскоеПравило = "<Packet>"
		Или СоздатьУзелСразу
		Или РодительскоеПравило = "<EmbededQuery>"
		Или (Истина
			И РодительскоеПравило = "<Packet>"
			И СтрокаВниз.ТипУзла <> "<Packet>")
		Или (Истина
			И (Ложь
				Или РодительскоеПравило = "<TableName>"
				Или РодительскоеПравило = "<TableParameter>")
			И СтрокаВниз.ТипУзла = "<ChooseTable>")
		Или (Истина
			И ЭтоВыборТаблицы
			И РодительскоеПравило = "<TableAS>")
	Тогда
		Если Не ЗначениеЗаполнено(СтрокаВниз.Имя) Тогда 
			Если Ложь
				Или СтрокаВниз.Родитель = Неопределено
				Или СтрокаВниз.Родитель.ТипУзла = "<Packet>"
			Тогда 
				СтрокаВниз.Имя = "Запрос";
			КонецЕсли;
			Если РодительскоеПравило = "<Packet>" Тогда 
				//СтрокаВниз.Имя = "Пакет"; // Заменено 07.08.2011
				СтрокаВниз.Имя = "Запрос";
			ИначеЕсли РодительскоеПравило = "<EmbededQuery>" Тогда 
				СтрокаВниз.Имя = "Подзапрос";
			ИначеЕсли Ложь
				Или РодительскоеПравило = "<SelectUnion>"
				Или РодительскоеПравило = "<CreateUnion>"
				Или РодительскоеПравило = "<SimpleUnion>"
			Тогда 
				СтрокаВниз.Имя = "Объединение";
			ИначеЕсли Ложь
				Или РодительскоеПравило = "<SelectQuery>"
				Или РодительскоеПравило = "<CreateQuery>"
				Или РодительскоеПравило = "<Query>"
			Тогда
				СтрокаВниз.Имя = "Выборка";
			КонецЕсли;
		КонецЕсли;
		СтрокаВниз.Псевдоним = СтрокаВниз.Имя;
		
		ИмяПравила = Данные.ParentRule.RuleNonterminal.Text;
		СтрокаЗапроса = мТаблицаКоординат.Добавить();
		НачальныйТокен = ПолучитьГраничныйТерминалПравила(Данные, 0);
		СтрокаЗапроса.НачальнаяКолонка = НачальныйТокен.ColumnNumber;
		СтрокаЗапроса.НачальнаяСтрока = НачальныйТокен.LineNumber;
		КонечныйТокен = ПолучитьГраничныйТерминалПравила(Данные, 1);
		СтрокаЗапроса.КонечнаяКолонка = КонечныйТокен.ColumnNumber + СтрДлина(КонечныйТокен.Data);
		СтрокаЗапроса.КонечнаяСтрока = КонечныйТокен.LineNumber;

		Порядок = мТаблицаКоординат.Индекс(СтрокаЗапроса);
		СтрокаВниз.СтрокаДанных = СтрокаЗапроса;
		СтрокаВниз.Порядок = Порядок;
		мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
			СтрокаЗапроса.НачальнаяСтрока, СтрокаЗапроса.НачальнаяКолонка, СтрокаЗапроса.КонечнаяСтрока, СтрокаЗапроса.КонечнаяКолонка);
		Текст = мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст;
		Текст = СокрЛП(Текст);
		Если РодительскоеПравило = "<EmbededQuery>" Тогда 
			СтрокаВниз.Текст = Сред(Текст, 2, СтрДлина(Текст) - 2);
		Иначе 
			СтрокаВниз.Текст = Текст;
		КонецЕсли;
	КонецЕсли;
	Если Не СоздатьУзелСразу Тогда 
		Если Ложь
			Или РодительскоеПравило = "<FromUnion>"
			Или РодительскоеПравило = "<InUnion>"
			Или РодительскоеПравило = "<ChooseTable>"
		Тогда 
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.ТипУзла = РодительскоеПравило;
			СтрокаВниз = НоваяСтрока;
		КонецЕсли;
	КонецЕсли;
	Для ИндексТокена = 0 По Данные.TokenCount - 1 Цикл
		Токен = Данные.Tokens(Данные.TokenCount - 1 - ИндексТокена);
		Если Токен.Kind = 0 Тогда
			// Не терминальный токен
			ПсевдонимСнизу = ПостроитьНисходящееЗапросы(СтрокаВниз, Токен.Data,
				((Данные.TokenCount - 1 - ИндексТокена) = 0) И (РодительскоеПравило = "<ChooseTable>"), ПсевдонимСверху, 
					ЭтоСозданиеТаблицы Или РодительскоеПравило = "<CreateRoot>");
			Если ПсевдонимСнизу <> Неопределено Тогда 
				Если Ложь
					Или РодительскоеПравило = "<FromUnion>"
					Или РодительскоеПравило = "<ChooseTable>"
				Тогда 
					НоваяСтрока.Имя = ПсевдонимСнизу;
				ИначеЕсли Ложь
					Или РодительскоеПравило = "<DropRoot>"
					Или РодительскоеПравило = "<CreateRoot>"
				Тогда
					СтрокаТекущегоЗапроса = СтрокаВниз;
					//Пока Истина
					//	И СтрокаТекущегоЗапроса.Родитель <> Неопределено
					//	И СтрокаТекущегоЗапроса.Родитель.ТипУзла <> "<Packet>"
					//Цикл 
					//	СтрокаТекущегоЗапроса = СтрокаТекущегоЗапроса.Родитель;
					//КонецЦикла;
					КорневаяСтрока = СтрокаТекущегоЗапроса;
					КорневаяСтрока.ТипУзла = РодительскоеПравило;
					Если РодительскоеПравило = "<DropRoot>" Тогда
						КорневаяСтрока.Имя = "Удаление_" + ПсевдонимСнизу;
					Иначе
						КорневаяСтрока.Имя = "Создание_" + ПсевдонимСнизу;
					КонецЕсли;
				ИначеЕсли Истина
					И ЭтоСозданиеТаблицы 
					И Не РодительскоеПравило = "<TableName>"
					И Не РодительскоеПравило = "<TableParameter>"
				Тогда 
					ПсевдонимВверх = ПсевдонимСнизу;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли Ложь
			Или РодительскоеПравило = "<TableID>"
			Или (Истина
				И Не ЭтоВыборТаблицы
				И РодительскоеПравило = "<TableAS>")
		Тогда 
			ПсевдонимВверх = Токен.Data;
		//ИначеЕсли ЭтоСозданиеТаблицы Тогда 
		//	ПсевдонимВверх = ПсевдонимСнизу;
		КонецЕсли;
	КонецЦикла;
	Возврат ПсевдонимВверх;
	
КонецФункции

Функция ЛиСворачиваемыйТипУзла(ТипУзла)
	
	Результат = Ложь
		Или ТипУзла = "<InUnion>"
		Или ТипУзла = "<FromUnion>";
	Возврат Результат;
	
КонецФункции

Процедура СвернутьПодзапросы(СтрокаДерева, НачальнаяСтрока, НачальнаяКолонка)

	Если ЛиСворачиваемыйТипУзла(СтрокаДерева.ТипУзла) Тогда
		СтрокаДанных = СтрокаДерева.СтрокаДанных;
		Если НачальнаяСтрока = СтрокаДанных.НачальнаяСтрока Тогда 
			лНачальнаяКолонка = НачальнаяКолонка;
		Иначе
			лНачальнаяКолонка = 1;
		КонецЕсли;
		Если СтрокаДанных.КонечнаяСтрока = СтрокаДанных.НачальнаяСтрока Тогда
			лКонечнаяКолонка = лНачальнаяКолонка;
		Иначе
			лКонечнаяКолонка = 1;
		КонецЕсли;
		мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
			СтрокаДанных.НачальнаяСтрока - НачальнаяСтрока + 1,
			СтрокаДанных.НачальнаяКолонка - лНачальнаяКолонка + 1,
			СтрокаДанных.КонечнаяСтрока - НачальнаяСтрока + 1,
			СтрокаДанных.КонечнаяКолонка - лКонечнаяКолонка + 1);
		Если СтрокаДерева.ТипУзла = "<InUnion>" Тогда
			мОбъектЗапроса.УстановитьПараметр("_" + СтрокаДерева.Имя + "_",);
			мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "(&" + СтрокаДерева.Псевдоним + ")";
		ИначеЕсли СтрокаДерева.ТипУзла = "<FromUnion>" Тогда
			мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = СтрокаДерева.Псевдоним;
		КонецЕсли;
	Иначе
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			СвернутьПодзапросы(ДочерняяСтрока, НачальнаяСтрока, НачальнаяКолонка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СвернутьПодзапросы()

Процедура ОбработатьДеревоЗапроса(СтрокаДерева, НачальнаяСтрока = 1, НачальнаяКолонка = 1)

	Представление = СтрокаДерева.Имя;
	//Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(СтрокаДерева.Текст);
	//Если Фрагменты.Количество() > 1 Тогда
	//	ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
	//	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
	//	Если ОбъектМетаданных <> Неопределено Тогда
	//		Представление = Представление + "=" + СтрокаДерева.Текст;
	//	КонецЕсли; 
	//КонецЕсли; 
	Если СтрокаДерева.ТипУзла = "<ChooseTable>" Тогда
		Представление = Представление + " = " + ЛксПолучитьПервыйФрагмент(СтрокаДерева.Текст, "(");
		СтрокаДерева.ДлительностьПолная = "";
	КонецЕсли; 
	СтрокаДерева.Представление = Представление;
	
	// Нормализация динамических имен
	МассивДинамическихИмен = ЛксБыстрыйМассив("Выборка", "Подзапрос", "Запрос");
	Для Каждого ДинамическоеИмя Из МассивДинамическихИмен Цикл
		СтрокиДинамическогоИмени = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Имя", ДинамическоеИмя));
		ВГраница = СтрокиДинамическогоИмени.ВГраница();
		Для Счетчик = 0 По ВГраница Цикл
			ДочерняяСтрока = СтрокиДинамическогоИмени[ВГраница - Счетчик];
			ДочерняяСтрока.Имя = ДочерняяСтрока.Имя + Строка(Счетчик + 1);
		КонецЦикла;
	КонецЦикла;
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		ПсевдонимПодзапроса = "_" + СтрокаДерева.Имя + "_" + ДочерняяСтрока.Имя + "_";
		ДочерняяСтрока.Псевдоним = ПсевдонимПодзапроса;
		СтрокаДанных = ДочерняяСтрока.СтрокаДанных;
		Если ЛиСворачиваемыйТипУзла(ДочерняяСтрока.ТипУзла) Тогда
			СмещениеКолонки = 1;
		Иначе
			СмещениеКолонки = 0;
		КонецЕсли;
		Если СтрокаДанных = Неопределено Тогда
			// ВЫБРАТЬ * ИЗ &ТТ
			Продолжить;
		КонецЕсли;
		ОбработатьДеревоЗапроса(ДочерняяСтрока, СтрокаДанных.НачальнаяСтрока, СтрокаДанных.НачальнаяКолонка + СмещениеКолонки);
	КонецЦикла;
	
	Если Не мРежимСворачивания Тогда
		Возврат;
	КонецЕсли;
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(СтрокаДерева.Текст);
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		СвернутьПодзапросы(ДочерняяСтрока, НачальнаяСтрока, НачальнаяКолонка);
	КонецЦикла;
	СтрокаДерева.Текст = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();

КонецПроцедуры // ОбработатьДеревоЗапроса()

Процедура лРазвернутьВложенныеПодзапросы(Текст, СтрокаДерева)

	Если ЛиСворачиваемыйТипУзла(СтрокаДерева.ТипУзла) Тогда
		Если СтрокаДерева.ТипУзла = "<InUnion>" Тогда
			Текст = СтрЗаменить(Текст, "(&" + СтрокаДерева.Псевдоним + ")", "(" + РазвернутьВложенныеЗапросы(СтрокаДерева) + ")");
		ИначеЕсли СтрокаДерева.ТипУзла = "<FromUnion>" Тогда
			Текст = СтрЗаменить(Текст, СтрокаДерева.Псевдоним, "(" + РазвернутьВложенныеЗапросы(СтрокаДерева) + ")");
		КонецЕсли;
	Иначе
		Для Каждого СубДочерняяСтрока Из СтрокаДерева.Строки Цикл
			лРазвернутьВложенныеПодзапросы(Текст, СубДочерняяСтрока);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // лРазвернутьВложенныеПодзапросы()

Функция РазвернутьВложенныеЗапросы(СтрокаДерева, Текст = "")
	
	Если Текст = "" Тогда 
		Текст = СтрокаДерева.Текст;
	КонецЕсли; 
	Если мРежимСворачивания Тогда 
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			лРазвернутьВложенныеПодзапросы(Текст, ДочерняяСтрока);
		КонецЦикла;
	КонецЕсли;
	Возврат Текст;

КонецФункции // РазвернутьВложенныеЗапросы()

Процедура ДеревоЗапросаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ИмяКолонки = "Представление";
	Ячейка = ОформлениеСтроки.Ячейки[ИмяКолонки];
	Ячейка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ТипУзла = "<FromUnion>" Тогда 
		Ячейка.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<InUnion>" Тогда 
		Ячейка.ИндексКартинки = 1;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<Into>" Тогда 
		Ячейка.ИндексКартинки = 13;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<DropRoot>" Тогда 
		Ячейка.ИндексКартинки = 26;
	ИначеЕсли Ложь 
		Или ДанныеСтроки.ТипУзла = "<SelectUnion>"
		Или ДанныеСтроки.ТипУзла = "<CreateUnion>"
		Или ДанныеСтроки.ТипУзла = "<SimpleUnion>"
	Тогда 
		Ячейка.ИндексКартинки = 16;
	ИначеЕсли Ложь
		Или ДанныеСтроки.ТипУзла = "<SelectQuery>"
		Или ДанныеСтроки.ТипУзла = "<CreateQuery>"
	Тогда 
		Ячейка.ИндексКартинки = 15;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<Query>" Тогда 
		Ячейка.ИндексКартинки = 15;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<ChooseTable>" Тогда 
		ПолноеИмяТаблицы = ЛксПолучитьПервыйФрагмент(ДанныеСтроки.Текст, "(");
		ТипТаблицы = ирНеглобальный.ПолучитьТипТаблицыБДЛкс(ПолноеИмяТаблицы);
		Ячейка.ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(ТипТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Функция КоманднаяПанельТекстЗапросаСворачивать(Кнопка = Неопределено)
	
	Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Сворачивать;
	Если Не мРежимДереваЗапроса Тогда
		Кнопка.Пометка = Не Кнопка.Пометка;
		мРежимСворачивания = Кнопка.Пометка;
		Возврат Истина;
	Иначе
		НовыйРежимСворачивания = Не Кнопка.Пометка;
		Если КоманднаяПанельТекстЗапросаЗакончитьРедактирование(, НовыйРежимСворачивания) Тогда 
			Кнопка.Пометка = НовыйРежимСворачивания;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции

Процедура ПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Параметры.ТекущаяСтрока;
	Если ТекущаяСтрока.ЭтоВыражение = 2 Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение.Очистить();
	Иначе
		Если Не ТекущаяСтрока.НеИспользоватьОграничениеТипа Тогда
			ТекущаяСтрока.Значение = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);
			//Элемент.Значение = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельЗапросаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = ЭлементыФормы.ПанельЗапроса.Страницы.Индекс(ЭлементыФормы.ПанельЗапроса.Страницы.Настройки) Тогда 
		мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
		Если Не ПолучитьПараметрыИзЗапроса() Тогда 
			Возврат;
		КонецЕсли;
		УстановитьТипЗапроса(, Истина, мОбъектЗапроса.Текст);
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьТипЗапроса(НовыйТип = "", ПоказыватьОшибки = Ложь, ТекстЗапроса = "")

	Если мТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//Если НовыйТип = "Папка" Тогда
	//	Если Не НеЗадаватьВопросы Тогда
	//		Ответ = Вопрос("Содержимое текущего запроса будет утеряно. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	//		Если Ответ <> КодВозвратаДиалога.ОК Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//	КонецЕсли; 
	//КонецЕсли; 
	Если НовыйТип = "" Тогда
		НовыйТип = мТекущаяСтрока.ТипЗапроса;
	КонецЕсли;
	Если НовыйТип = "" Тогда
		НовыйТип = "Обычный";
	КонецЕсли;
	Если мТекущаяСтрока.ТипЗапроса <> НовыйТип Тогда
		Модифицированность = Истина;
	КонецЕсли;
	мТекущаяСтрока.ТипЗапроса = НовыйТип;
	Для Каждого лКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки Цикл
		лКнопка.Пометка = Ложь;
	КонецЦикла;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки[НовыйТип].Пометка = Истина;
	
	ОбновитьДоступностьПанелиЗапроса();
	Если НовыйТип <> "Папка" Тогда
		Если Не мЗапросЗагруженВКонсоль Тогда
			ЗагрузитьЗапросВКонсоль();
		КонецЕсли; 
		Если ТекстЗапроса = "" Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(Истина);
		КонецЕсли;
		БезОшибок = Истина;
		
		Если ирКэш.Получить().ВерсияПлатформы >= 801011 Тогда
			МассивСоздаваемыхВременныхТаблиц = ПолучитьМассивСоздаваемыхВременныхТаблицПакета();
			Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
				ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
				Если ИмяВременнойТаблицы <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|;
					|ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НовыйТип = "Компоновка" Тогда
			БезОшибок = ОбновитьКомпоновщик(ТекстЗапроса, ПоказыватьОшибки);
		ИначеЕсли НовыйТип = "Построитель" Тогда
			БезОшибок = ОбновитьПостроитель(ТекстЗапроса, ПоказыватьОшибки);
		Иначе
			мМассивВременныхТаблицКомпоновщика = Новый Массив;
			мОбъектЗапроса.Текст = ТекстЗапроса;
		КонецЕсли;
		//ЭтаФорма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Открыть_КонсольКомпоновокДанных.Доступность = НовыйТип = "Компоновка";
		Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой <> Неопределено Тогда
			ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.РежимКомпоновкиДанных = (НовыйТип = "Компоновка");
		КонецЕсли;
		СтраницаНастроек = ЭлементыФормы.ПанельНастройки.Страницы.Найти(НовыйТип);
		ЭлементыФормы.ПанельЗапроса.Страницы.Настройки.Доступность = СтраницаНастроек <> Неопределено;
		Если СтраницаНастроек <> Неопределено Тогда
			ЭлементыФормы.ПанельНастройки.ТекущаяСтраница = СтраницаНастроек;
		КонецЕсли; 
	КонецЕсли; 
	Возврат БезОшибок;

КонецФункции // УстановитьТипЗапроса()

Процедура ОбновитьДоступностьПанелиЗапроса() Экспорт

	ЭлементыФормы.ПанельЗапроса.Доступность = Истина
		И мТекущаяСтрока <> Неопределено
		И мТекущаяСтрока.ТипЗапроса <> "Папка";

КонецПроцедуры

Процедура ИзменитьТипЗапроса(Кнопка)
	
	УстановитьТипЗапроса(Кнопка.Имя);
	 
КонецПроцедуры

Функция ПолучитьМассивСоздаваемыхВременныхТаблицПакета()

	МассивТаблиц = ирКэш.Получить().ПолучитьМассивСоздаваемыхВременныхТаблицПакета(мОбъектЗапроса.Текст);
	Возврат МассивТаблиц;

КонецФункции // ПолучитьМассивСоздаваемыхВременныхТаблицПакета()

Функция ПолучитьРезультирующийЗапрос(пЗапрос)

	ТекстЗапроса = мОбъектЗапроса.Текст;
	МассивСоздаваемыхВременныхТаблиц = ПолучитьМассивСоздаваемыхВременныхТаблицПакета();

	Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда 
		//Если ирКэш.Получить().ВерсияПлатформы >= 801012 Тогда
		//	Компоновщик.Настройки.Структура.Очистить();
		//	ЭлементСтруктуры = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		//	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		//	Компоновщик.Настройки.Выбор.Элементы.Очистить();
		//	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		//		// Чтобы пропустить системные папки
		//		Если Не ДоступноеПоле.Папка Тогда
		//			НовоеВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//			НовоеВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		//			НовоеВыбранноеПоле.Использование = Истина;
		//		КонецЕсли;
		//	КонецЦикла;
		//	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		//	//Попытка
		//	//	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки, , ,
		//	//		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		//	//	КомпоновкаУдалась = Истина;
		//	//Исключение
		//	//	// Исключение может произойти в случае удаления временной таблицы
		//	//	КомпоновкаУдалась = Ложь;
		//	//	ИнформацияОбОшибке = ИнформацияОбОшибке();
		//	//КонецПопытки;
		//Иначе
			//// Установим использование параметров
			//Для Каждого ЭлементПараметра Из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
			//	ЭлементПараметра.Использование = Истина;
			//КонецЦикла;
			
			Компоновщик.Настройки.УсловноеОформление.Элементы.Очистить();
			ЭлементОформления = Компоновщик.Настройки.УсловноеОформление.Элементы.Добавить();
			ЭлементыОформления = ЭлементОформления.Отбор.Элементы;
			ЭлементыДоступныхПолей = Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы;
			ДобавитьДоступныеПоляВЭлементыУсловногоОформления(ЭлементыОформления, ЭлементыДоступныхПолей);
			
		//КонецЕсли;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Попытка
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки);
			КомпоновкаУдалась = Истина;
		Исключение
			// Исключение может произойти в случае создания/удаления временной таблицы
			КомпоновкаУдалась = Ложь;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		Если КомпоновкаУдалась Тогда
			Если МакетКомпоновкиДанных.НаборыДанных.Количество() > 0 Тогда
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
				Для Каждого лПараметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					Если Параметры.Найти(лПараметр.Имя, "ИмяПараметра") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					пЗапрос.УстановитьПараметр(лПараметр.Имя, лПараметр.Значение);
				КонецЦикла;
				Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
					ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
				КонецЕсли;
				//Если Не ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда // Закомментировал 23.03.2012
					СтрокаПорядка = ЛксПолучитьСтрокуПорядкаКомпоновки(Компоновщик.Настройки.Порядок);
					Если ЗначениеЗаполнено(СтрокаПорядка) Тогда
						Если Найти(ТекстЗапроса, "УПОРЯДОЧИТЬ ПО") = 0 Тогда
							ТекстЗапроса = ТекстЗапроса + Символы.ПС + "УПОРЯДОЧИТЬ ПО";
						Иначе
							ТекстЗапроса = ТекстЗапроса + ", ";
						КонецЕсли;
						ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + СтрокаПорядка;
					КонецЕсли;
					Если мФлагМаскировкиАвтоупорядочивание = Истина Тогда
						ТекстЗапроса = ТекстЗапроса + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ";
					КонецЕсли;
				//КонецЕсли;
			Иначе
				// Такое происходит если нет ни одного запроса на выборку
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли мТекущаяСтрока.ТипЗапроса = "Построитель" Тогда 
		Попытка
			ЗапросИзПостроителя = Построитель.ПолучитьЗапрос();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			//ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса,,,, МодальныйРежим, ИнформацияОбОшибке);
			Возврат МассивСоздаваемыхВременныхТаблиц;
		КонецПопытки;
		Если ЗапросИзПостроителя.Текст <> "" Тогда
			ТекстЗапроса = ЗапросИзПостроителя.Текст;
			Для Каждого лПараметр Из ЗапросИзПостроителя.Параметры Цикл
				Если Параметры.Найти(лПараметр.Ключ, "ИмяПараметра") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				пЗапрос.УстановитьПараметр(лПараметр.Ключ, лПараметр.Значение);
			КонецЦикла;
		Иначе
			// Такое происходит если нет ни одного запроса на выборку
		КонецЕсли;
	//ИначеЕсли мТекущаяСтрока.ТипЗапроса = "Обычный" Тогда 
	//	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	КонецЕсли;
	пЗапрос.Текст = ирКэш.Получить().РазмаскироватьВременныеТаблицы(ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	
	Возврат МассивСоздаваемыхВременныхТаблиц;

КонецФункции // ПолучитьРезультирующийЗапрос()

Функция ДобавитьДоступныеПоляВЭлементыУсловногоОформления(ЭлементыОформления, ЭлементыДоступныхПолей) Экспорт

	Для Каждого ДоступноеПоле Из ЭлементыДоступныхПолей Цикл
		Если Ложь
			Или ДоступноеПоле.Папка
		Тогда
			Продолжить;
		КонецЕсли; 
		Если ДоступноеПоле.Таблица Тогда
			ДобавитьДоступныеПоляВЭлементыУсловногоОформления(ЭлементыОформления, ДоступноеПоле.Элементы);
			Продолжить;
		КонецЕсли; 
		НовыйЭлементОтбора = ЭлементыОформления.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
		НовыйЭлементОтбора.Использование = Истина;
	КонецЦикла;
	Возврат Неопределено;

КонецФункции

Процедура КоманднаяПанельФормыИсполняемыйЗапрос(Кнопка)
	
	лЗапрос = Новый Запрос;
	//// @@@@ Тут доделать в 8.1.11
	//мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	//ЗаполнитьЗначенияСвойств(лЗапрос, мОбъектЗапроса, "Текст, МенеджерВременныхТаблиц");
	//Если Не ПолучитьПараметрыИзЗапроса() Тогда 
	//	Возврат;
	//КонецЕсли;
	//// @@@@ Тут еще перед выполнением запроса обработчик 
	УстановитьПараметрыЗапроса(лЗапрос);
		
	ПолучитьРезультирующийЗапрос(лЗапрос);
	Обработки.ирКонсольЗапросов.Создать().ОткрытьДляОтладки(лЗапрос, мТекущаяСтрока.ТипЗапроса, мТекущаяСтрока.Запрос + "- Исполняемый");
	
КонецПроцедуры

Процедура МенюДереваЗапросаПеренестиВНовыйЗапрос(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	ПутьВДеревеЗапроса = ЛксПолучитьСтрокуПутиВДереве(мТекущаяСтрокаДереваЗапроса, "Псевдоним");
	СтараяСтрокаДереваЗапросов = мТекущаяСтрока;
	ТекстЗапроса = СтараяСтрокаДереваЗапросов.ТекстЗапроса;
	СтрокаДанных = мТекущаяСтрокаДереваЗапроса.СтрокаДанных;
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
	мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
		СтрокаДанных.НачальнаяСтрока,
		СтрокаДанных.НачальнаяКолонка,
		СтрокаДанных.КонечнаяСтрока,
		СтрокаДанных.КонечнаяКолонка);
	мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = мТекущаяСтрокаДереваЗапроса.Имя + " ";
	НовыйТекстСтарогоЗапроса = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
	
	Ответ = Вопрос("Хотите добавить запрос в текущий пакетный запрос (Да) или создать отдельный простой запрос (Нет)?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекстЗапросаПоместить = вПолучитьТекстЗапроса(Истина);
		ТекстЗапросаПоместить = ирКэш.Получить().ДобавитьПредложениеПоместитьВЗапрос(ТекстЗапросаПоместить, мТекущаяСтрокаДереваЗапроса.Имя);
		НовыйТекстСтарогоЗапроса = ТекстЗапросаПоместить + Символы.ПС + ";" + Символы.ПС + НовыйТекстСтарогоЗапроса;
		мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(НовыйТекстСтарогоЗапроса);
		ОчиститьДеревоЗапроса();
		РазобратьТекстЗапроса(мСлужебноеПолеТекстовогоДокумента);
	Иначе
		НоваяСтрокаЗапроса = СкопироватьТекущийПодзапросВНовыйЗапрос(-1);
		НоваяСтрокаЗапроса.Запрос = "*" + НоваяСтрокаЗапроса.Запрос;
		ТекстЗапросаПоместить = ирКэш.Получить().ДобавитьПредложениеПоместитьВЗапрос(НоваяСтрокаЗапроса.ТекстЗапроса, мТекущаяСтрокаДереваЗапроса.Имя);
		НоваяСтрокаЗапроса.ТекстЗапроса = ТекстЗапросаПоместить;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаЗапроса;
		ВыполнитьЗапрос();
		СтараяСтрокаДереваЗапросов.ТекстЗапроса = НовыйТекстСтарогоЗапроса;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = СтараяСтрокаДереваЗапросов;
	КонецЕсли;
	НоваяТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДеревеЗапроса);
	Если НоваяТекущаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенюДереваЗапросаПреобразоватьВПодзапрос(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	ПутьВДеревеЗапроса = ЛксПолучитьСтрокуПутиВДереве(мТекущаяСтрокаДереваЗапроса, "Псевдоним");
	СтрокаДанных = мТекущаяСтрокаДереваЗапроса.СтрокаДанных;
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(мТекстЗапросаДерева);
	мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
	СтрокаДанных.НачальнаяСтрока,
	СтрокаДанных.НачальнаяКолонка,
	СтрокаДанных.КонечнаяСтрока,
	СтрокаДанных.КонечнаяКолонка);
	НовыйВыделенныйТекст = РазвернутьВложенныеЗапросы(ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока, мТекущаяСтрокаДереваЗапроса.Текст);
	ТипУзла = мТекущаяСтрокаДереваЗапроса.ТипУзла;
	Если ТипУзла = "<ChooseTable>" Тогда
		НовыйВыделенныйТекст = "(ВЫБРАТЬ * ИЗ " + НовыйВыделенныйТекст + " КАК " + мТекущаяСтрокаДереваЗапроса.Имя + ") ";
		
	// Заменено 30.11.2011
	//ИначеЕсли ТипУзла = "<FromUnion>" Тогда 
	//	НовыйВыделенныйТекст = "(ВЫБРАТЬ * ИЗ (" + НовыйВыделенныйТекст + ") КАК " + мТекущаяСтрокаДереваЗапроса.Имя + ") ";
	//ИначеЕсли ТипУзла = "<SelectRoot>" Тогда 
	//	НовыйВыделенныйТекст = "ВЫБРАТЬ * ИЗ (" + НовыйВыделенныйТекст + ") КАК " + мТекущаяСтрокаДереваЗапроса.Имя;
	ИначеЕсли ТипУзла = "<FromUnion>" Тогда 
		НовыйВыделенныйТекст = "(" + ирКэш.Получить().ПреобразоватьЗапросВПодзапрос(НовыйВыделенныйТекст, , мТекущаяСтрокаДереваЗапроса.Имя) + ") ";
	ИначеЕсли ТипУзла = "<SelectRoot>" Тогда
		ПсевдонимВложенногоЗапроса = мТекущаяСтрокаДереваЗапроса.Имя;
		Если мТекущаяСтрокаДереваЗапроса.Строки.Количество() = 1 Тогда
			Если мТекущаяСтрокаДереваЗапроса.Строки[0].ТипУзла = "<ChooseTable>"  Тогда
				ПсевдонимВложенногоЗапроса = мТекущаяСтрокаДереваЗапроса.Строки[0].Имя;
			КонецЕсли; 
		КонецЕсли; 
		НовыйВыделенныйТекст = ирКэш.Получить().ПреобразоватьЗапросВПодзапрос(НовыйВыделенныйТекст, , ПсевдонимВложенногоЗапроса);
	КонецЕсли;
	мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = НовыйВыделенныйТекст;
	
	// Данная проверка нужна только для корня
	мОбъектЗапроса.Текст = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
	Если Не ПолучитьПараметрыИзЗапроса(Ложь, Ложь) Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();
	РазобратьТекстЗапроса(мСлужебноеПолеТекстовогоДокумента);
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДеревеЗапроса);
	
КонецПроцедуры

Процедура ДеревоЗапросовПослеУдаления(Элемент)

	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ЛксПриПолученииДанныхДоступныхПолейКомпоновки(ОформленияСтрок);

КонецПроцедуры // ПриПолученииДанныхДоступныхПолей()

Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "НеИспользоватьОграничениеТипа" Тогда
		ПривестиЗначениеПараметраКОграничениюТипов();
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.КоманднаяПанельТаблица.Кнопки.Пустые.Пометка Тогда
		ирНеглобальный.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли;
	ирНеглобальный.ТабличноеПолеСВложеннымиКоллекциямиПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.РезультатТаблица.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.РезультатДерево.ОбновитьСтроки();
	
КонецПроцедуры

Процедура РезультатДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.КоманднаяПанельДерево.Кнопки.Пустые.Пометка Тогда
		ирНеглобальный.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли;
	ирНеглобальный.ТабличноеПолеСВложеннымиКоллекциямиПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаШиринаКолонок(Кнопка)
	
	ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаСжатьКолонки(Кнопка)
	
	ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоСжатьКолонки(Кнопка)
	
	ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоШиринаКолонок(Кнопка)
	
	ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура МенюДереваЗапросаШагнутьЧерез(Кнопка)
	
	Если Ложь
		Или Не мРежимДереваЗапроса
		Или Не СохранитьТекущийПодзапрос()
	Тогда 
		Возврат;
	КонецЕсли;
	ВыполнитьЗапрос();
	ТекущаяСтрокаДереваЗапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	РодительУровня = ТекущаяСтрокаДереваЗапроса.Родитель;
	Если РодительУровня = Неопределено Тогда
		РодительУровня = ДеревоЗапроса;
	КонецЕсли; 
	СтрокиУровня = РодительУровня.Строки;
	ТекущийИндекс = СтрокиУровня.Индекс(ТекущаяСтрокаДереваЗапроса);
	Если СтрокиУровня.Количество() = ТекущийИндекс + 1 Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокиУровня[ТекущийИндекс + 1];
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЛксОбновитьЗаголовкиСтраницПанелей(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаСравнить(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(мСравнительТабличныхДокументов, ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОткрыть_КонсольКомпоновокДанных(Кнопка)
	
	НовыйТип = "Компоновка";
	Если мТекущаяСтрока.ТипЗапроса <> НовыйТип Тогда
		Ответ = Вопрос("Тип запроса будет изменен на ""Компоновка"". Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	Если Не УстановитьПараметрыЗапроса() Тогда
		Возврат;
	КонецЕсли;
	Если Не УстановитьТипЗапроса(НовыйТип) Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройки = Компоновщик.ПолучитьНастройки();
	ЭлементСтруктуры = НовыеНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Для Каждого ПолеНабораДанных Из мНаборДанных.Поля Цикл
		ВыбранноеПоле = НовыеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеНабораДанных.Поле);
	КонецЦикла;
	Для Каждого ЗначениеПараметра Из НовыеНастройки.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра.Использование = Истина;
	КонецЦикла;
	Отладить(мСхемаКомпоновки, Ложь, НовыеНастройки);
	
КонецПроцедуры

Процедура МенюДереваЗапросаПерейтиКСозданию(Кнопка)
	
	ТекущаяСтрока = ЭтаФорма.ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	СтрокаЗапросаСоздания = ЭтаФорма.ДеревоЗапроса.Строки.Найти("Создание_" + ТекущаяСтрока.Имя, "Имя", Истина);
	Если СтрокаЗапросаСоздания <> Неопределено Тогда
		ЭтаФорма.ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаЗапросаСоздания;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОбъединитьФайл(Кнопка)
	
	ОткрытьФайл(Ложь);

КонецПроцедуры

Процедура КоманднаяПанельФормыОткрытьФайл(Кнопка)
	
	ОткрытьФайл();
	
КонецПроцедуры

Процедура ПараметрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Истина
		И ВыбраннаяСтрока.Значение <> ВыбраннаяСтрока.Значение
		И Колонка.Данные = "Значение" 
	Тогда
		ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыИсследоватьПараметры(Кнопка)
	
	Если ЭлементыФормы.Параметры.ТекущаяСтрока <> Неопределено Тогда
		Исследовать(ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНастройкаОсторожностиВыборкиДанных(Кнопка)
	
	 ФормаНастройки = ирКэш.Получить().ПолучитьФорму("НастройкаОсторожностиВыборкиДанных");
	 ФормаНастройки.ОткрытьМодально();
	 Кнопка.Пометка = ВосстановитьЗначение("ир_ВыполнятьПредварительныйЗапрос") = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОПодсистеме(Кнопка)
	
	ЛксОткрытьСправкуПоПодсистеме(ЭтотОбъект);
	
КонецПроцедуры

Процедура МенюДереваЗапросовСоздатьЭлементСправочникаЗапросы(Кнопка)
	
	ОбъектМДЗапросы = Метаданные.Справочники.Найти("Запросы2iS");
	Если ОбъектМДЗапросы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗначениеВыбора = ЛксВыбратьСсылку(ОбъектМДЗапросы, мСсылка);
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		//ЗапросОбъект = ЗначениеВыбора.ПолучитьОбъект();
		ЗапросОбъект = ЗначениеВыбора;
	Иначе
		ЗапросОбъект = Справочники.Запросы2iS.СоздатьЭлемент();
	КонецЕсли; 
	ФормаЭлемента = ДУ("Р = УФ(П1, П2)", Перечисления.Сервисы2iS.ПолучитьФормуОбъектаБД, ЗапросОбъект);
	СтароеЗакрыватьПриЗакрытииВладельца = ЗакрыватьПриЗакрытииВладельца;
	СтароеВладелецФормы = ВладелецФормы;
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ЭтаФорма.ВладелецФормы = ФормаЭлемента;
	ЭтаФорма.ВладелецФормы.Открыть();
	вСохранитьЗапросыВФайл(, , Истина, "");
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = СтароеЗакрыватьПриЗакрытииВладельца;
	ЭтаФорма.ВладелецФормы = СтароеВладелецФормы;
	
КонецПроцедуры

Процедура МенюДереваЗапросовЗагрузитьИзЭлементаСправочникаЗапросы(Кнопка)
	
	ОбъектМДЗапросы = Метаданные.Справочники.Найти("Запросы2iS");
	Если ОбъектМДЗапросы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗначениеВыбора = ЛксВыбратьСсылку(ОбъектМДЗапросы, мСсылка);
	Если Не ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Возврат;
	КонецЕсли; 
	ФормаЭлемента = Вычислить("УФ(Перечисления.Сервисы2iS.ПолучитьФормуОбъектаБД, ЗначениеВыбора)");
	СтароеЗакрыватьПриЗакрытииВладельца = ЗакрыватьПриЗакрытииВладельца;
	СтароеВладелецФормы = ВладелецФормы;
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ЭтаФорма.ВладелецФормы = ФормаЭлемента;
	ЭтаФорма.ВладелецФормы.Открыть();
	вСохранитьЗапросыВФайл(, , Истина);
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = СтароеЗакрыватьПриЗакрытииВладельца;
	ЭтаФорма.ВладелецФормы = СтароеВладелецФормы;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаКонсольОбработки(Кнопка)
	
	ирНеглобальный.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектов(ЭтаФорма.ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	ЛксДеревоКонсолиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваЗапросов");
	
КонецПроцедуры

Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	ЛксДеревоКонсолиПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваЗапросов");

КонецПроцедуры

Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	вСохранитьЗапросТекущейСтроки();
	ЛксДеревоКонсолиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение, "СтрокаДереваЗапросов")
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоЗаполнитьГруппыДублейДляЗамены(Кнопка)
	
	ЛксОткрытьФормуЗаменыСсылокИзТабличногоПоля(ЭтаФорма.ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗаполнитьГруппуДублейДляЗамены(Кнопка)
	
	ЛксОткрытьФормуЗаменыСсылокИзТабличногоПоля(ЭтаФорма.ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаШаблонЧтениеИЗаписьСсылочногоОбъекта(Кнопка)
	
	Текст =
	"Объект = СтрокаРезультата.Ссылка.ПолучитьОбъект();
	|
	|// Обработка объекта
	|Объект.Реквизит1 = ?;
	|
	|//Объект.ОбменДанными.Загрузка = Истина;
	|Объект.Записать();";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиСтрокиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиСтрокиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаШаблонЧтениеИЗаписьМенеджераЗаписи(Кнопка)

	Текст =
	"// В результате запроса должны присутствовать все измерения регистра
	|МенеджерЗаписи = РегистрыСведений.Регистр1.СоздатьМенеджерЗаписи();
	|ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультата);
	|МенеджерЗаписи.Прочитать();
	|
	|// Обработка менеджера записи
	|МенеджерЗаписи.Реквизит1 = ;
	|
	|МенеджерЗаписи.Записать();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиСтрокиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиСтрокиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаШаблонЧтениеИЗаписьНабораЗаписей(Кнопка)

	Текст =
	"// В результате запроса должны присутствовать все колонки для отбора
	|НаборДвижений = РегистрыСведений.Регистр1.СоздатьНаборЗаписей();
	|Для Каждого ЭлементОтбора Из НаборДвижений.Отбор Цикл
	|	ЭлементОтбора.Использование = Истина;
	|	ЭлементОтбора.Значение = СтрокаРезультата[ЭлементОтбора.Имя];
	|КонецЦикла;
	|НаборДвижений.Прочитать();
	|// В таком наборе записей будет 0 или 1 строка
	|Для Каждого ДвижениеРегистра Из НаборДвижений Цикл
	|
	|	// Обработка строки
	|	ДвижениеРегистра.Реквизит1 = ;
	|
	|КонецЦикла;
	|//НаборДвижений.ОбменДанными.Загрузка = Истина;
	|НаборДвижений.Записать();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиСтрокиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиСтрокиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаРезультатаШаблонОбходПоГруппировкам(Кнопка)

	Текст =
	"КолонкиРезультата = мРезультатЗапроса.Колонки;
	|Выборка1 = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, КолонкиРезультата.Группировка1.Имя);
	|Индикатор = ЛксПолучитьИндикаторПроцесса(Выборка1.Количество());
	|Пока Выборка1.Следующий() Цикл
	|	ЛксОбработатьИндикатор(Индикатор);
	|	Выборка2 = Выборка1.Выбрать();
	|	Пока Выборка2.Следующий() Цикл
	|	КонецЦикла;
	|КонецЦикла;
	|ЛксОсвободитьИндикаторПроцесса();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаРезультатаСравнитьТекст(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(ирКэш.Получить().МассивСравненияТекстов, ЭлементыФормы.Запрос1С);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСверткаРезультаты(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛксИзменитьСвернутость(Кнопка.Пометка, ЭлементыФормы.ПанельРезультата, ЭтаФорма.ЭлементыФормы.РазделительГоризонтальный, ЭтаФорма.Панель, "низ");
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаДатыЗаПериод(Кнопка)
	
	Текст = "ВЫБРАТЬ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d) КАК Период 
	|		ИЗ 
	|   (ВЫБРАТЬ 0 КАК a 
	|   ОБЪЕДИНИТЬ   
	|   ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 9) КАК aa 
	|	  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 0 КАК b 
	|	  ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ    
	|	ВЫБРАТЬ 9) КАК bb 
	|	  ПО (ИСТИНА) 
	|	  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 0 КАК c 
	|	  ОБЪЕДИНИТЬ 
	|	ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ    
	|	ВЫБРАТЬ 9) КАК cc 
	|	  ПО (ИСТИНА) 
	|	  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	|		 0 КАК d 
	|	ОБЪЕДИНИТЬ 
	|	ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ    
	|	ВЫБРАТЬ 9) КАК dd 
	|	  ПО (ИСТИНА) 
	|ГДЕ 
	|   aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ)";
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаСВыбромМетаданных(ЛиТаблицыИзменения = Ложь) Экспорт

	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", ЭтаФорма, ЭтаФорма);
	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	//лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	ЗначениеВыбора = Форма.ОткрытьМодально();
	Если ЗначениеВыбора <> Неопределено Тогда
		Текст = ирНеглобальный.ПолучитьТекстЗапросаПоВыбраннымМетаданнымЛкс(ЗначениеВыбора, ЛиТаблицыИзменения);
	КонецЕсли; 
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаСВыбромМетаданных()

Процедура КоманднаяПанельТекстЗапросаОбъединениеСсылочныхТаблиц(Кнопка)
	
	Текст = ПолучитьТекстЗапросаСВыбромМетаданных();
	Если Не ПустаяСтрока(Текст) Тогда
		ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаОбъединениеСсылочныхТаблицИзменений(Кнопка)
	
	Текст = ПолучитьТекстЗапросаСВыбромМетаданных(Истина);
	Если Не ПустаяСтрока(Текст) Тогда
		ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаОбъединениеРегистраторов(Кнопка)
	
	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", ЭтаФорма, ЭтаФорма);
	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Ложь);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	ЗначениеВыбора = Форма.ОткрытьМодально();
	Если ЗначениеВыбора <> Неопределено Тогда
		Массив = Новый Массив;
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ЗначениеВыбора.ПолноеИмяОбъекта);
		ПостроительЗапроса = Новый ПостроительЗапроса("ВЫБРАТЬ Т.* ИЗ " + ЗначениеВыбора.ПолноеИмяОбъекта + " КАК Т");
		ПостроительЗапроса.ЗаполнитьНастройки();
		ПоляТаблицы = ПостроительЗапроса.ДоступныеПоля;
		Если ПоляТаблицы.Найти("Регистратор") <> Неопределено Тогда
			Для Каждого ТипРегистратора Из ПоляТаблицы.Регистратор.ТипЗначения.Типы() Цикл
				Регистратор = Метаданные.НайтиПоТипу(ТипРегистратора);
				Массив.Добавить(Регистратор.ПолноеИмя());
			КонецЦикла; 
			Текст = ирНеглобальный.ПолучитьТекстЗапросаПоВыбраннымМетаданнымЛкс(Массив);
			ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаКонсольКода(Кнопка)
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат;
	КонецЕсли; 
	СтруктураПараметров = Новый Структура(); 
	СтруктураПараметров.Вставить("мРезультатЗапроса", мРезультатЗапроса);
	СтруктураПараметров.Вставить("Параметры", ПолучитьСтруктуруПараметров());
	ОперироватьСтруктурой(ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст(), , СтруктураПараметров);
	
КонецПроцедуры

Функция ПолучитьКодОбработкиТаблицыРезультата(ПеременнаяТаблица = "РезультатТаблица", ПеременнаяСтрокаТаблицы = "СтрокаРезультата")
	
	ТекстМодуля = "";
	Если флРаботатьВТранзакции Тогда
		ТекстМодуля = ТекстМодуля + "
		|НачатьТранзакцию();";
	КонецЕсли; 
	ТекстМодуля = ТекстМодуля + "
	|//Индикатор = ЛксПолучитьИндикаторПроцесса(" + ПеременнаяТаблица + ".Количество());
	|Для каждого " + ПеременнаяСтрокаТаблицы + " Из " + ПеременнаяТаблица + " Цикл";
	ТекстОбработкиСтроки = ЭлементыФормы.КодОбработкиСтрокиРезультата.ПолучитьТекст();
	//Если Не ПустаяСтрока(ТекстОбработкиСтроки) Тогда
		ТекстМодуля = ТекстМодуля + "
		|	//ЛксОбработатьИндикатор(Индикатор);
		|	ОбработкаПрерыванияПользователя();
		|	Попытка
		|		// Обработчик строки результата НАЧАЛО";
		Для Счетчик = 1 По СтрЧислоСтрок(ТекстОбработкиСтроки) Цикл
			ТекстМодуля = ТекстМодуля + "
			|		" + СтрПолучитьСтроку(ТекстОбработкиСтроки, Счетчик);
		КонецЦикла;
		ТекстМодуля = ТекстМодуля + "
		|		// Обработчик строки результата КОНЕЦ";
		ТекстМодуля = ТекстМодуля + "
		|	Исключение";
		Если флПропускатьОшибки Тогда 
			ТекстМодуля = ТекстМодуля + "
			|		Сообщить(ОписаниеОшибки());
			|		Продолжить";
		Иначе
			ТекстМодуля = ТекстМодуля + "
			|		ВызватьИсключение";
		КонецЕсли;
		ТекстМодуля = ТекстМодуля + "
		|	КонецПопытки;";
	//КонецЕсли; 
	ТекстМодуля = ТекстМодуля + "
	|КонецЦикла;
	|//ЛксОсвободитьИндикаторПроцесса(Индикатор, Истина);";
	Если флРаботатьВТранзакции Тогда
		ТекстМодуля = ТекстМодуля + "
		|ЗафиксироватьТранзакцию();";
	КонецЕсли;
	Возврат  ТекстМодуля;

КонецФункции

Функция ПолучитьКодПолученияРезультатаЗапроса(ПеременнаяЗапрос = "мОбъектЗапроса", ПеременнаяРезультатЗапроса = "РезультатЗапроса")
	
	ПолучитьРезультирующийЗапрос(мОбъектЗапроса);
	ТекстЗапроса = ирНеглобальный.ПолучитьСтроковыйЛитералИзМногострочногоТекстаЛкс(мОбъектЗапроса.Текст);
	ТекстМодуля = ПеременнаяЗапрос + " = Новый Запрос;
	|" + ПеременнаяЗапрос + ".Текст = " + ТекстЗапроса + ";";
	Для Каждого СтрокаПараметра Из Параметры Цикл
		Если СтрокаПараметра.ЭтоВыражение = 1 Тогда
			ТекстЗначения = "" + СтрокаПараметра.Значение;
			ПредставлениеЗначения = "";
		Иначе
			ТекстЗначения = "" + СтрокаПараметра.ИмяПараметра;
			ПредставлениеЗначения = "<" + ТипЗнч(СтрокаПараметра.Значение) + ">[" + СтрокаПараметра.Значение + "]";
		КонецЕсли; 
		ТекстМодуля = ТекстМодуля + "
		|" + ПеременнаяЗапрос + ".Параметры.Вставить(""" + СтрокаПараметра.ИмяПараметра + """, " + ТекстЗначения + "); // " + ПредставлениеЗначения;
	КонецЦикла;
	ТекстПередВыполнением = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
	Если Не ПустаяСтрока(ТекстПередВыполнением) Тогда
		ТекстМодуля = ТекстМодуля + "
		|Параметры = " + ПеременнаяЗапрос + ".Параметры;
		|// Обработчик перед выполнением НАЧАЛО
		|" + ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст() + "
		|// Обработчик перед выполнением КОНЕЦ";
	КонецЕсли; 
	ТекстМодуля = ТекстМодуля + "
	|" + ПеременнаяРезультатЗапроса + " = " + ПеременнаяЗапрос + ".Выполнить();";
	Возврат ТекстМодуля;

КонецФункции

Процедура КоманднаяПанельОбработкаСтрокиРезультатаПолучитьТекст(Кнопка)
	
	ПеременнаяРезультатЗапроса = "РезультатЗапроса";
	ТекстМодуля = ПолучитьКодПолученияРезультатаЗапроса(, ПеременнаяРезультатЗапроса);
	ПеременнаяТаблица = "РезультатТаблица";
	ТекстМодуля = ТекстМодуля + "
	|" + ПеременнаяТаблица + " = " + ПеременнаяРезультатЗапроса + ".Выгрузить();";
	ТекстМодуля = ТекстМодуля + ПолучитьКодОбработкиТаблицыРезультата(ПеременнаяТаблица);
    ирНеглобальный.ПоместитьТекстВБуферОбменаОСЛкс(ТекстМодуля);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаПолучитьТекст(Кнопка)
	
	ТекстМодуля = ПолучитьКодПолученияРезультатаЗапроса();
    ирНеглобальный.ПоместитьТекстВБуферОбменаОСЛкс(ТекстМодуля);
	ТекстОбработкиРезультата = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
	Если Не ПустаяСтрока(ТекстОбработкиРезультата) Тогда
		ТекстМодуля = ТекстМодуля + "
		|// Обработчик результата НАЧАЛО
		|" + ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст() + "
		|// Обработчик результата КОНЕЦ";
	КонецЕсли; 
    ирНеглобальный.ПоместитьТекстВБуферОбменаОСЛкс(ТекстМодуля);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаКонсольКода(Кнопка)
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат;
	КонецЕсли; 
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("РезультатТаблица", РезультатТаблица);
	СтруктураПараметров.Вставить("Параметры", ПолучитьСтруктуруПараметров());
	ТекстАлгоритма = ПолучитьКодОбработкиТаблицыРезультата();
	ОперироватьСтруктурой(ТекстАлгоритма, , СтруктураПараметров);
	
КонецПроцедуры

Процедура ПараметрыТипЗначенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ирНеглобальный.РедактироватьОписаниеТиповЛкс(Элемент);
	ирНеглобальный.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(ЭлементыФормы.Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРежимТранзакции(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭтотОбъект.ВыполнятьВТранзакции = Кнопка.Пометка;
	
КонецПроцедуры

Процедура КоманднаяПанельПередВыполнениемЗапросаВыполнить(Кнопка)
	
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ВыполнитьПрограммныйКод();

КонецПроцедуры

Процедура КоманднаяПанельПередВыполнениемЗапросаКонсольКода(Кнопка)
	
	//мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	//Если Не ПолучитьПараметрыИзЗапроса() Тогда 
	//	Возврат;
	//КонецЕсли;
	УстановитьПараметрыЗапроса();
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	СтруктураПараметров.Вставить("мОбъектЗапроса", мОбъектЗапроса);
	ОперироватьСтруктурой(ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст(), , СтруктураПараметров);
	
КонецПроцедуры

Процедура ПараметрыЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);

КонецПроцедуры

Процедура МенюДереваЗапросаОткрытьФормуСписка(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(ТекущаяСтрока.Текст);
	Если Фрагменты.Количество() > 1 Тогда
		ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
		Если ОбъектМетаданных <> Неопределено Тогда
			Если ирНеглобальный.ЛиТипВнешнегоИсточникаДанных(ОбъектМетаданных) Тогда
				ПолноеИмяМД = ТекущаяСтрока.Текст;
			КонецЕсли; 
			ОткрытьФорму(ПолноеИмяМД + ".ФормаСписка");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаРедакторОбъектаБД(Кнопка)
	
	ирНеглобальный.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоРедакторОбъектаБД(Кнопка)

	ирНеглобальный.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаКонсольКомпоновки(Кнопка)
	
    Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоТаблицеЗначений(РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоОткрытьТаблицу(Кнопка)

	ирНеглобальный.ОткрытьФормуПроизвольногоЗначенияЛкс(РезультатДерево, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаОткрытьТаблицу(Кнопка)
	
	ирНеглобальный.ОткрытьФормуПроизвольногоЗначенияЛкс(РезультатТаблица, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаЧтениеИЗаписьТабличнойЧасти(Кнопка)
	
	Текст = 
	"// В запросе должны присутствовать ИТОГИ ПО полю ссылки
	|ИмяКолонкиСсылки = мРезультатЗапроса.Колонки.Ссылка.Имя; // Ссылка - имя колонки, содержащей ссылку на объект
	|ИмяКолонкиНомераСтроки = мРезультатЗапроса.Колонки.НомерСтроки.Имя; // НомерСтроки - имя колонки, содержащей номер строки табличной части
	|Выборка1 = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяКолонкиСсылки); 
	|Индикатор = ЛксПолучитьИндикаторПроцесса(Выборка1.Количество());
	|Пока Выборка1.Следующий() Цикл
	|	ЛксОбработатьИндикатор(Индикатор);
	|	Объект = Выборка1.Ссылка.ПолучитьОбъект(); // Ссылка - имя колонки, содержащей ссылку на объект
	|	Выборка2 = Выборка1.Выбрать();
	|	Пока Выборка2.Следующий() Цикл
	|		ТабличнаяЧасть = Объект.ТабличнаяЧасть1; // ТабличнаяЧасть1 - имя табличной части
	|		ИндексСтроки = Выборка2[ИмяКолонкиНомераСтроки] - 1;
	|		СтрокаТабличнойЧасти = ТабличнаяЧасть[ИндексСтроки];
	|
	|		// Обработка Строки
	|		СтрокаТабличнойЧасти.Реквизит1 = ;
	|
	|	КонецЦикла;
	|	//Объект.ОбменДанными.Загрузка = Истина;
	|	Объект.Записать();
	|КонецЦикла;
	|ЛксОсвободитьИндикаторПроцесса();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаЧтениеИЗаписьНабораЗаписей(Кнопка)
	
	Текст = 
	"// В запросе должны присутствовать ИТОГИ ПО полю регистратора
	|НаборДвижений = РегистрыСведений.Регистр1.СоздатьНаборЗаписей(); // РегистрыСведений.Регистр1 - регистр, подчиненный регистратору
	|ИмяКолонкиРегистратора = мРезультатЗапроса.Колонки.Регистратор.Имя; // Регистратор - имя колонки, содержащей ссылку регистратора набора записей
	|ИмяКолонкиНомераСтроки = мРезультатЗапроса.Колонки.НомерСтроки.Имя; // НомерСтроки - имя колонки, содержащей номер строки набора записей
	|Выборка1 = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяКолонкиРегистратора);
	|Индикатор = ЛксПолучитьИндикаторПроцесса(Выборка1.Количество());
	|Пока Выборка1.Следующий() Цикл
	|	ЛксОбработатьИндикатор(Индикатор);
	|	НаборДвижений.Отбор.Регистратор.Установить(Выборка1[ИмяКолонкиРегистратора]); 
	|	НаборДвижений.Прочитать();
	|	Выборка2 = Выборка1.Выбрать();
	|	Пока Выборка2.Следующий() Цикл
	|		ИндексСтроки = Выборка2[ИмяКолонкиНомераСтроки] - 1;
	|		ДвижениеРегистра = НаборДвижений[ИндексСтроки];
	|		
	|		// Обработка строки
	|		ДвижениеРегистра.Реквизит1 = ;
	|		
	|	КонецЦикла;
	|	//НаборДвижений.ОбменДанными.Загрузка = Истина;
	|	НаборДвижений.Записать();
	|КонецЦикла;
	|ЛксОсвободитьИндикаторПроцесса();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыДобавитьСтандартныйПериод(Кнопка)
	
	ИмяПараметраПериод = "Период";
	СтрокаПараметра = Параметры.Найти(ИмяПараметраПериод, "ИмяПараметра");
	Если СтрокаПараметра <> Неопределено Тогда
		Если ТипЗнч(СтрокаПараметра.Значение) = Тип("СтандартныйПериод") Тогда
			Если РедактироватьСтандартныйПериод(СтрокаПараметра.Значение) Тогда
				ВычислитьПараметрыЗапроса();
			КонецЕсли; 
		Иначе
			Предупреждение("Параметр с именем """ + ИмяПараметраПериод + """ найден, но он имеет некорректный тип");
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	СтрокаПериода = Параметры.Добавить();
	СтрокаПериода.ИмяПараметра = ИмяПараметраПериод;
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Сегодня;
	СтрокаПериода.Значение = СтандартныйПериод;
	СтрокаПериода.ЭтоВыражение = Ложь;
	
	СтрокаНачалаПериода = Параметры.Добавить();
	СтрокаНачалаПериода.ИмяПараметра = "НачалоПериода";
	СтрокаНачалаПериода.Выражение = "лПараметры.Период.ДатаНачала";
 	СтрокаНачалаПериода.ЭтоВыражение = Истина;

	СтрокаКонцаПериода = Параметры.Добавить();
	СтрокаКонцаПериода.ИмяПараметра = "КонецПериода";
	СтрокаКонцаПериода.Выражение = "лПараметры.Период.ДатаОкончания";
	СтрокаКонцаПериода.ЭтоВыражение = Истина;
	
	ВычислитьПараметрыЗапроса();
	УправлениеКолонкамиПараметры();
	
КонецПроцедуры

Процедура ПараметрыВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоВыражение = Истина Тогда
		ЗначенияПараметров = ПолучитьСтруктуруПараметров();
		ОбработкаВводаФормулы = Обработки.ирВводВыраженияВстроенногоЯзыка.Создать();
		ОбработкаВводаФормулы.Инициализировать(ЭтаФорма, ТекущиеДанные.Выражение, , , ЗначенияПараметров);
		ФормаВводаВыражения = ОбработкаВводаФормулы.ПолучитьФорму(, ЭтаФорма);
		ФормаВводаВыражения.Открыть();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанельПараметрыОбновитьВычисляемые(Кнопка)
	
	ВычислитьПараметрыЗапроса();
	
КонецПроцедуры

Процедура ПараметрыЗначениеПриИзменении(Элемент = Неопределено)
	
	ВычислитьПараметрыЗапроса();
	
КонецПроцедуры

Функция РедактироватьСтандартныйПериод(СтандартныйПериод)
	
	КонецПериода = СтандартныйПериод.ДатаОкончания;
	НачалоПериода = СтандартныйПериод.ДатаНачала;
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		СтандартныйПериод.ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
		СтандартныйПериод.ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ПараметрыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		#Если _ Тогда
		    Элемент.Значение = Новый СтандартныйПериод
		#КонецЕсли
		Если РедактироватьСтандартныйПериод(Элемент.Значение) Тогда
			ПараметрыЗначениеПриИзменении();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСсылкаНаОбъектБД(Кнопка)
	
	ЭкземплярКомпоненты = ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка);
	СтрокаПараметра = ЭкземплярКомпоненты.ВставитьСсылкуНаОбъектБД(ЭлементыФормы.Параметры, "ИмяПараметра", , "Параметры");
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗагрузитьПолностью(Кнопка)
	
	ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПолностьюЛкс(ЭтаФорма, мВыборкаРезультата, ЭлементыФормы.КоманднаяПанельТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаПерейтиКРодительскомуУзлу(Кнопка)
	
	Если Не СохранитьТекущийПодзапрос() Тогда 
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если Ложь
		Или ТекущаяСтрока = Неопределено 
		Или ТекущаяСтрока.Родитель = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ТекущаяСтрока.Родитель;
	Если Ложь
		Или Не мРежимСворачивания 
		Или Не ЛиСворачиваемыйТипУзла(ТекущаяСтрока.ТипУзла)
	Тогда
		ОтносительнаяНачальнаяСтрока = ТекущаяСтрока.СтрокаДанных.НачальнаяСтрока - ТекущаяСтрока.Родитель.СтрокаДанных.НачальнаяСтрока + 1;
		ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(ОтносительнаяНачальнаяСтрока, 1, ОтносительнаяНачальнаяСтрока, 1);
	Иначе
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.НайтиПоказатьСловоВТексте(ТекущаяСтрока.Псевдоним);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимТранзакции.Пометка = ВыполнятьВТранзакции;
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаРезультатаВыполнитьАнализТехножурнала(Кнопка)
	
	Если мАнализТехножурнала <> Неопределено Тогда
		мАнализТехножурнала.ПоказатьТрассу(, "СтрокаМодуля",, 0);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросаРезультатаНастройкаТехножурнала(Кнопка)
	
	ФормаНастройки = Обработки.ирНастройкаТехножурнала.ПолучитьФорму();
	ФормаНастройки.Открыть();
	ФормаНастройки.НаСервере = Не ирКэш.Получить().ЭтоФайловаяБаза;
	ФормаНастройки.ПриИзмененииПравилаПолученияФайлаНастройки();
	Если 1=1 Тогда
		Если ирКэш.ЭтоФайловаяБазаЛкс() Тогда
			Ответ = Вопрос("Хотите загрузить рекомендуемую настройку для трассировки запросов под текущим пользователем?",
				РежимДиалогаВопрос.ОКОтмена);
		Иначе
			Ответ = Вопрос("Хотите загрузить рекомендуемую настройку для трассировки запросов в текущей базе под текущим пользователем?",
				РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаНастройки.ЗагрузитьФайлНастройки("ШаблонТрассировкаЗапросов", Истина, Истина, Ложь);
			СтрокаКаталога = ФормаНастройки.ТабличноеПолеЖурналы[0];
			ФормаНастройки.ЭлементыФормы.ТабличноеПолеЖурналы.ТекущаяСтрока = СтрокаКаталога;
			ФормаЖурнала = ФормаНастройки.ОткрытьФормуРедактированияЖурнала();
			ТабличноеПолеСписокСобытий = ФормаЖурнала.ЭлементыФормы.ТабличноеПолеСписокСобытий;
			Для Каждого СтрокаТП Из ТабличноеПолеСписокСобытий.Значение Цикл
				ТабличноеПолеСписокСобытий.ВыделенныеСтроки.Добавить(СтрокаТП);
			КонецЦикла;
			ФормаЖурнала.КП_ДетальныйФильтрСобытийТекущийПользователь();
			Если Не ирКэш.ЭтоФайловаяБазаЛкс() Тогда
				// К сожалению в файловой СУБД это свойство не заполняется
				ФормаЖурнала.КП_ДетальныйФильтрСобытийТекущаяБаза();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	//ФормаЖурнала.УстановитьТекущуюСтрокуСобытия("SDBL");
	
КонецПроцедуры

Процедура ДеревоЗапросовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ТипЗапроса = "Компоновка" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирСхемаКомпоновкиДанных);
	ИначеЕсли ДанныеСтроки.ТипЗапроса = "Построитель" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирПостроительЗапроса);
	ИначеЕсли ДанныеСтроки.ТипЗапроса = "Обычный" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирЗапрос);
	Иначе //Если ДанныеСтроки.ТипЗапроса = "Папка" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирПапка);
		ОформлениеСтроки.Ячейки.НовыйМенеджерВремменныхТаблиц.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенюДереваЗапросовДобавитьПапку(Кнопка)
	
	ТекущийРодитель = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоЗапросов;
	КонецЕсли; 
	НоваяСтрока = ТекущийРодитель.Строки.Добавить();
	НоваяСтрока.ТипЗапроса = "Папка";
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
	ЭлементыФормы.ДеревоЗапросов.ИзменитьСтроку();
	
КонецПроцедуры

Процедура КоманднаяПанельТабличныйДокументАвтосумма(Кнопка)
	
	ЭтаФорма.Автосумма = Не Кнопка.Пометка;
	Кнопка.Пометка = Автосумма;
	ЭлементыФормы.РезультатТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.РезультатТабличныйДокумент.ТекущаяОбласть;

КонецПроцедуры

Процедура РезультатТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Если Автосумма Тогда
		ТекстКнопки = ирНеглобальный.ПолеТабличногоДокумента_ПолучитьПредставлениеСуммыВыделенныхЯчеекЛкс(Элемент);
	Иначе
		ТекстКнопки = "";
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельТабличныйДокумент.Кнопки.Автосумма.Текст = ТекстКнопки;

КонецПроцедуры

Процедура КоманднаяПанельТабличныйДокументСравнить(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(мСравнительТабличныхДокументов, ЭлементыФормы.РезультатТабличныйДокумент);
	
КонецПроцедуры

Процедура РезультатТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	#Если _ Тогда
	    мДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	#КонецЕсли
	ЗначенияПолей = мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	Если ЗначенияПолей.Количество() > 0 Тогда
		ОткрытьЗначение(ЗначенияПолей[0].Значение);
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура НастроитьКолонкиТаблицыРезультата()
	
	Для Каждого Колонка Из ЭлементыФормы.РезультатТаблица.Колонки Цикл
		Колонка.ТолькоПросмотр = Истина;
		Колонка.ОтображатьИтогиВПодвале = ПоказыватьИтогиТаблицы;
	КонецЦикла; 
	ЭлементыФормы.РезультатТаблица.Подвал = ПоказыватьИтогиТаблицы;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПоказыватьИтоги(Кнопка)
	
	ПоказыватьИтогиТаблицы = Не Кнопка.Пометка;
	Кнопка.Пометка = ПоказыватьИтогиТаблицы;
	НастроитьКолонкиТаблицыРезультата();
	
КонецПроцедуры

Процедура МенюДереваЗапросаВыполнитьВсеПодзапросы(Кнопка)
	
	ВсеСтрокиДерева = ирНеглобальный.ПолучитьВсеСтрокиДереваЗначенийЛкс(ДеревоЗапроса);
	ЕщеНеВыполненные = ДеревоЗапроса.Строки.НайтиСтроки(Новый Структура("ДлительностьПолная", Неопределено), Истина);
	НеУчаствующие = ДеревоЗапроса.Строки.НайтиСтроки(Новый Структура("ДлительностьПолная", ""), Истина);
	ВыполнятьУжеВыполненные = Истина;
	Если Истина
		И ЕщеНеВыполненные.Количество() > 0 
		И ВсеСтрокиДерева.Количество() <> НеУчаствующие.Количество() + ЕщеНеВыполненные.Количество()
	Тогда
		Ответ = Вопрос("Хотите выполнить только еще не выполненные подзапросы?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнятьУжеВыполненные = Ложь;
		КонецЕсли;
	КонецЕсли; 
	Индикатор = ЛксПолучитьИндикаторПроцесса(ВсеСтрокиДерева.Количество());
	ВыполнитьВсеПодзапросыСтрокиДереваЗапросов(, ВыполнятьУжеВыполненные, Индикатор);
	ЛксОсвободитьИндикаторПроцесса();
	
КонецПроцедуры

Процедура ВыполнитьВсеПодзапросыСтрокиДереваЗапросов(СтрокаДереваЗапроса = Неопределено, ВыполнятьУжеВыполненные = Истина, Индикатор = Неопределено)
	
	Если СтрокаДереваЗапроса = Неопределено Тогда
		СтрокаДереваЗапроса = ДеревоЗапроса.Строки[0];
	КонецЕсли;
	ЛксОбработатьИндикатор(Индикатор);
	Если Ложь
		Или СтрокаДереваЗапроса.ДлительностьПолная = Неопределено 
		Или ВыполнятьУжеВыполненные
	Тогда
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаДереваЗапроса;
		ВыполнитьЗапрос();
	КонецЕсли;
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		ОбработкаПрерыванияПользователя();
		Если Не ирНеглобальный.СтрокиРавныЛкс(ДочерняяСтрока.ТипУзла, "<ChooseTable>") Тогда
			ВыполнитьВсеПодзапросыСтрокиДереваЗапросов(ДочерняяСтрока, ВыполнятьУжеВыполненные, Индикатор);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры


ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляОтбора);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляПорядка);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяФайла = "";
мИмяПути = "";
//мРезультатЗапроса = Новый ТаблицаЗначений;

мЗаголовокФормы = Заголовок;
мТекущаяСтрока = НеОпределено;
//мИдетДобавление = Ложь;
мАктивизированаДобавляемаяЗапись = Ложь;

//мТаблицаЗагружена = Ложь;
//мСводнаяТаблицаЗагружена = Ложь;
мИзмененияМенеджераВременныхТаблиц = Новый Структура;

мТаблицаКоординат = Новый ТаблицаЗначений;
мТаблицаКоординат.Колонки.Добавить("Правило");
мТаблицаКоординат.Колонки.Добавить("НачальнаяСтрока");
мТаблицаКоординат.Колонки.Добавить("НачальнаяКолонка");
мТаблицаКоординат.Колонки.Добавить("КонечнаяСтрока");
мТаблицаКоординат.Колонки.Добавить("КонечнаяКолонка");

//ЭлементОтбораДействие = ЭлементыФормы.СобытияСУБД.ОтборСтрок.Действие;
//ЭлементОтбораДействие.Использование = Истина;
//ЭлементОтбораДействие.ВидСравнения = ВидСравнения.НеРавно;
//ЭлементОтбораДействие.Значение = "getExecSQLStatistics";

ДеревоЗапросов.Колонки.Добавить("СтрокаДанных");
мРежимДереваЗапроса = Ложь;
мРежимСворачивания = Истина;
мРежимРедактирования = Ложь;
мЗапросЗагруженВКонсоль = Ложь;
мСлужебноеПолеТекстовогоДокумента = ирКэш.Получить().СлужебноеПолеТекстовогоДокумента;

мСхемаКомпоновки = Новый СхемаКомпоновкиДанных;
ИсточникДанных = ЛксДобавитьЛокальныйИсточникДанных(мСхемаКомпоновки);
мНаборДанных = ЛксДобавитьНаборДанныхЗапрос(мСхемаКомпоновки.НаборыДанных, ИсточникДанных);

// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1009788#1009788
ОписаниеТипов = ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы();
ДополнительныеТипы = Новый Массив();
// Типы взяты из типа ОписаниеИсточникаДанных 
ДополнительныеТипы.Добавить(Тип("РезультатЗапроса"));
ДополнительныеТипы.Добавить(Тип("ОбластьЯчеекТабличногоДокумента"));
ДополнительныеТипы.Добавить(Тип("ВидТочкиМаршрутаБизнесПроцесса")); // В ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы нельзя добавить, т.к. для этого типа не поддерживается сериализация
ДополнительныеТипы.Добавить(Тип("ВидПериодаРегистраРасчета")); // В ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы нельзя добавить, т.к. для этого типа не поддерживается сериализация
ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ДополнительныеТипы);
//ОписаниеТипов = Новый ОписаниеТипов(); // Так делать нельзя, т.к. поле ввода не даст редактировать свой текст
Параметры.Колонки.Добавить("Значение", ОписаниеТипов);
мСтруктураВосстановления = ирНеглобальный.ПолучитьСтруктуруВосстановленияКонсолиЛкс("irQueryConsole");