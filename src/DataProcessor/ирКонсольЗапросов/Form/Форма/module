// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;
// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой

Перем мИмяФайла;                        // имя файла запросов
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
//Перем мИдетДобавление;                  // признак добавления
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи

Перем мРезультатЗапроса;                // результат 
Перем мВыборкаРезультата;

//Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
//Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу
Перем мКэшПустыхЗначений;

Перем мСхемаКомпоновки;
Перем мПлатформа;
Перем мМассивВременныхТаблицКомпоновщика;
Перем мФлагМаскировкиАвтоупорядочивание;
Перем мНаборДанных;
Перем мПарсер;
Перем мТаблицаКоординат;
Перем мРежимДереваЗапроса;
Перем мРежимСворачивания;
Перем мРежимРедактирования;
Перем мТекущаяСтрокаДереваЗапроса;
Перем мСлужебноеПолеТекстовогоДокумента;
Перем мТекстЗапросаДерева;
Перем мСравнительТабличныхДокументов;
Перем мИзмененияМенеджераВременныхТаблиц;
Перем мИсторияФайлов;
Перем мСтруктураВосстановления;
Перем мАнализТехножурнала;
Перем мЗапросЗагруженВКонсоль;
Перем мДанныеРасшифровки;
Перем мСписокПереключаемыхСтраниц;
Перем мПлатформыADODB;

Функция ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ЭкземплярКомпоненты)

	ИнициализироватьГлобальныйКонтекстПодсказки(ЭкземплярКомпоненты);
	
	Если ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата Тогда
		ТаблицаСтруктурТипов = Неопределено;
		ТипЗначенияПеременной = Неопределено;
		Если ТипЗнч(мВыборкаРезультата) = Тип("COMОбъект") Тогда
			ТаблицаСтруктурТипов = мПлатформа.ПолучитьНовуюТаблицуСтруктурТипа();
			СтруктураТипа = ТаблицаСтруктурТипов.Добавить();;
			СтруктураТипа.ИмяОбщегоТипа = "COMОбъект.{WbemScripting.SwbemLocator}.ISWbemObjectSet";
		Иначе
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(мРезультатЗапроса));
			ТипЗначенияПеременной = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли; 
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("мРезультатЗапроса", "Свойство", ТипЗначенияПеременной, мРезультатЗапроса,,, ТаблицаСтруктурТипов);
	ИначеЕсли ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(мОбъектЗапроса));
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("мОбъектЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов), мОбъектЗапроса);
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("вПолучитьПараметр", "Метод", Новый ОписаниеТипов);
	ИначеЕсли ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата Тогда
		//ЭкземплярКомпоненты.ОчиститьТаблицуСловЛокальногоКонтекста();
		ТаблицаСтруктурТипов = Неопределено;
		ТипЗначенияПеременной = Неопределено;
		МетаданныеСлова = Неопределено;
		Попытка
			Пустышка = мВыборкаРезультата.Count;
			ЭтоWMI = Истина;
		Исключение
			ЭтоWMI = Ложь;
		КонецПопытки;
		Если ЭтоWMI Тогда
			ТаблицаСтруктурТипов = мПлатформа.ПолучитьНовуюТаблицуСтруктурТипа();
			СтруктураТипа = ТаблицаСтруктурТипов.Добавить();;
			СтруктураТипа.ИмяОбщегоТипа = "COMОбъект.{WbemScripting.SwbemLocator}.ISWbemObject";
			Для Каждого МетаданныеСлова Из мВыборкаРезультата Цикл
				СтруктураТипа.Метаданные = МетаданныеСлова;
				Прервать;
			КонецЦикла;
		КонецЕсли; 
		Если ТаблицаСтруктурТипов = Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СтрокаТаблицыЗначений"));
			ТипЗначенияПеременной = Новый ОписаниеТипов(МассивТипов);
			МетаданныеСлова = РезультатТаблица;
		КонецЕсли; 
		ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста("СтрокаРезультата", "Свойство", ТипЗначенияПеременной, МетаданныеСлова,,, ТаблицаСтруктурТипов);
	ИначеЕсли ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса Тогда
		//Если Ложь
		//	Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов")
		//Тогда
		КонфигурацияМетаданных = Неопределено;
		КонтекстВыполненияЗапроса = Неопределено;
		Если ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") Тогда
			КонфигурацияМетаданных = ПолучитьСоединениеADO();
		ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") Тогда
			КонфигурацияМетаданных = ПолучитьWMIСлужбу();
		Иначе
			КонтекстВыполненияЗапроса = мОбъектЗапроса;
		КонецЕсли; 
		ЭкземплярКомпоненты.УстановитьКонфигурациюМетаданных(КонфигурацияМетаданных, КонтекстВыполненияЗапроса);
		ПрефиксПараметра = ЭкземплярКомпоненты.ПолучитьПрефиксПараметра();
		//КонецЕсли;
		//МаркерЭкземпляра = КомпонентаТекстаЗапроса.ИмяКласса + "_" + КомпонентаТекстаЗапроса.Имя;
		//Если Лев(Кнопка.Имя, СтрДлина(МаркерЭкземпляра)) = МаркерЭкземпляра Тогда
			ЭкземплярКомпоненты.ОчиститьТаблицуСловЛокальногоКонтекста();
			Для Каждого СтрокаПараметра Из Параметры Цикл
				ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста(ПрефиксПараметра + СтрокаПараметра.ИмяПараметра, "Свойство");
			КонецЦикла;
		//КонецЕсли; 
		Возврат Неопределено;
	КонецЕсли;
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста(
		"Параметры", "Свойство", Новый ОписаниеТипов("Структура"), СтруктураПараметров);
		
	Возврат Неопределено;

КонецФункции // ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров()

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	
	// Специальная обработка команд компоненты ДО
	ЭкземплярКомпоненты = ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка);
	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ЭкземплярКомпоненты);
	
	Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "Проверить") Тогда
		Если Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") Тогда
			мОбъектЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
			Если Не ПолучитьПараметрыИзЗапроса() Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если мРежимДереваЗапроса Тогда
		Развернули = Ложь;
		Если Ложь
			Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов")
		Тогда
			КоманднаяПанельТекстЗапросаИзменитьИлиСохранитьУзелДерева(, Истина);
			Если мРежимСворачивания Тогда 
				Если Не КоманднаяПанельТекстЗапросаСворачивать() Тогда 
					Возврат;
				КонецЕсли;
				Развернули = Истина;
			КонецЕсли;
		ИначеЕсли Ложь
			Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КопироватьВБуферОбменаВесьТекст") 
			Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КопироватьВБуферОбменаТекстВВидеКода") 
		Тогда
			Если мРежимСворачивания Тогда 
				Если Не КоманднаяПанельТекстЗапросаСворачивать() Тогда 
					Возврат;
				КонецЕсли;
				Развернули = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ПерейтиКОпределению") Тогда
		ТекущееВыражение = КомпонентаТекстаЗапроса.ПолучитьТекущееОбъектноеВыражение();
		Если Лев(ТекущееВыражение, 1) = "&" Тогда
			СтрокаПараметра = Параметры.Найти(Сред(ТекущееВыражение, 2));
			Если СтрокаПараметра <> Неопределено Тогда
				Если СтрокаПараметра.ЭтоВыражение = Истина Тогда
					Попытка 
						Значение = Вычислить(СтрокаПараметра.Значение);
						ОткрытьЗначение(Значение);
					Исключение
						ЛксСообщитьСУчетомМодальности("Ошибка при вычислении параметра """ + СтрокаПараметра.ИмяПараметра + """"
							+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
					КонецПопытки;
				Иначе
					Значение = СтрокаПараметра.Значение;
					ОткрытьЗначение(Значение);
				КонецЕсли;
			КонецЕсли; 
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	Если ЭкземплярКомпоненты <> Неопределено Тогда
		Результат = ЭкземплярКомпоненты.Нажатие(Кнопка);
	КонецЕсли;
	
	// Специальная обработка команд компоненты ПОСЛЕ
	Если мРежимДереваЗапроса Тогда
		Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ПерейтиКОпределению") Тогда
			СтрокаПодзапроса = ДеревоЗапроса.Строки.Найти(Результат, "Псевдоним", Истина);
			Если СтрокаПодзапроса <> Неопределено Тогда
				Если СохранитьТекущийПодзапрос() Тогда 
					СтрокаПодзапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Строки.Найти(Результат, "Псевдоним", Истина);
					ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаПодзапроса;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Развернули Тогда
			Если Не мРежимРедактирования Тогда
				КоманднаяПанельТекстЗапросаСворачивать();
			КонецЕсли; 
			//Если мРежимРедактирования Тогда 
			//	КоманднаяПанельТекстЗапросаИзменитьИлиСохранитьУзелДерева(, Истина);
			//КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка = Неопределено)

	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	Если Ложь
		Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов") 
		Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КопироватьВБуферОбменаВесьТекст") 
		Или Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ВставитьИзБуфераОбменаВесьТекст") 
	Тогда
		ЭкземплярКомпоненты = КомпонентаТекстаЗапроса;
	Иначе
		Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
			ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя];
		Иначе
			ЭкземплярКомпоненты = КомпонентаТекстаЗапроса;
		КонецЕсли;
	КонецЕсли;

	Возврат ЭкземплярКомпоненты;

КонецФункции

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойАвтоОбновитьСправку()
	
	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	//Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
	//	ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя];
	//Иначе
		ЭкземплярКомпоненты = КомпонентаТекстаЗапроса;
	//КонецЕсли;
	ЭкземплярКомпоненты.АвтоОбновитьСправку();
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция вПолучитьПараметр(ИмяПараметра)
	
	НайденнаяСтрока = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
	Возврат НайденнаяСтрока.Значение;
	
КонецФункции

// Получает текст запроса из текстового поля
//
// Параметры:
//  СВыделением - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция вПолучитьТекстЗапроса(ИспользоватьТекущийПодзапрос = Ложь)
	
	ТекстПоля = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если мРежимДереваЗапроса Тогда
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда
			Если Истина
				И ИспользоватьТекущийПодзапрос
				И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
			Тогда
				ТекстПоля = РазвернутьВложенныеЗапросы(ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока, ТекстПоля);
				Если ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.ТипУзла = "<ChooseTable>" Тогда
					ТекстПоля = "ВЫБРАТЬ * ИЗ " + ТекстПоля + " КАК ВложенныйЗапрос";
				КонецЕсли;
			Иначе 
				ТекстПоля = РазвернутьВложенныеЗапросы(ДеревоЗапроса.Строки[0], мТекстЗапросаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
		
	Возврат ТекстПоля;
		
КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура УстановитьТекстПоляТекстаЗапроса(Текст)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);
	
КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура мУстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // мУстановитьЗаголовокФормы()

// Предлагает сохранить текущий подзапрос, если он находился в режиме редактирования.
//
// Параметры:
//  Булево - Истина - если пользователь согласился не сохранять или сохранять, Ложь - если отказался.
//
Функция СохранитьТекущийПодзапрос()

	Если мРежимРедактирования Тогда
		Возврат КоманднаяПанельТекстЗапросаЗакончитьРедактирование();
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // СохранитьТекущийПодзапрос()

// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()
	
	Если Истина
		И мЗапросЗагруженВКонсоль
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрока <> НеОпределено 
	Тогда
		ТекстЗапроса = вПолучитьТекстЗапроса();
		Если мТекущаяСтрока.ТекстЗапроса <> ТекстЗапроса Тогда
			Модифицированность = Истина;
		КонецЕсли;
		мТекущаяСтрока.ТекстЗапроса = ТекстЗапроса;
		
		мТекущаяСтрока.ПараметрыЗапроса = Параметры.Скопировать();
		мТекущаяСтрока.КодПередВыполнениемЗапроса = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
		мТекущаяСтрока.КодОбработкиСтрокиРезультата = ЭлементыФормы.КодОбработкиСтрокиРезультата.ПолучитьТекст();
		мТекущаяСтрока.КодОбработкиРезультата = ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст();
		мТекущаяСтрока.Настройка = ирНеглобальный.СохранитьОбъектВВидеСтрокиXMLЛкс(Компоновщик.Настройки);
		мТекущаяСтрока.ВыбратьВсеПоля = ВыбратьВсеПоля;
		
		// WMI
		ПараметрыWMI = Новый Структура;
		ПараметрыWMI.Вставить("ТекущийКлассWMI", ТекущийКлассWMI);
		ПараметрыWMI.Вставить("ИмяСервераWMI", ИмяСервераWMI);
		ПараметрыWMI.Вставить("ТочкаПодключенияWMI", ТочкаПодключенияWMI);
		мТекущаяСтрока.ПараметрыWMI = ПараметрыWMI;
		
		// ADO
		ПараметрыADO = ПолучитьИсточникДанныхADO();
		ПараметрыADO.Вставить("ИспользованиеGWF", ИспользованиеGWF);
		ПараметрыADO.Вставить("СмещениеГодаADO", СмещениеГодаADO);
		ПараметрыADO.Вставить("Типизировать1С", Типизировать1С);
		мТекущаяСтрока.ПараметрыADO = ПараметрыADO;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()
	
	//// Для совместимости со старыми версиями
	//Если ДеревоЗапросов.Колонки.Найти("КодОбработкиСтрокиРезультата") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодОбработкиСтрокиРезультата");
	//КонецЕсли;
	//Если ДеревоЗапросов.Колонки.Найти("КодПередВыполнениемЗапроса") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодПередВыполнениемЗапроса");
	//КонецЕсли;
	//Если ДеревоЗапросов.Колонки.Найти("КодОбработкиРезультата") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодОбработкиРезультата");
	//КонецЕсли;
	
	ДеревоЗапросов.Строки.Очистить();
	мТекущаяСтрока = Неопределено;
	ОчиститьДеревоЗапроса();
	УстановитьТекстПоляТекстаЗапроса("");
	Параметры.Очистить();
	
КонецПроцедуры // ОчиститьЗначения()

Процедура ОткрытьФайлПоПолномуИмени(ПолноеИмяФайла, ОчиститьПередЗагрузкой = Истина)
	
	мИмяФайла = ПолноеИмяФайла;
	Файл = Новый Файл(мИмяФайла);
	мИмяПути = Файл.Путь;
	ЗагрузитьЗапросыИзФайла(ОчиститьПередЗагрузкой);
	СохранитьИмяФайла();
	
КонецПроцедуры

Процедура ОткрытьФайлИзИстории(Кнопка) 
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СтрокаИстории = мИсторияФайлов[Число(Сред(Кнопка.Имя, 2))];
		ОткрытьФайлПоПолномуИмени(СтрокаИстории.Значение);
	КонецЕсли;
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры

Процедура ОбновитьПодменюИсторииФайлов()
	
	Если Не мРежимРедактора Тогда
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Файл.Кнопки.ОткрытьПоследние.Кнопки;
		ирНеглобальный.ОбновитьПодменюИсторииФайловЛкс(мИсторияФайлов, Кнопки);
	КонецЕсли; 
	
КонецПроцедуры

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()
	
	СохранитьЗначение("ирКонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("ирКонсольЗапросов_ИмяПути",  мИмяПути);
	
	Если ЗначениеЗаполнено(мИмяФайла) Тогда
		ирНеглобальный.ДобавитьВИсториюЭлементЛкс(мИсторияФайлов, мИмяФайла);
		СохранитьЗначение("ирКонсольЗапросов.мИсторияФайлов", мИсторияФайлов);
		ОбновитьПодменюИсторииФайлов();
	КонецЕсли; 
	
КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура ВосстановитьИмяФайла()
	
	мИмяФайла = ВосстановитьЗначение("ирКонсольЗапросов_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("ирКонсольЗапросов_ИмяПути");
	
	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;
	
	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьИмяФайла()

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево, ОчиститьПередЗагрузкой = Истина)
	
	Если ОчиститьПередЗагрузкой Тогда 
		НовоеДерево.Строки.Очистить();
	КонецЕсли;
	
	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока, ОчиститьПередЗагрузкой = Истина);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьДеревоЗапросов()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура СоздатьНовыйФайлЗапросов(Отладка = Ложь)

	мИмяФайла = "";
	мИмяПути = "";
	Если Не Отладка Тогда 
		СохранитьИмяФайла();
	КонецЕсли;
	
	вОчиститьЗначения();
	мУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;
	
	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Запрос = "Запросы";
	мТекущаяСтрока.ТекстЗапроса = "";
	//мИдетДобавление = Истина;
	мАктивизированаДобавляемаяЗапись = Истина;
	
	ПриИзмененииДереваЗапросов();
	ЭтаФорма.ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст("");
	ЭтаФорма.ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст("");
	ЭтаФорма.ЭлементыФормы.КодПередВыполнениемЗапроса.УстановитьТекст("");
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьЗапросыИзФайла(ОчиститьПередЗагрузкой = Истина)
	
	//Проверим существование файла.
	ФайлЗначения = Новый Файл(мИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);
	
	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда
		
		Модифицированность = Не ОчиститьПередЗагрузкой;
		Если ОчиститьПередЗагрузкой Тогда
			вОчиститьЗначения();
			мУстановитьЗаголовокФормы();
		КонецЕсли;
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаВремТаблицы);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		
		Модифицированность = Не ОчиститьПередЗагрузкой;
		Если ОчиститьПередЗагрузкой Тогда
			вОчиститьЗначения();
			мУстановитьЗаголовокФормы();
		КонецЕсли;
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов, ОчиститьПередЗагрузкой);
		
	Иначе // Формат файла не опознан
		СоздатьНовыйФайлЗапросов();
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
		|Создан новый файл", 10);
	КонецЕсли;
	
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - Булево, *Ложь - признак необходимости предупреждения перед сохранением;
//	ЗапрашиватьИмяФайла - Булево, *Ложь - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь, ОповеститьВладельца = Ложь, Знач ИмяФайла = Неопределено, 
	СброситьМодифицированность = Неопределено)
	
	Если СброситьМодифицированность = Неопределено Тогда
		СброситьМодифицированность = Не мРежимРедактора;
	КонецЕсли; 
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = мИмяФайла;
	КонецЕсли; 
	
	СохранитьПодзапрос = Истина;
	Если ЗапрашиватьСохранение Тогда
		Если мРежимРедактирования Тогда
			Ответ = Вопрос("Выполняется редактирование строки дерева запроса. Сохранить ее изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли;
			СохранитьПодзапрос = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли; 
	КонецЕсли; 
	Если СохранитьПодзапрос Тогда
		Если Не СохранитьТекущийПодзапрос() Тогда 
			Возврат Ложь;
		КонецЕсли;
	Иначе
		КоманднаяПанельТекстЗапросаОтменитьРедактирование();
	КонецЕсли; 
	
	вСохранитьЗапросТекущейСтроки();
	
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Истина
		И (Ложь
			Или мРежимРедактора 
			Или ОповеститьВладельца)
		И ВладелецФормы <> Неопределено
		И Не ЗапрашиватьИмяФайла
		И Не ЗначениеЗаполнено(ИмяФайла)  // Добавлено 06.12.2012
	Тогда
		мОбъектЗапроса.Текст = мТекущаяСтрока.ТекстЗапроса;
		ТекстЗапросаКорректен = Ложь;
		Если ПолучитьПараметрыИзЗапроса(, Ложь) Тогда
			Если УстановитьТипЗапроса(, Истина) Тогда 
				ТекстЗапросаКорректен = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ТекстЗапросаКорректен Тогда 
			Ответ = Вопрос("Текст запроса содержит ошибки. Продолжить сохранение запроса?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		//КонструкторЗапроса = Новый КонструкторЗапроса;
		//КонструкторЗапроса.РежимКомпоновкиДанных = Истина;
		//ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		//Попытка
		//	КонструкторЗапроса.Текст = ТекстЗапроса;
		//Исключение
		//	ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса,,,, МодальныйРежим, ИнформацияОбОшибке());
		//	Возврат;
		//КонецПопытки;
		
		Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НаборДанных", мРедактируемыйНаборДанных);
			СтруктураПараметров.Вставить("Параметры", Параметры);
			СтруктураПараметров.Вставить("Запрос", мТекущаяСтрока.ТекстЗапроса);
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(СтруктураПараметров);
		Иначе//Если мТекущаяСтрока.ТипЗапроса = "Построитель" Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("Параметры", Параметры);
			СтруктураПараметров.Вставить("ТекстЗапроса", мТекущаяСтрока.ТекстЗапроса);
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(СтруктураПараметров);
		КонецЕсли;
	Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Заголовок = "Укажите файл для сохранения списка запросов";
		ДиалогВыбораФайла.Фильтр = ирНеглобальный.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sel", "Файл консоли запросов");
		ДиалогВыбораФайла.Расширение = "sel";
		ДиалогВыбораФайла.Каталог = мИмяПути;
		ФайлВыбран = ирНеглобальный.СохранитьФайлВКонсолиСВосстановлениемЛкс(ДиалогВыбораФайла, ИмяФайла, мИмяФайла, ДеревоЗапросов, мСтруктураВосстановления, 
			ЗапрашиватьИмяФайла);
		Если ФайлВыбран Тогда
			мИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
			мИмяПути = ДиалогВыбораФайла.Каталог;
			СохранитьИмяФайла();
		Иначе
			Возврат Ложь;
		КонецЕсли;
		Если СброситьМодифицированность Тогда
			Модифицированность = Ложь;
			мУстановитьЗаголовокФормы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СохранитьЗапросыВФайл()

Процедура ОбновитьРазмерДинамическойТаблицы() Экспорт

	ирНеглобальный.ПослеЗагрузкиДинамическойВыборкиВТабличноеПолеЛкс(ЭтаФорма, мВыборкаРезультата,
		ЭлементыФормы.КоманднаяПанельТаблица, ЭлементыФормы.РазмерТаблицы);

КонецПроцедуры // ОбновитьРазмерДинамическойТаблицы()

// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьРезультатЗапроса()
	
	ЛксСостояние("Загрузка результата...");
	Если мРезультатЗапроса <> Неопределено Тогда
		Если мВыборкаРезультата = Неопределено Тогда
			Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
				мВыборкаРезультата = мРезультатЗапроса.Выбрать();
				РазмерРезультата = мВыборкаРезультата.Количество();
			Иначе //Если ТипЗнч(мРезультатЗапроса) = Тип("COMОбъект") Тогда
				Если ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") Тогда
					мВыборкаРезультата = мРезультатЗапроса;
					РазмерРезультата = мВыборкаРезультата.Count;
				ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") Тогда
					мВыборкаРезультата = мРезультатЗапроса;
					РазмерРезультата = мВыборкаРезультата.RecordCount;
				КонецЕсли; 
			КонецЕсли; 
			Если Ложь
				Или Не мРежимДереваЗапроса 
				Или (Истина
					И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
					И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Родитель = Неопределено
					И Не мРежимРедактирования)
			Тогда
				мТекущаяСтрока.РазмерРезультата = РазмерРезультата;
			КонецЕсли; 
			Если Истина
				И мРежимДереваЗапроса 
				И Не мРежимРедактирования
			Тогда
				мТекущаяСтрокаДереваЗапроса.РазмерРезультата = РазмерРезультата;
			КонецЕсли; 
		КонецЕсли; 
		Если Ложь
			Или ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица
			Или ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.КодОбработкиСтрокиРезультата
		Тогда
			Если ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица.Значение = Null Тогда
				ЭтаФорма.ДлительностьЗагрузки = 0;
				НачалоЗагрузки = мПлатформа.ПолучитьТекущееВремяВМиллисекундах();
				Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
					ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПервуюПорциюЛкс(ЭтаФорма, мРезультатЗапроса, мВыборкаРезультата,
						ЭлементыФормы.КоманднаяПанельТаблица, , ЗагружатьЭлементов);
				Иначе //Если ТипЗнч(мРезультатЗапроса) = Тип("COMОбъект") Тогда
					Если ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") Тогда
						ЭтаФорма.ПодключитьОбработчикОжидания("ОбновитьРазмерДинамическойТаблицы", 0.1, Истина);
						ПреобразоватьРезультатыWMIвТаблицуЗначений(РезультатТаблица, мВыборкаРезультата,,,,, ЗагружатьЭлементов);
						СвойстваСтрокиРезультата.Сортировать("Имя");
						ТекстПорядок = ирНеглобальный.ПолучитьВыражениеПорядкаКомпоновкиНаЯзыкеЛкс(Компоновщик.Настройки.Порядок); 
						Если ЗначениеЗаполнено(ТекстПорядок) Тогда
							РезультатТаблица.Сортировать(ТекстПорядок);
						КонецЕсли; 
					ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") Тогда
						ЭтаФорма.ПодключитьОбработчикОжидания("ОбновитьРазмерДинамическойТаблицы", 0.1, Истина);
						РезультатТаблица.Колонки.Очистить();
						Если ИспользованиеGWF = 1 Тогда
							ADOUtils = ПолучитьADOUtils();
							Если ADOUtils <> Неопределено Тогда
								РезультатТаблица = ADOUtils.ADORecordsetToValueTable(мРезультатЗапроса);
							Иначе
								ОписаниеОшибки = "Не удалось подключить ВК GameWithFire.dll! Выгрузка будет выполняться стандартным методом.";
								ЛксСообщитьСУчетомМодальности(ОписаниеОшибки, МодальныйРежим, СтатусСообщения.Внимание);
							КонецЕсли; 
						КонецЕсли; 
						Если РезультатТаблица.Колонки.Количество() = 0 Тогда
							РезультатТаблица = ЗапросADOРезультат_Выгрузить(мРезультатЗапроса, Типизировать1С);
						КонецЕсли; 
						СвойстваСтрокиРезультата.Сортировать("Имя");
						//ТекстПорядок = ирНеглобальный.ПолучитьВыражениеПорядкаКомпоновкиНаЯзыкеЛкс(Компоновщик.Настройки.Порядок); 
						//Если ЗначениеЗаполнено(ТекстПорядок) Тогда
						//	РезультатТаблица.Сортировать(ТекстПорядок);
						//КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
				КонецЗагрузки = мПлатформа.ПолучитьТекущееВремяВМиллисекундах();
				ЭтаФорма.ДлительностьЗагрузки = КонецЗагрузки - НачалоЗагрузки;
				ЭлементыФормы.РезультатТаблица.СоздатьКолонки();
				НастроитьКолонкиТаблицыРезультата();
				ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица.Значение = Неопределено;
				СвойстваСтрокиРезультата.Очистить();
				Для Каждого Колонка Из РезультатТаблица.Колонки Цикл
					СтрокаСвойства = СвойстваСтрокиРезультата.Добавить();
					СтрокаСвойства.Имя = Колонка.Имя;
					СтрокаСвойства.ТипЗначения = Колонка.ТипЗначения;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатДерево Тогда
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Null Тогда
				Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
					мВыборкаРезультата = мРезультатЗапроса.Выбрать();
					ЗагрузитьДерево = Истина; 
					ДопустимыйРазмерРезультат = 500000;
					Если мВыборкаРезультата.Количество() > ДопустимыйРазмерРезультат Тогда
						ЗагрузитьДерево = Ложь; 
						Ответ = Вопрос("Размер выборки составляет более " + ДопустимыйРазмерРезультат + " строк. "
							"Построение дерева может выполняться долго и вызвать нехватку памяти.
							|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
						Если Ответ = КодВозвратаДиалога.ОК Тогда
							ЗагрузитьДерево = Истина;
						КонецЕсли;
					КонецЕсли; 
					Если ЗагрузитьДерево Тогда
						РезультатДерево = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
						ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Неопределено;
					Иначе
						РезультатДерево = Новый ДеревоЗначений;
					КонецЕсли; 
					ЭлементыФормы.РезультатДерево.СоздатьКолонки();
					Для Каждого Колонка Из ЭлементыФормы.РезультатДерево.Колонки Цикл
						Колонка.ТолькоПросмотр = Истина;
					КонецЦикла; 
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатТабличныйДокумент Тогда
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Null Тогда
				мВыборкаРезультата = мРезультатЗапроса.Выбрать();
				ЗагрузитьТабличныйДокумент = Истина; 
				ДопустимыйРазмерРезультат = 500000;
				Если мВыборкаРезультата.Количество() > ДопустимыйРазмерРезультат Тогда
					ЗагрузитьТабличныйДокумент = Ложь; 
					Ответ = Вопрос("Размер выборки составляет более " + ДопустимыйРазмерРезультат + " строк. "
						"вывод в табличный документ может выполняться долго и вызвать нехватку памяти.
						|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
					Если Ответ = КодВозвратаДиалога.ОК Тогда
						ЗагрузитьТабличныйДокумент = Истина;
					КонецЕсли;
				КонецЕсли; 
				ЭлементыФормы.РезультатТабличныйДокумент.Очистить();
				Если ЗагрузитьТабличныйДокумент Тогда
					ирНеглобальный.ВывестиТаблицуВТабличныйДокументЛкс(мРезультатЗапроса, ЭлементыФормы.РезультатТабличныйДокумент,
						мДанныеРасшифровки);
					ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.РезультатСводнаяТаблица Тогда
			Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Null Тогда
				Если Истина
					И Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") 
					И Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") 
				Тогда
					мВыборкаРезультата = мРезультатЗапроса.Выбрать();
					Попытка
						ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезультатЗапроса;
					Исключение
					КонецПопытки;
					ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Значение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЛксСостояние();
	
КонецПроцедуры // ЗагрузитьРезультат()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура вОбработкаАвтосохранения()
	
	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("АвтоСохранить", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("АвтоСохранить");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаАвтосохранения()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СоздатьНовыйФайлЗапросов();
	КонецЕсли;
	
КонецПроцедуры // НовыйФайл()

Процедура ПриИзмененииДереваЗапросов()

	ОбновитьДоступностьПанелиЗапроса();
	Если Истина
		И ДеревоЗапросов.Строки.Количество() > 0
		И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = Неопределено
	Тогда 
	    ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДереваЗапросов()

Процедура ОткрытьФайл(ОчиститьПередЗагрузкой = Истина)
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		ДиалогВыбораФайла.ПолноеИмяФайла = мИмяФайла;
		ДиалогВыбораФайла.Каталог = мИмяПути;
		ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки списка запросов";
		ДиалогВыбораФайла.Фильтр = ирНеглобальный.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sel", "Файл консоли запросов");
		ДиалогВыбораФайла.Расширение = "sel";
		
		Если ДиалогВыбораФайла.Выбрать() Тогда
			ОткрытьФайлПоПолномуИмени(ДиалогВыбораФайла.ПолноеИмяФайла, ОчиститьПередЗагрузкой);
		КонецЕсли;
		
	КонецЕсли;
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()
	
	вСохранитьЗапросыВФайл();
	
КонецПроцедуры // Сохранить()

// Обработчик автоматического сохранения  
//
Процедура АвтоСохранить()
	
	Если Истина
		И мРежимДереваЗапроса 
		И мРежимРедактирования
	Тогда
		// Ничего не делаем
	ИначеЕсли Не ЗначениеЗаполнено(мИмяФайла) Тогда
		// Ничего не делаем
	Иначе
		вСохранитьЗапросыВФайл();
	КонецЕсли;
	
КонецПроцедуры // Сохранить()

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()
	
	вСохранитьЗапросыВФайл(Ложь, Истина);
	
КонецПроцедуры // СохранитьКак()

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура НастройкаАвтосохранения()
	
	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();
	
	вОбработкаАвтосохранения();
	
КонецПроцедуры // НастройкаАвтосохранения()

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()
	
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;
	
	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();
	
КонецПроцедуры // ПеренестиСтрокуДерева()

Функция УстановитьПараметрыЗапроса(ОбъектЗапроса = Неопределено)

	Если Истина
		И Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") 
		И Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") 
	Тогда
		Если ОбъектЗапроса = Неопределено Тогда
			ОбъектЗапроса = мОбъектЗапроса;
		КонецЕсли;
		мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
		Если ОбъектЗапроса <> мОбъектЗапроса Тогда
			ЗаполнитьЗначенияСвойств(ОбъектЗапроса, мОбъектЗапроса, "Текст, МенеджерВременныхТаблиц");
		КонецЕсли; 
		Если Не ПолучитьПараметрыИзЗапроса() Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	Неуникальные = ирНеглобальный.ПолучитьНеуникальныеЗначенияКолонкиТаблицыЛкс(Параметры, "ИмяПараметра");
	ТекстСообщения = "";
	Для Каждого Неуникальный Из Неуникальные Цикл
		Если ТекстСообщения <> "" Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС;
		КонецЕсли; 
		ТекстСообщения = ТекстСообщения + "Имя параметра """ + Неуникальный + """ неуникально!";
	КонецЦикла; 
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		ЛксСообщитьСУчетомМодальности(ТекстСообщения, МодальныйРежим, СтатусСообщения.Внимание);
	КонецЕсли; 
	ВычислитьПараметрыЗапроса(ОбъектЗапроса);
	Возврат Истина;
	
КонецФункции // УстановитьПараметрыЗапроса()

Процедура ВычислитьПараметрыЗапроса(ОбъектЗапроса = Неопределено)
	
	Если ОбъектЗапроса = Неопределено Тогда
		ОбъектЗапроса = мОбъектЗапроса;
	КонецЕсли;
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	Для каждого СтрокаПараметров Из Параметры Цикл
		Если СтрокаПараметров.ЭтоВыражение = Истина Тогда
			Если ЗначениеЗаполнено(СтрокаПараметров.Выражение) Тогда
				ТекстАлгоритма = "
				|Параметры = _П0;
				|лПараметры = _П0; // Устаревшее
				|Результат = " + СтрокаПараметров.Выражение;
				Попытка 
					Значение = ирНеглобальный.ВыполнитьАлгоритм(ТекстАлгоритма,,, СтруктураПараметров);
				Исключение
					ЛксСообщитьСУчетомМодальности("Ошибка при вычислении параметра """ + СтрокаПараметров.ИмяПараметра + """"
						+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
					Продолжить;
				КонецПопытки;
			Иначе
				Значение = Неопределено;
			КонецЕсли; 
			СтрокаПараметров.Значение = Значение;
		КонецЕсли;
		Если Не ЛксЛиИмяПеременной(СтрокаПараметров.ИмяПараметра) Тогда
			Продолжить;
		КонецЕсли; 
		ОбъектЗапроса.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрыВКомпонентуВыполненияКода(ЭкземплярКомпоненты)
	
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	ЭкземплярКомпоненты.ДобавитьСловоЛокальногоКонтекста(
		"Параметры", "Свойство", Новый ОписаниеТипов("Структура"), СтруктураПараметров);
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметров()

	СтруктураПараметров = Новый Структура;
	Для Каждого СтрокаПараметра Из Параметры Цикл
		Если ЛксЛиИмяПеременной(СтрокаПараметра.ИмяПараметра) Тогда
			СтруктураПараметров.Вставить(СтрокаПараметра.ИмяПараметра, СтрокаПараметра.Значение);
		КонецЕсли;
	КонецЦикла;

	Возврат СтруктураПараметров;

КонецФункции

// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос(Сохранять = Истина)
	
	вСохранитьЗапросТекущейСтроки();
	Если Истина
		И мРежимДереваЗапроса 
		И мРежимРедактирования
	Тогда
		// Ничего не делаем
	Иначе
		вСохранитьЗапросыВФайл(,,, мСтруктураВосстановления.ФайлВосстановления.ПолноеИмя, Ложь);
	КонецЕсли; 
	
	//мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	//Если Не ПолучитьПараметрыИзЗапроса() Тогда 
	//	Возврат;
	//КонецЕсли;
	Если Не УстановитьПараметрыЗапроса() Тогда
		Возврат;
	КонецЕсли;
	Если Истина
		И Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") 
		И Не ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") 
	Тогда
		Если мТекущаяСтрока.НовыйМенеджерВремменныхТаблиц Тогда
			мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		КонецЕсли; 
		МассивСоздаваемыхВременныхТаблиц = ПолучитьРезультирующийЗапрос(мОбъектЗапроса);
		Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
			ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
		КонецЕсли;
	КонецЕсли; 
	
    ДобавитьПараметрыВКомпонентуВыполненияКода(ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса);
	Если Не ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ВыполнитьПрограммныйКод() Тогда 
		Возврат;
	КонецЕсли;
	
	мАнализТехножурнала = Обработки.ирАнализТехножурнала.Создать();
	Если ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") Тогда
		WMIЗапрос = ирКэш.ПолучитьCOMОбъектWMIЛкс();
		ТекстЗапроса = мПолучитьЗапросWMI();
		ОтметитьНачалоВыполненияЗапроса();
		НачалоВыполнения = мПлатформа.ПолучитьТекущееВремяВМиллисекундах();
		Попытка
			мРезультатЗапроса = WMIЗапрос.ExecQuery(ТекстЗапроса);
		Исключение
			ЛксСообщитьСУчетомМодальности("Ошибка выполнения запроса: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке().Причина),
				МодальныйРежим, СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки; 
		Попытка
			Пустышка = мРезультатЗапроса.Count;
		Исключение
			ЛксСообщитьСУчетомМодальности("Ошибка выполнения запроса", МодальныйРежим, СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;
	ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") Тогда
		ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		ИсточникДанныхADO = ПолучитьИсточникДанныхADO();
		СтруктураЗапросаADO = Новый Структура();
		СтруктураЗапросаADO.Вставить("ТекстЗапроса", ТекстЗапроса);
		СтруктураЗапросаADO.Вставить("ПараметрыЗапроса", мОбъектЗапроса.Параметры);
		СтруктураЗапросаADO.Вставить("СпособВыгрузки", 1); // способ выгрузки результата запроса по умолчанию
		СтруктураЗапросаADO.Вставить("ИзменятьРезультат", Ложь); // признак изменения результата выгрузки запроса в форме консоли
		СтруктураЗапросаADO.Вставить("ИсточникДанных", ИсточникДанныхADO); // структура с параметрами источника данных
		ОпцииADO = ОпцииЗапросаADOПоУмолчанию();
		ОпцииADO.MaxRecords = ЗагружатьЭлементов;
		ОпцииADO.РезультатADOВРезультатЗапросаGWF = ИспользованиеGWF = 2;
		СтруктураЗапросаADO.Вставить("стОпции", ОпцииADO); // служебная колонка со структурой опций выполнения запроса
		СтруктураЗапросаADO.Вставить("спПараметры", Параметры); // служебная колонка со списком параметров запроса
		ОтметитьНачалоВыполненияЗапроса();
		НачалоВыполнения = мПлатформа.ПолучитьТекущееВремяВМиллисекундах();
		мРезультатЗапроса = ЗапросADOВыполнить(СтруктураЗапросаADO);
		Если мРезультатЗапроса = Неопределено Тогда
			//ЛксСообщитьСУчетомМодальности("Ошибка выполнения запроса: " + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли; 
	Иначе
		ТекстЗапроса = мОбъектЗапроса.Текст;
		Для Каждого ИмяСоздаваемойВременнойТаблицы Из МассивСоздаваемыхВременныхТаблиц Цикл
			Если Не ЗначениеЗаполнено(ИмяСоздаваемойВременнойТаблицы) Тогда
				Продолжить;
			КонецЕсли;
			мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяСоздаваемойВременнойТаблицы;
			Попытка
				мОбъектЗапроса.Выполнить();
				Успех = Истина;
			Исключение
				Успех = Ложь;
			КонецПопытки;
			Если Не мИзмененияМенеджераВременныхТаблиц.Свойство(ИмяСоздаваемойВременнойТаблицы) Тогда
				мИзмененияМенеджераВременныхТаблиц.Вставить(ИмяСоздаваемойВременнойТаблицы, Успех);
			КонецЕсли; 
		КонецЦикла;
		мОбъектЗапроса.Текст = ТекстЗапроса;
		
		// Осторожная выборка
		ВыполнятьПредварительныйЗапрос = ВосстановитьЗначение("ир_ВыполнятьПредварительныйЗапрос");
		БезопасныйПорогКоличестваСтрок = ВосстановитьЗначение("ир_БезопасныйПорогКоличестваСтрок");
		Если ВыполнятьПредварительныйЗапрос = Истина Тогда
			КоличествоСтрок = ирКэш.Получить().ПолучитьГрубоКоличествоСтрокВРезультатеЗапроса(мОбъектЗапроса, ЛиЗамерВремени, МодальныйРежим);
			Если ТипЗнч(КоличествоСтрок) = Тип("Строка") Тогда
				Ответ = Вопрос("При выполнении предварительного запроса произошла ошибка:
				|" + КоличествоСтрок + "
				|Продолжить?", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ <> КодВозвратаДиалога.ОК Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Если БезопасныйПорогКоличестваСтрок * 1000 < КоличествоСтрок Тогда
					Ответ = Вопрос("Размер таблицы результата составит " + КоличествоСтрок + " строк. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
					Если Ответ <> КодВозвратаДиалога.ОК Тогда
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ТекстЗапроса = мОбъектЗапроса.Текст;
			Для Каждого ИмяСоздаваемойВременнойТаблицы Из МассивСоздаваемыхВременныхТаблиц Цикл
				Если Не ЗначениеЗаполнено(ИмяСоздаваемойВременнойТаблицы) Тогда
					Продолжить;
				КонецЕсли;
				мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяСоздаваемойВременнойТаблицы;
				Попытка
					мОбъектЗапроса.Выполнить();
				Исключение КонецПопытки;
			КонецЦикла;
			мОбъектЗапроса.Текст = ТекстЗапроса;
		КонецЕсли;
		
		ОтметитьНачалоВыполненияЗапроса();
		ДатаНачалаВыполнения = ирСервер.ПолучитьТекущуюДатуЛкс();
		НачалоВыполнения = мПлатформа.ПолучитьТекущееВремяВМиллисекундах();
		Если ВыполнятьВТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли; 
		Попытка 
			мРезультатЗапроса = мОбъектЗапроса.Выполнить();
		Исключение
			// Антибаг платформы 8.1. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			Если ВыполнятьВТранзакции Тогда
				ОтменитьТранзакцию();
			КонецЕсли; 
			мАнализТехножурнала.КончитьТрассу();
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
			Возврат;
		КонецПопытки;
		Если ВыполнятьВТранзакции Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли; 
	мВыборкаРезультата = Неопределено;
	КонецВыполнения = мПлатформа.ПолучитьТекущееВремяВМиллисекундах();
	ДатаКонцаВыполнения = ирСервер.ПолучитьТекущуюДатуЛкс();
	ЭтаФорма.ДлительностьВыполнения = КонецВыполнения - НачалоВыполнения;
	//ЛксСостояние("");
	мАнализТехножурнала.КончитьТрассу();
	Если Ложь
		Или Не мРежимДереваЗапроса 
		Или (Истина
			И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
			И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Родитель = Неопределено
			И Не мРежимРедактирования)
	Тогда
		мТекущаяСтрока.Длительность = ДлительностьВыполнения;
	КонецЕсли; 
	Если Истина
		И мРежимДереваЗапроса 
		И Не мРежимРедактирования
	Тогда
		#Если _ Тогда
		    мТекущаяСтрокаДереваЗапроса = ДеревоЗапросов.Строки[0];
		#КонецЕсли
		мТекущаяСтрокаДереваЗапроса.ДлительностьПолная = ДлительностьВыполнения;
		ОбновитьЧистуюДлительность(мТекущаяСтрокаДереваЗапроса);
		Если мТекущаяСтрокаДереваЗапроса.Родитель <> Неопределено Тогда
			ОбновитьЧистуюДлительность(мТекущаяСтрокаДереваЗапроса.Родитель);
		КонецЕсли; 
	КонецЕсли; 
	Если ЛиЗамерВремени Тогда
		ЛксСообщитьСУчетомМодальности("Длительность формирования результата - " + Строка(ДлительностьВыполнения) + " мс", МодальныйРежим);
	КонецЕсли;
	
	ЭлементыФормы.ЗапросРезультата.УстановитьТекст(ТекстЗапроса);
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатТаблица.Значение = Null;
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатДерево.Значение = Null;
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатСводнаяТаблица.Значение = Null;
	ЭлементыФормы.ПанельРезультата.Страницы.РезультатТабличныйДокумент.Значение = Null;
	ПанельРезультатаПриСменеСтраницы();
	
КонецПроцедуры // ВыполнитьЗапрос()

Функция ОтметитьНачалоВыполненияЗапроса()

	ЛксСостояние("Выполняется запрос " + ТекущаяДата());
	мАнализТехножурнала.НачатьТрассу("КонсольЗапросов");
	Возврат Неопределено;

КонецФункции

Процедура ОбновитьЧистуюДлительность(СтрокаДереваЗапроса)

	Если Ложь
		Или СтрокаДереваЗапроса.ДлительностьПолная = Неопределено 
		Или ирНеглобальный.СтрокиРавныЛкс(СтрокаДереваЗапроса.ТипУзла, "<ChooseTable>")
	Тогда
		Возврат;
	КонецЕсли; 
	ОбщаяДлительностьДочерних = 0;
	ЧистуюДлительностьМожноРасчитать = Истина;
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ТипЗнч(ДочерняяСтрока.ДлительностьПолная) <> Тип("Число") Тогда
			Если Не ирНеглобальный.СтрокиРавныЛкс(ДочерняяСтрока.ТипУзла, "<ChooseTable>") Тогда
				ЧистуюДлительностьМожноРасчитать = Ложь;
				Прервать;
			КонецЕсли; 
			Продолжить;
		КонецЕсли; 
		ОбщаяДлительностьДочерних = ОбщаяДлительностьДочерних + ДочерняяСтрока.ДлительностьПолная;
	КонецЦикла;
	Если ЧистуюДлительностьМожноРасчитать Тогда
		СтрокаДереваЗапроса.ДлительностьЧистая = СтрокаДереваЗапроса.ДлительностьПолная - ОбщаяДлительностьДочерних;
	КонецЕсли; 

КонецПроцедуры

// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультатВТабличныйДокументСГруппировками()
	Перем ЗаголовокКолонки;
	
	Если мРезультатЗапроса <> Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
		КоличествоКолонок = мРезультатЗапроса.Колонки.Количество();
		
		Выборка = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголвка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголвка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезультатЗапроса.Колонки[ТекущееПоле].Имя;
			Область.ШиринаКолонки = мРезультатЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголвка);
		ОбластьЗаголвка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголвка.Шрифт = Новый Шрифт(ОбластьЗаголвка.Шрифт, , , Истина, , ,);
		ОбластьЗаголвка.ЦветФона = Новый Цвет(255, 255, 0);
		ОбластьЗаголвка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

Процедура ЗагрузитьЗапросВКонсоль()

	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	мЗапросЗагруженВКонсоль = Истина
		И ДеревоЗапросов.Строки.Количество() <> 0 
		И мТекущаяСтрока <> НеОпределено 
		И мТекущаяСтрока.ТипЗапроса <> "Папка";
	ОчиститьДеревоЗапроса();
	УстановитьТекстПоляТекстаЗапроса("");
	Параметры.Очистить();
	Если мЗапросЗагруженВКонсоль Тогда
		ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(мТекущаяСтрока.КодОбработкиСтрокиРезультата);
		ЭлементыФормы.КодПередВыполнениемЗапроса.УстановитьТекст(мТекущаяСтрока.КодПередВыполнениемЗапроса);
		ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст(мТекущаяСтрока.КодОбработкиРезультата);
		УстановитьТекстПоляТекстаЗапроса(мТекущаяСтрока.ТекстЗапроса);
		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		Если Не ИсходнаяТаблицаПараметров = Неопределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				НоваяСтрока = Параметры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы);
				Если Истина
					И ИсходнаяТаблицаПараметров.Колонки.Найти("Значение") = Неопределено 
					И ИсходнаяТаблицаПараметров.Колонки.Найти("ЗначениеПараметра") <> Неопределено
				Тогда
					НоваяСтрока.Значение = СтрокаИсходнойТаблицы.ЗначениеПараметра; // Для поддержки старых форматов
				КонецЕсли;
				Если Истина
					И ИсходнаяТаблицаПараметров.Колонки.Найти("Выражение") = Неопределено 
					И СтрокаИсходнойТаблицы.ЭтоВыражение = Истина
				Тогда
					НоваяСтрока.Выражение = НоваяСтрока.Значение; // Для поддержки старых форматов
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		//Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
		//	мТекущаяСтрока.СпособВыгрузки = 1;
		//КонецЕсли;
		//СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		ЭтаФорма.ВыбратьВсеПоля = мТекущаяСтрока.ВыбратьВсеПоля;
		Если ТипЗнч(мТекущаяСтрока.Настройка) = Тип("Строка") Тогда
			Компоновщик.ЗагрузитьНастройки(ирНеглобальный.ВосстановитьНастройкуКомпоновкиИзСтрокиXMLЛкс(мТекущаяСтрока.Настройка, Тип("НастройкиКомпоновкиДанных")));
		КонецЕсли;
		
		// WMI
		Если ТипЗнч(мТекущаяСтрока.ПараметрыWMI) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, мТекущаяСтрока.ПараметрыWMI);
		КонецЕсли; 
		Если ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL") Тогда
			НастроитьКомпоновщикWMI();
		КонецЕсли; 
		
		// ADO
		Если ТипЗнч(мТекущаяСтрока.ПараметрыADO) = Тип("Структура") Тогда
			ПараметрыADO = мТекущаяСтрока.ПараметрыADO;
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ПараметрыADO);
			УстановитьИсточникДанныхADO(ПараметрыADO);
			ПараметрыПлатформыADO = ПараметрыПлатформыADO_Получить(ПараметрыADO.Платформа);
			ФормаКонтроль_ПлатформаADO(ПараметрыПлатформыADO);
			ФормаКонтроль_ТипИДADO();
		Иначе
			ADOUtils = ПолучитьADOUtils(Ложь);
			Если ADOUtils <> Неопределено Тогда
				ЭтаФорма.ИспользованиеGWF = 1;
			КонецЕсли; 
		КонецЕсли; 
		//мСоединениеADO = Неопределено;
		//Если ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO") Тогда
		//КонецЕсли; 
		
		ВычислитьПараметрыЗапроса();
		УправлениеКолонкамиПараметры();
		Если мРежимДереваЗапроса Тогда 
			Если Не РазобратьТекстЗапроса(ЭлементыФормы.ТекстЗапроса) Тогда 
				КоманднаяПанельФормыРежимДереваЗапроса(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса);
			Иначе
				ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
			КонецЕсли;
		КонецЕсли;
		УстановитьТипЗапроса();
	Иначе
		ЛксИзменитьСвернутость(Ложь, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ВыполнитьЗапрос.Доступность = мЗапросЗагруженВКонсоль;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Открыть_КонсольКомпоновокДанных.Доступность = мЗапросЗагруженВКонсоль;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ИсполняемыйЗапрос.Доступность = мЗапросЗагруженВКонсоль;
	//ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Доступность = мТекущаяСтрока <> НеОпределено; // Доступность для подменю не реализована в платформе
	ОбновитьДоступностьПанелиЗапроса();

КонецПроцедуры

Процедура УничтожитьВременныеТаблицыПодзапроса(СтрокаДереваЗапроса)

	Если Не мРежимСворачивания Тогда
		Возврат;
	КонецЕсли;
	// Уничтожим служебные временные таблицы
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ДочерняяСтрока.ТипУзла = "<InUnion>" Тогда 
			Продолжить;
		КонецЕсли;
		Если ДочерняяСтрока.ТипУзла <> "<FromUnion>" Тогда 
			УничтожитьВременныеТаблицыПодзапроса(ДочерняяСтрока);
		Иначе
			ИмяВременнойТаблицы = ДочерняяСтрока.Псевдоним;
			Если ИмяВременнойТаблицы <> Неопределено Тогда 
				мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
				Попытка
					мОбъектЗапроса.Выполнить();
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УничтожитьВременныеТаблицыПодзапроса()

Процедура ОчиститьДеревоЗапроса()

	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	мТекущаяСтрокаДереваЗапроса = Неопределено;
	ДеревоЗапроса.Строки.Очистить();

КонецПроцедуры // ОчиститьДеревоЗапроса()


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если мЗапросЗагруженВКонсоль Тогда
		ВыполнитьЗапрос();
	КонецЕсли; 
	
КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	вСохранитьЗапросТекущейСтроки();
	ЗагрузитьЗапросВКонсоль();
	Если Не мРежимОтладки Тогда
		ЭтотОбъект.мКомандаADO = Неопределено;
		ЭтотОбъект.мСоединениеADO = Неопределено;
		ЭтотОбъект.мWMIService = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Копирование Тогда
		Отказ = Истина;
		вСохранитьЗапросТекущейСтроки();
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			КоллекцияСтрок = ТекСтрока.Родитель.Строки;
		Иначе
			КоллекцияСтрок = Элемент.Значение.Строки;
		КонецЕсли; 
		НоваяСтрока = КоллекцияСтрок.Добавить();
		ЛксСкопироватьСтрокиДерева(ТекСтрока, НоваяСтрока);
		НоваяСтрока.Запрос = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(КоллекцияСтрок, НоваяСтрока.Запрос, "Запрос", Ложь);
		Элемент.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли; 
	
	//мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	//Если Истина
	//	И Элемент.ТекущаяСтрока.Родитель = Неопределено
	//	И ДеревоЗапросов.Строки.Количество() = 1
	//Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Модифицированность = Истина;
	мТекущаяСтрока = Неопределено;
	
КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		мТекущаяСтрока = Неопределено;
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Запрос) Тогда 
		Если Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
			КоллекцияСтрок = Элемент.Значение.Строки;
		Иначе
			КоллекцияСтрок = Элемент.ТекущиеДанные.Родитель.Строки;
		КонецЕсли;
		Элемент.ТекущиеДанные.Запрос = "Запрос" + КоллекцияСтрок.Количество();
	КонецЕсли;
	
	// Здесь уже в дереве есть сама строка почему то
	//НовоеИмя = Элемент.ТекущиеДанные.Запрос;
	//Пока ДеревоЗапросов.Строки.Найти(НовоеИмя, "Запрос", Истина) <> Неопределено Цикл
	//	НовоеИмя = НовоеИмя + "1";
	//КонецЦикла;
	//Элемент.ТекущиеДанные.Запрос = НовоеИмя;
	
	Если НоваяСтрока Тогда
		УстановитьЗначенияПоУмолчаниюСтрокиЗапроса(Элемент);
	КонецЕсли;
	
	//ДеревоЗапросовПриАктивизацииСтроки(Элемент);
	
	//Если мИдетДобавление Тогда
	//	
	//	Если ОтменаРедактирования Тогда
	//		мТекущаяСтрока = Неопределено;
	//	КонецЕсли;
	//	
	//	мИдетДобавление = Ложь;
	//КонецЕсли;
	
	//Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

Функция УстановитьЗначенияПоУмолчаниюСтрокиЗапроса(Элемент)

	Если Элемент.ТекущаяСтрока.СпособВыгрузки = НеОпределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли; 
	Элемент.ТекущаяСтрока.ВыбратьВсеПоля = Истина;
	Возврат Неопределено;

КонецФункции

//// Обработчик изменения способа выгрузки
////
//Процедура СпособВыгрузкиПриИзменении(Элемент)
//	
//	Модифицированность = Истина;
//	
//КонецПроцедуры // СпособВыгрузкиПриИзменении()

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТаблицаРезультатаВыбор()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
	
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ТекстЗапроса, ЭлементыФормы.КоманднаяПанельТекстЗапроса, Истина, , мОбъектЗапроса);

	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодПередВыполнениемЗапроса, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
		
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодОбработкиРезультата, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
		
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодОбработкиСтрокиРезультата, , Ложь, "ВыполнитьЛокальноКодОбработкиСтрокиРезультата", ЭтаФорма);
		
	//МассивТипов = Новый Массив;
	//МассивТипов.Добавить(ТипЗнч(мОбъектЗапроса));
	//ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ДобавитьСловоЛокальногоКонтекста(
	//		"мОбъектЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов));
	//		
	
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
	// Такой прием нужен для обхода штатного ограничения типа
	КолонкаРасширенногоЗначения = ЭлементыФормы.Параметры.Колонки.Значение;
	ЭлементУправления = КолонкаРасширенногоЗначения.ЭлементУправления;
	КолонкаРасширенногоЗначения.Данные = "Значение"; 
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаВыбора = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОчистки = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОткрытия = Истина;

	ЭлементыФормы.МенюДереваЗапросов.Кнопки.МенюДереваЗапросов.Кнопки.СохранитьВЭлементСправочникаЗапросы.Доступность = ирКэш.Получить().Это2iS;
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.НастройкаОсторожностиВыборкиДанных.Пометка = 
		ВосстановитьЗначение("ир_ВыполнятьПредварительныйЗапрос") = Истина;
	ЭтотОбъект.ВыполнятьВТранзакции = ВосстановитьЗначение("ирКонсольЗапросов_ВыполнятьВТранзакции") = Истина;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимТранзакции.Пометка = ВыполнятьВТранзакции;
	//ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ВключитьТехножурнал.Пометка = ВключитьТехножурнал;
	Если ирКэш.Получить().ВерсияПлатформы >= 801012 Тогда
		ЭлементыФормы.ПанельНастройкиПостроителя.Видимость = Истина;
	КонецЕсли;
	
	Если мРежимРедактора Тогда
		ЭлементыФормы.ДеревоЗапросов.ТолькоПросмотр = Истина;
		ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки.СкопироватьВНовыйЗапрос.Доступность = Ложь;
		//Для Каждого лКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки Цикл
		//	лКнопка.Доступность = Ложь;
		//КонецЦикла;
		Заголовок = мЗаголовокФормы + " : " + " Редактирование";
		ВладелецФормы.Панель.Доступность = Ложь;
		
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		Кнопки.НовыйФайл.Доступность = Ложь;
		Кнопки.ОткрытьФайл.Доступность = Ложь;
		Кнопки.Сохранить.Доступность = Ложь;
		Кнопки.НастройкаАвтосохранения.Доступность = Ложь;
		//Кнопки.ПеренестиСтрокуДерева.Доступность = Ложь;
		
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Файл.Кнопки;
		Кнопки.НовыйФайл.Доступность = Ложь;
		Кнопки.ОткрытьФайл.Доступность = Ложь;
		Кнопки.ОткрытьПоследние.Доступность = Ложь;
		Кнопки.ОбъединитьФайл.Доступность = Ложь;
		Кнопки.Сохранить.Доступность = Ложь;
		Кнопки.НастройкаАвтосохранения.Доступность = Ложь;
	Иначе
		
	КонецЕсли;
	
	Если мОбъектЗапроса.МенеджерВременныхТаблиц = Неопределено Тогда
		мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если Не (Ложь
		Или мРежимОтладки // Было закомментировано
		//Или мРежимРедактора
		Или ДеревоЗапросов.Строки.Количество() > 0)
	Тогда
	
		ИмяФайлаВосстановления = ирНеглобальный.ПроверитьВыбратьФайлВосстановленияКонсолиЛкс(мСтруктураВосстановления);
		Если ИмяФайлаВосстановления <> "" Тогда
			мИмяФайла = ИмяФайлаВосстановления;
			мИмяПути = "";
		Иначе
			// Попытаемся загрузить последний открывавшийся файл запросов
			ВосстановитьИмяФайла();
		КонецЕсли;
		Если ПустаяСтрока(мИмяФайла) Тогда
			СоздатьНовыйФайлЗапросов();
		Иначе
			ЗагрузитьЗапросыИзФайла();
		КонецЕсли;
		Если ИмяФайлаВосстановления <> "" Тогда
			Модифицированность = Истина;
			УдалитьФайлы(ИмяФайлаВосстановления);
		КонецЕсли; 
		
		ИспользоватьАвтосохранение = ВосстановитьЗначение("ирКонсольЗапросов_ИспользоватьАвтосохранение");
		ИнтервалАвтосохранения = ВосстановитьЗначение("ирКонсольЗапросов_ИнтервалАвтосохранения");
		Если Ложь
			Или ИнтервалАвтосохранения < 1
			Или ИнтервалАвтосохранения = Неопределено
		Тогда
			ИнтервалАвтосохранения = 1;
		КонецЕсли;
		вОбработкаАвтосохранения();
	Иначе
		ПриИзмененииДереваЗапросов();
	КонецЕсли;
	
	мИсторияФайлов = ВосстановитьЗначение("ирКонсольЗапросов.мИсторияФайлов");
	Если мИсторияФайлов = Неопределено Тогда
		мИсторияФайлов = Новый СписокЗначений;
	КонецЕсли;
	ОбновитьПодменюИсторииФайлов();
		
	Если мРежимРедактора Тогда
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.РежимКомпоновкиДанных = (мТекущаяСтрока.ТипЗапроса = "Компоновка");
	КонецЕсли;
	Если мРежимОтладки Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.УдалитьВременныеТаблицы.Доступность = Ложь;
		КоманднаяПанельФормыРежимДереваЗапроса();
	Иначе
		ЛксИзменитьСвернутость(Ложь, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Ложь
		Или ЗначениеВыбора = ДеревоЗапросов
		Или ТипЗнч(ЗначениеВыбора) = Тип("СтрокаДереваЗначений")
	Тогда 
		вСохранитьЗапросТекущейСтроки();
		НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрока);
		вСкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока);
		РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
		РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
		мТекущаяСтрока = НеОпределено;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Свойство("Формула") Тогда
			ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
			ТекущиеДанные.Выражение = ЗначениеВыбора.Формула;
			ВычислитьПараметрыЗапроса();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мРежимДереваЗапроса Тогда 
		мОбъектЗапроса.Текст = мТекстЗапросаДерева;
	КонецЕсли;
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СохранитьЗначение("ирКонсольЗапросов_ИспользоватьАвтосохранение", ИспользоватьАвтосохранение);
		СохранитьЗначение("ирКонсольЗапросов_ИнтервалАвтосохранения", ИнтервалАвтосохранения);
		СохранитьЗначение("ирКонсольЗапросов_ВыполнятьВТранзакции", ВыполнятьВТранзакции);
	Иначе
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;
	Если Не Отказ Тогда
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ПанельРезультата, ЭтаФорма.ЭлементыФормы.РазделительГоризонтальный, ЭтаФорма.Панель, "низ");
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.СвойстваСтрокиРезультата, ЭтаФорма.ЭлементыФормы.вРазделительТаблицаРезультатаИСвойстваСтроки,
			ЭтаФорма.ЭлементыФормы.ПанельРезультата, "право");
	КонецЕсли; 
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ПанельРезультата;
	КонецЕсли; 
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элемент.Страницы.Индекс(Элемент.ТекущаяСтраница);
	КонецЕсли; 
	ЗагрузитьРезультатЗапроса();
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
Процедура ВыполнитьОбработкуСтрокРезультата(ТекстДляВыполнения)

	Если флРаботатьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Продолжать = Истина;
	ВремяНачалаОбработки = ТекущаяДата();
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		ВыборкаРезультата = мРезультатЗапроса.Выбрать();
		КоличествоОбщее = ВыборкаРезультата.Количество();
	Иначе
		КоличествоОбщее = мРезультатЗапроса.Count;
	КонецЕсли; 
	ВсеСчитано = КоличествоОбщее = РезультатТаблица.Количество();
	Индикатор = ЛксПолучитьИндикаторПроцесса(КоличествоОбщее);
	ТекстДляВыполнения = "Параметры = _П0; СтрокаРезультата = _П1;" + ТекстДляВыполнения;
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		Если ВсеСчитано Тогда
			Для Каждого СтрокаРезультата Из РезультатТаблица Цикл
				ЛксОбработатьИндикатор(Индикатор);
				НомерСтроки = РезультатТаблица.Индекс(СтрокаРезультата) + 1;
				Попытка
					ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, ,, СтруктураПараметров, СтрокаРезультата);
				Исключение
					Если Не флПропускатьОшибки Тогда
						ВызватьИсключение 
					КонецЕсли;
					ЛксСообщитьСУчетомМодальности("Строка №" + НомерСтроки + ": " + ОписаниеОшибки(), МодальныйРежим);
				КонецПопытки;
			КонецЦикла;
		Иначе
			Пока ВыборкаРезультата.Следующий() Цикл
				ЛксОбработатьИндикатор(Индикатор);
				Попытка
					ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, ,, СтруктураПараметров, ВыборкаРезультата);
				Исключение
					Если Не флПропускатьОшибки Тогда
						ВызватьИсключение 
					КонецЕсли;
					ЛксСообщитьСУчетомМодальности(ОписаниеОшибки(), МодальныйРежим);
				КонецПопытки;
			КонецЦикла; 
		КонецЕсли; 
	Иначе
		Для Каждого СтрокаРезультата Из мВыборкаРезультата Цикл
			ЛксОбработатьИндикатор(Индикатор);
			Попытка
				ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, ,, СтруктураПараметров, СтрокаРезультата);
			Исключение
				Если Не флПропускатьОшибки Тогда
					ВызватьИсключение 
				КонецЕсли;
				ЛксСообщитьСУчетомМодальности("Строка №" + (мВыборкаРезультата.ItemIndex(СтрокаРезультата) + 1) + ": " + ОписаниеОшибки(), МодальныйРежим);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли; 
	ЛксОсвободитьИндикаторПроцесса(, Истина);
	Если флРаботатьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбработкуСтрокРезультата()

Процедура КнопкаВыполнитьОбработкуТаблицыРезультата(Элемент)
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат;
	КонецЕсли; 
	ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата);
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата.ВыполнитьПрограммныйКод();
	
КонецПроцедуры

Процедура КнопкаВыполнитьОбработкуРезультата(Элемент)
	
	ОбновитьКонтекстПодсказкиИПолучитьСтруктуруПараметров(ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата);
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата.ВыполнитьПрограммныйКод();
	
КонецПроцедуры

Процедура СвернутьНажатие(Элемент)
	
	ЛксДеревоЗначенийСвернуть(ЭлементыФормы.РезультатДерево, истина);
	
КонецПроцедуры

Процедура РазвернутьНажатие(Элемент)
	
	// Вставить содержимое обработчика.
	ЛксДеревоЗначенийСвернуть(ЭлементыФормы.РезультатДерево, Ложь);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СтарыйТекстЗапроса = мОбъектЗапроса.Текст;
	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	// Оставляем в менеджере временных таблиц только те таблицы, которые существовали
	Для Каждого КлючИЗначение Из мИзмененияМенеджераВременныхТаблиц Цикл
		Если КлючИЗначение.Значение = Истина Тогда
			Продолжить;
		КонецЕсли; 
		мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + КлючИЗначение.Ключ;
		Попытка
			мОбъектЗапроса.Выполнить();
		Исключение 
		КонецПопытки;
	КонецЦикла;
	мОбъектЗапроса.Текст = СтарыйТекстЗапроса;
	ирНеглобальный.УдалитьФайлВосстановленияКонсолиСБлокировкойЛкс(мСтруктураВосстановления);
	Если мРежимРедактора Тогда
		// Иногда здесь может быть уже отсутствующая форма
		Если ВладелецФормы <> Неопределено Тогда
			ВладелецФормы.Панель.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;

	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	// Уничтожение всех экземпляров компоненты. Обязательный блок.
	Для Каждого Экземпляр Из ПолеТекстовогоДокументаСКонтекстнойПодсказкой Цикл
		Экземпляр.Значение.Уничтожить();
	КонецЦикла;
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЗамерВремени(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛиЗамерВремени = Кнопка.Пометка;
	
КонецПроцедуры

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Функция ВыполнитьЛокальноКодОбработкиСтрокиРезультата(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	Если ЛиСинтаксическийКонтроль Тогда
		ирНеглобальный.ВыполнитьАлгоритм("Параметры = _П0; " + ТекстДляВыполнения);
		Возврат Неопределено;
	КонецЕсли;
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат Неопределено;
	КонецЕсли;
	ВыполнитьОбработкуСтрокРезультата(ТекстДляВыполнения);
	
КонецФункции // ВыполнитьЛокальноКодОбработкиСтрокиРезультата()

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Функция ВыполнитьЛокально(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	ТекстДляВыполнения = "Параметры = _П0; мРезультатЗапроса = _П1; мОбъектЗапроса = _П2;" + ТекстДляВыполнения;
	ирНеглобальный.ВыполнитьАлгоритм(ТекстДляВыполнения, , , ПолучитьСтруктуруПараметров(), мРезультатЗапроса, мОбъектЗапроса);
	//Выполнить(ТекстДляВыполнения);

КонецФункции // ВыполнитьЛокальноКодОбработкиРезультата()

Процедура УправлениеКолонкамиПараметры()

	ЭлементыФормы.Параметры.Колонки.Выражение.Видимость = Параметры.Найти(Истина, "ЭтоВыражение") <> Неопределено;
	
КонецПроцедуры

Процедура ПараметрыЭтоВыражениеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоВыражение = Истина Тогда
		Если Не ТипЗнч(ТекущиеДанные.Значение) = Тип("Строка") Тогда
			ТекущиеДанные.Значение = "";
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ЭтоВыражение = Ложь Тогда
		Если Истина
			И ТекущиеДанные.ТипЗначения <> Неопределено 
			И Не ТекущиеДанные.НеИспользоватьОграничениеТипа
		Тогда
			ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		КонецЕсли;
			
	ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда
		Если Не ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
			Значение = ТекущиеДанные.Значение;
			ТекущиеДанные.Значение = Новый СписокЗначений;
			Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
				Если ТекущиеДанные.ТипЗначения <> Неопределено Тогда
					ТекущиеДанные.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
				КонецЕсли;
			КонецЕсли;
			Если Значение <> Неопределено Тогда
				ТекущиеДанные.Значение.Добавить(Значение);
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
			Если ТекущиеДанные.Значение.Количество() <> 0 Тогда
				ТекущиеДанные.Значение = ТекущиеДанные.Значение[0].Значение;
			Иначе
				ТекущиеДанные.Значение = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УправлениеКолонкамиПараметры();
	ВычислитьПараметрыЗапроса();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыУдалитьВременныеТаблицы(Кнопка)
	
	мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
КонецПроцедуры

Функция ПолучитьПараметрыИзЗапроса(ЛиДобавлятьНовые = Истина, ОбновитьНастройки = Истина, СтартоваяСтрока = 0)

	Попытка
		ПараметрыЗапроса = мОбъектЗапроса.НайтиПараметры();
	Исключение
		// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
		ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
		ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, СтартоваяСтрока, , Истина, МодальныйРежим,
			ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	Если ЛиДобавлятьНовые Тогда
		Параметры.Колонки.Добавить("НИмя", Новый ОписаниеТипов("Строка"));
		Для Каждого СтрокаПараметра Из Параметры Цикл
			СтрокаПараметра.НИмя = НРег(СтрокаПараметра.ИмяПараметра);
		КонецЦикла;
		Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			ИмяПараметра =  ПараметрЗапроса.Имя;
			СтрокаПараметров = Параметры.Найти(НРег(ИмяПараметра), "НИмя");
			Если СтрокаПараметров <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			//СтрокаПараметров = Параметры.Найти("#" + ИмяПараметра, "ИмяПараметра");
			//Если СтрокаПараметров <> Неопределено Тогда
			//	Продолжить;
			//КонецЕсли;
			СтрокаПараметров = Параметры.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
			СтрокаПараметров.ЭтоВыражение = Ложь;
			СтрокаПараметров.ТипЗначения = ПараметрЗапроса.ТипЗначения;
			Если Не СтрокаПараметров.НеИспользоватьОграничениеТипа Тогда
				СтрокаПараметров.Значение = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметров.Значение);
			КонецЕсли; 
		КонецЦикла;
		Параметры.Колонки.Удалить("НИмя");
	КонецЕсли;

	Если ОбновитьНастройки Тогда
		УстановитьТипЗапроса();
	КонецЕсли; 
	Возврат Истина;

КонецФункции // ПолучитьПараметрыИзЗапроса()

Функция ОбновитьКомпоновщик(ТекстЗапроса, ПоказыватьОшибки = Ложь)

	Успех = Истина;
	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	Попытка
		ТекстЗапроса = ирКэш.Получить().ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	Исключение
		ТекстЗапроса = "";
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	Попытка
		// На пакетных подзапросах ломается
		// Получить верхнего родителя
		// Склеить тексты всех их предшественников в запрос1
		// Определить массив встречающихся в запросе1 временных таблиц
		// Добавить к тексту запроса выборки из каждой временной таблицы
		// Загрузить запрос1 в построитель
		// Получить из построителя Соответствие имен временных таблиц пакета и массивов колонок
		лПостроительЗапроса = Новый ПостроительЗапроса;
		лПостроительЗапроса.Текст = ТекстЗапроса;
		лПостроительЗапроса.ЗаполнитьНастройки();
		мНаборДанных.Запрос = ТекстЗапроса;
		мНаборДанных.Поля.Очистить();
		Для Каждого ДоступноеПоле Из лПостроительЗапроса.ДоступныеПоля Цикл
			ПолеНабораДанных = мНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле = ДоступноеПоле.Имя;
			ПолеНабораДанных.ПутьКДанным = ДоступноеПоле.ПутьКДанным;
			ПолеНабораДанных.Заголовок = ДоступноеПоле.Представление;
		КонецЦикла;
		// Параметры здесь будут актуальными, если УстановитьПараметрыЗапроса уже была вызвана
		ирНеглобальный.ЗаполнитьПараметрыСхемыПоЗапросуЛкс(мСхемаКомпоновки, мОбъектЗапроса);
	Исключение
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Новый СхемаКомпоновкиДанных));
		Возврат Ложь;
	КонецПопытки;
		
	Попытка
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
		мФлагМаскировкиАвтоупорядочивание = Ложь;
	Исключение
		// Печальная ситуация. Кривость платформы привела к такому коду.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ИнформацияОбОшибке.Причина.Причина.Причина.Причина.Описание;
		Диагноз = ЛксПолучитьПоследнийФрагмент(ОписаниеОшибки, "<<?>>");
		МаркерАвтоупорядочивание = "АВТОУПОРЯДОЧИВАНИЕ";
		Если Диагноз = МаркерАвтоупорядочивание Тогда
			Координаты = ЛксПолучитьМассивИзСтрокиСРазделителем(ЛксПолучитьСтрокуМеждуМаркерами(ОписаниеОшибки, "{(", ")}"), ",");
			мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
			мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(Число(Координаты[0]), Число(Координаты[1]),
				Число(Координаты[0]), Число(Координаты[1]) + СтрДлина(МаркерАвтоупорядочивание));
			мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "";
			мНаборДанных.Запрос = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
			мФлагМаскировкиАвтоупорядочивание = Истина;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
		Иначе
			Успех = Ложь;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Новый СхемаКомпоновкиДанных));
			Если ПоказыватьОшибки Тогда
				// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
				ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
				ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
					ИнформацияОбОшибке.Причина.Причина.Причина.Причина);
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
	Компоновщик.Восстановить();
	Возврат Успех;

КонецФункции // ОбновитьКомпоновщик()

Функция ОбновитьПостроитель(ТекстЗапроса, ПоказыватьОшибки = Ложь)

	Успех = Истина;
	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	
	Попытка
		ТекстЗапроса = ирКэш.Получить().ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	Исключение
		ТекстЗапроса = "";
		Успех = Ложь;
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	//ВосстанавливатьПорядок = (Построитель.Порядок.Количество() > 0);
	ВосстанавливатьПорядок = Ложь;
	СтарыеНастройки = Построитель.ПолучитьНастройки(Истина, ВосстанавливатьПорядок, Ложь, Ложь, Ложь);
	Попытка
		
		Построитель.Текст = ТекстЗапроса;
		Построитель.ЗаполнитьНастройки();
		Построитель.УстановитьНастройки(СтарыеНастройки, Истина, ВосстанавливатьПорядок, Ложь, Ложь, Ложь);
	Исключение
		Успех = Ложь;
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	Возврат Успех;

КонецФункции // ОбновитьПостроитель()

// Обработчик нажатия кнопки командной панели "Дополнить из запроса"
//
Процедура КоманднаяПанельФормыПолучитьИзЗапроса(Кнопка)
	
	// Истина или Ложь - здесь спорный вопрос
	мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	Если Не ПолучитьПараметрыИзЗапроса() Тогда 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Функция СкопироватьТекущийПодзапросВНовыйЗапрос(Смещение = Неопределено)

	ТекстПодзапроса = вПолучитьТекстЗапроса(Истина);
	ИмяПодзапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Имя;
	вСохранитьЗапросТекущейСтроки();
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ТекущаяСтрока.Родитель <> Неопределено Тогда
		КоллекцияСтрокДерева = ТекущаяСтрока.Родитель.Строки;
	Иначе
		КоллекцияСтрокДерева = ТекущаяСтрока.Владелец().Строки;
	КонецЕсли;
	Если Смещение = Неопределено Тогда
		НоваяСтрокаЗапроса = КоллекцияСтрокДерева.Добавить();
	Иначе
		НоваяСтрокаЗапроса = КоллекцияСтрокДерева.Вставить(КоллекцияСтрокДерева.Индекс(ТекущаяСтрока) + Смещение);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапроса, ТекущаяСтрока);
	НоваяСтрокаЗапроса.ТекстЗапроса = ТекстПодзапроса;
	НоваяСтрокаЗапроса.Запрос = ИмяПодзапроса;
	Возврат НоваяСтрокаЗапроса;

КонецФункции // СкопироватьТекущийПодзапросВНовыйЗапрос()

Процедура МенюДереваЗапросаСкопироватьВНовыйЗапрос(Кнопка = Неопределено)
	
	НоваяСтрокаЗапроса = СкопироватьТекущийПодзапросВНовыйЗапрос(-1);
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаЗапроса;
	
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	ПривестиЗначениеПараметраКОграничениюТипов();
	ирНеглобальный.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(ЭлементыФормы.Параметры, СтандартнаяОбработка, ,
		Не ТекущиеДанные.НеИспользоватьОграничениеТипа);
	
КонецПроцедуры

Процедура ПривестиЗначениеПараметраКОграничениюТипов()
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
		ЭлементыФормы.Параметры.Колонки.Значение.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов; 
	Иначе
		ЭлементыФормы.Параметры.Колонки.Значение.ЭлементУправления.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		Если ТекущиеДанные.ЭтоВыражение = Ложь Тогда 
			ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
		ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда
			Если ТекущиеДанные.Значение.Количество() = 0 Тогда // Иначе можно потерять значения в списке
				ТекущиеДанные.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыТипЗначенияПриИзменении(Элемент)
	
	ПривестиЗначениеПараметраКОграничениюТипов();
	
КонецПроцедуры

Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если Истина
		И НоваяСтрока 
		И Не Копирование
	Тогда 
		ТекущиеДанные.ЭтоВыражение = Ложь;
	КонецЕсли;
	Если Истина
		И НоваяСтрока 
		И Копирование
	Тогда 
		ТекущиеДанные.ИмяПараметра = ТекущиеДанные.ИмяПараметра + "1";
	КонецЕсли;
	ПолеЗначениеПараметра = Элемент.Колонки.Значение.ЭлементУПравления;
	Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
		Если ТекущиеДанные.ЭтоВыражение = Ложь Тогда
			ПолеЗначениеПараметра.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда 
			Если ТекущиеДанные.Значение.Количество() = 0 Тогда // Иначе можно потерять значения в списке
				ТекущиеДанные.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоВыражение = 2 Тогда 
			ТекущиеДанные.Значение.ТипЗначения = Новый ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЭтоВыражениеОчистка(Элемент, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Перем ЭлементСписка;
	
	ЭлементСписка = Элемент.Колонки.ЭтоВыражение.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ДанныеСтроки.ЭтоВыражение);
	
	Если ЭлементСписка <> Неопределено Тогда 
		ОформлениеСтроки.Ячейки.ЭтоВыражение.Текст = ЭлементСписка.Представление;
	КонецЕсли;
	
	Если ДанныеСтроки.Значение <> Неопределено Тогда 
		ЛксОформитьЯчейкуСРасширеннымЗначением(ОформлениеСтроки.Ячейки.Значение, ДанныеСтроки.Значение, Элемент.Колонки.Значение);
	КонецЕсли;
	Если ДанныеСтроки.ЭтоВыражение = Истина Тогда 
		ОформлениеСтроки.Ячейки.Значение.ЦветФона = ЦветаСтиля.ирЦветФонаВычисляемогоЗначения;
	КонецЕсли; 
	ОформлениеСтроки.Ячейки.ТекущийТипЗначения.УстановитьТекст("" + ТипЗнч(ДанныеСтроки.Значение));
	
	Если ДанныеСтроки <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Выражение.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение <> Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение = Истина;
		ОформлениеСтроки.Ячейки.ТипЗначения.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение = Истина;
		ОформлениеСтроки.Ячейки.НеИспользоватьОграничениеТипа.ТолькоПросмотр = ДанныеСтроки.ЭтоВыражение = Истина;
	КонецЕсли; 
	ирНеглобальный.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыОчистить(Кнопка)
	
	Параметры.Очистить();

КонецПроцедуры

Процедура ПоказатьТекстПодзапроса()

	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекстЗапроса = ТекущаяСтрока.Текст;
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	КонецЕсли; 

КонецПроцедуры

Процедура СоздатьВременныеТаблицы(СтрокаДереваЗапроса)

	// Создадим служебные временные таблицы
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ДочерняяСтрока.ТипУзла = "<InUnion>" Тогда 
			Продолжить;
		КонецЕсли;
		Если ДочерняяСтрока.ТипУзла <> "<FromUnion>" Тогда 
			СоздатьВременныеТаблицы(ДочерняяСтрока);
		Иначе
			ВременныйПостроительЗапроса = Новый ПостроительЗапроса;
			Попытка
				ТекстЗапроса = ирКэш.Получить().ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, РазвернутьВложенныеЗапросы(ДочерняяСтрока));
			Исключение
				// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
				ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
				
				ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
					ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
			Попытка 
				ВременныйПостроительЗапроса.Текст = ТекстЗапроса;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Если Найти(ОписаниеОшибки, "Ожидается псевдоним запроса") > 0 Тогда
					// Сюда попадаем, когда у временной таблицы нет псевдонима
					//ЛксСообщитьСУчетомМодальности("В запросе присутствуют временные таблицы без псевдонимов. "
					//	+ "Корректная работа программы возможна только при наличии у каждой временной таблицы псевдонима",
					//ЛксСообщитьСУчетомМодальности("В запросе присутствуют временные таблицы без псевдонимов. "
					//	+ "Для максимальной функциональности рекомендуется задать каждой временной таблице псевдоним",
					//	МодальныйРежим, СтатусСообщения.Внимание);
					ЛксСообщитьСУчетомМодальности("В запросе присутствуют временные таблицы без псевдонимов. "
						+ "Для максимальной функциональности рекомендуется задать каждой временной таблице псевдоним",
						0, СтатусСообщения.Внимание);
				КонецЕсли; 
				Продолжить;
			КонецПопытки;
			ВременныйПостроительЗапроса.ЗаполнитьНастройки();
			КоллекцияПолей = Новый Массив;
			Для Каждого ВыбранноеПоле Из ВременныйПостроительЗапроса.ВыбранныеПоля Цикл
				ДоступноеПоле = ЛксНайтиПолеНастройкиПоПутиКДанным(ВременныйПостроительЗапроса.ДоступныеПоля, ВыбранноеПоле.ПутьКДанным);
				Поле = Новый Структура;
				Поле.Вставить("Имя", ВыбранноеПоле.Имя);
				Поле.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
				КоллекцияПолей.Добавить(Поле);
			КонецЦикла;
			мОбъектЗапроса.Текст = ЛксПолучитьЗапросИмитаторКоллекцииПолей(КоллекцияПолей) + " ПОМЕСТИТЬ " + ДочерняяСтрока.Псевдоним;
			мОбъектЗапроса.Выполнить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СоздатьВременныеТаблицы()


Процедура ДеревоЗапросаПриАктивизацииСтроки(Элемент = Неопределено)
	
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка; 
	
	Элемент = ЭлементыФормы.ДеревоЗапроса;
	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		мТекущаяСтрокаДереваЗапроса.ТекущееВыделение = Новый Структура("НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка",
			НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
			
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	ДоступностьКомандПодзапроса = Истина
		И ТекущаяСтрока <> Неопределено
		И (Ложь
			Или ТекущаяСтрока.ТипУзла = "<FromUnion>"
			//Или ТекущаяСтрока.ТипУзла = "<InUnion>"
			);
	КнопкиПодменю = ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки;
	КнопкиПодменю.ПеренестиВНовыйЗапрос.Доступность = ДоступностьКомандПодзапроса;
	
	ДоступностьКомандТаблицы = Истина
		И ТекущаяСтрока <> Неопределено
		И (Ложь
			Или ТекущаяСтрока.ТипУзла = "<ChooseTable>"
			Или ТекущаяСтрока.ТипУзла = "<FromUnion>"
			Или ТекущаяСтрока.ТипУзла = "<SelectRoot>");
	КнопкиПодменю = ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки;
	КнопкиПодменю.ПреобразоватьВПодзапрос.Доступность = ДоступностьКомандТаблицы;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//ПрефиксЗапросаСоздания = "Создание_";
	ПрефиксЗапросаСоздания = "+";
	СтрокаЗапросаСоздания = ЭтаФорма.ДеревоЗапроса.Строки.Найти(ПрефиксЗапросаСоздания + ТекущаяСтрока.Имя, "Имя", Истина);
	КнопкиПодменю.ПерейтиКСозданию.Доступность = ДоступностьКомандТаблицы И СтрокаЗапросаСоздания <> Неопределено;
	
	// Баг платформы
	ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
	
	ПоказатьТекстПодзапроса();
	
	мТекущаяСтрокаДереваЗапроса = ТекущаяСтрока;
	ТекущееВыделение = мТекущаяСтрокаДереваЗапроса.ТекущееВыделение;
	Если ТекущееВыделение <> Неопределено Тогда
		ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(ТекущееВыделение.НачальнаяСтрока, ТекущееВыделение.НачальнаяКолонка,
			ТекущееВыделение.КонечнаяСтрока, ТекущееВыделение.КонечнаяКолонка);
	КонецЕсли;
	
	Если мРежимСворачивания Тогда
		СоздатьВременныеТаблицы(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросаПриАктивизацииСтроки()

Процедура УстановитьДоступностьКнопокКоманднойПанели(Кнопки, Доступность)
	
	Для Каждого Кнопка Из Кнопки Цикл 
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
			Если Кнопка.ИзменяетДанные Тогда
				Кнопка.Доступность = Доступность;
			КонецЕсли;
		ИначеЕсли Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			УстановитьДоступностьКнопокКоманднойПанели(Кнопка.Кнопки, Доступность);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаблокироватьРедактированиеТекстаЗапроса(Флаг)

	ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Флаг;
	УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки, Не Флаг);
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ОтменитьРедактирование.Доступность = Не Флаг;
	Если Флаг Тогда
		УстановитьКнопкуИзменитьПодзапрос();
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапросов.ТолькоПросмотр = Не Флаг Или мРежимРедактора;
	УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельФормы.Кнопки, Флаг);
	ЭлементыФормы.ДеревоЗапросов.Доступность = Флаг;
	ЭлементыФормы.ДеревоЗапроса.Доступность = Флаг;
	Если Флаг Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса.Доступность = Истина;
	КонецЕсли;
	мРежимРедактирования = Не Флаг;
	
КонецПроцедуры

Процедура ДеревоЗапросаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
	
КонецПроцедуры

// Проверяет корректность текущего подзапроса.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - корректность запроса.
//
Функция ПроверитьТекстПодзапроса()

	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.ТипУзла = "<ChooseTable>" Тогда
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ТекстЗапроса + " КАК ВложенныйЗапрос";
	КонецЕсли;
	ТекущийПодзапрос = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	СтартоваяСтрока = 0;
	Если ТекущийПодзапрос <> Неопределено Тогда
		ТекущийПодзапрос = ТекущийПодзапрос.Родитель;
		Пока Истина
			И ТекущийПодзапрос <> Неопределено
			//И ТекущийПодзапрос.ТипУзла <> "<FromUnion>"
			//И ТекущийПодзапрос.ТипУзла <> "<InUnion>"
			И Не ЛиСворачиваемыйТипУзла(ТекущийПодзапрос.ТипУзла)
		Цикл
			ТекущийПодзапрос = ТекущийПодзапрос.Родитель;
		КонецЦикла;
		Если ТекущийПодзапрос <> Неопределено Тогда
			ТекстЗапроса = "ВЫБРАТЬ * ИЗ (" + Символы.ПС + ТекстЗапроса + Символы.ПС + ") КАК ВложенныйЗапрос";
			СтартоваяСтрока = -1;
		КонецЕсли;
	КонецЕсли;
	мОбъектЗапроса.Текст = ТекстЗапроса;
	Если Ложь
		Или ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO")
		Или ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL")
	Тогда
		РезультатПроверки = Истина;
	Иначе
		РезультатПроверки = ПолучитьПараметрыИзЗапроса(Ложь, , СтартоваяСтрока);
	КонецЕсли; 
	Возврат РезультатПроверки;
	
КонецФункции // ПроверитьТекстПодзапроса()

Функция КоманднаяПанельТекстЗапросаЗакончитьРедактирование(Кнопка = Неопределено, НовыйРежимСворачивания = Неопределено)
	
	СтрокаДанных = Неопределено;
	ТекущийПодзапрос = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если мРежимРедактирования Тогда
		Если Не ПроверитьТекстПодзапроса() Тогда 
			Если Кнопка = Неопределено Тогда 
				Ответ = Вопрос("Обнаружена ошибка в тексте подзапроса. Отменить редактирование узла дерева запроса?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.Отмена);
				Если Ответ = КодВозвратаДиалога.ОК Тогда 
					ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекущийПодзапрос.Текст);
				КонецЕсли;
				Если Ответ = КодВозвратаДиалога.Отмена Тогда 
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПутьВДереве = ЛксПолучитьСтрокуПутиВДереве(ТекущийПодзапрос, "Псевдоним");
	СвернутыйТекстНовогоПодзапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	РазвернутыйТекстНовогоПодзапроса = РазвернутьВложенныеЗапросы(ТекущийПодзапрос, СвернутыйТекстНовогоПодзапроса);
	Если Прав(РазвернутыйТекстНовогоПодзапроса, 1) <> Символы.ПС Тогда
		РазвернутыйТекстНовогоПодзапроса = РазвернутыйТекстНовогоПодзапроса + Символы.ПС
	КонецЕсли; 
	//Если ТекущийПодзапрос.Текст <> РазвернутыйТекстНовогоПодзапроса Тогда
	//	// Фактически текст не изменился. Поэтому не будем обновлять дерево
	//КонецЕсли; 
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(мТекстЗапросаДерева);
	СтрокаДанных = ТекущийПодзапрос.СтрокаДанных;
	Если мРежимРедактирования Тогда
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных = ТекущийПодзапрос.СтрокаДанных;
			мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
				СтрокаДанных.НачальнаяСтрока,
				СтрокаДанных.НачальнаяКолонка,
				СтрокаДанных.КонечнаяСтрока,
				СтрокаДанных.КонечнаяКолонка);
			Если ЛиСворачиваемыйТипУзла(ТекущийПодзапрос.ТипУзла) Тогда
				мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "(" + РазвернутыйТекстНовогоПодзапроса + ")";
			Иначе
				мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = РазвернутыйТекстНовогоПодзапроса;
			КонецЕсли;
		Иначе
			мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(РазвернутыйТекстНовогоПодзапроса);
		КонецЕсли;
		мОбъектЗапроса.Текст = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
		Если Ложь
			Или ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "ADO")
			Или ирНеглобальный.СтрокиРавныЛкс(мТекущаяСтрока.ТипЗапроса, "WQL")
		Тогда
			//
		Иначе
			// **** Этот же блок можно выполнить по результату РазобратьТекстЗапроса()
			Попытка
				ПараметрыЗапроса = мОбъектЗапроса.НайтиПараметры();
			Исключение
				ЛксСообщитьСУчетомМодальности("Сохранение изменений невозможно, т.к. они приводят к ошибкам в вышестоящих подзапросах:"
					+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;

	ОчиститьДеревоЗапроса();
	Если НовыйРежимСворачивания <> Неопределено Тогда
		мРежимСворачивания = НовыйРежимСворачивания;
	КонецЕсли;
	СтарыйОбработчик = ЭлементыФормы.ДеревоЗапроса.ПолучитьДействие("ПриАктивизацииСтроки");
	ЭлементыФормы.ДеревоЗапроса.УстановитьДействие("ПриАктивизацииСтроки", Неопределено);
	Если Не РазобратьТекстЗапроса(мСлужебноеПолеТекстовогоДокумента) Тогда 
		ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
		КоманднаяПанельФормыРежимДереваЗапроса();
		Возврат Истина;
	КонецЕсли; 
	НоваяТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДереве);
	Если НоваяТекущаяСтрока <> ДеревоЗапроса Тогда 
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли;
	СтруктураВыделения = ирНеглобальный.ПолеТекста_ПолучитьДиапазонВыделенияЛкс(ЭлементыФормы.ТекстЗапроса);
	ДеревоЗапросаПриАктивизацииСтроки();
	ЭлементыФормы.ДеревоЗапроса.УстановитьДействие("ПриАктивизацииСтроки", СтарыйОбработчик);
	Если НовыйРежимСворачивания = Неопределено Тогда
		ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	КонецЕсли;
	ирНеглобальный.ПолеТекста_УстановитьДиапазонВыделенияЛкс(ЭлементыФормы.ТекстЗапроса, СтруктураВыделения);
	Если Не мРежимРедактирования Тогда
		вСохранитьЗапросыВФайл(,,, мСтруктураВосстановления.ФайлВосстановления.ПолноеИмя, Ложь);
	КонецЕсли; 
	Возврат Истина;
	
КонецФункции

Процедура КоманднаяПанельТекстЗапросаОтменитьРедактирование(Кнопка = Неопределено)
	
	ПоказатьТекстПодзапроса();
	ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаИзменитьИлиСохранитьУзелДерева(Кнопка = Неопределено, ПринудительноИзменить = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева;
	КонецЕсли;
	Если Истина
		И ПринудительноИзменить <> Истина
		И Кнопка.Текст = "Сохранить" 
	Тогда
		Если КоманднаяПанельТекстЗапросаЗакончитьРедактирование(Кнопка) Тогда
			УстановитьКнопкуИзменитьПодзапрос();
		КонецЕсли; 
	Иначе
		ЗаблокироватьРедактированиеТекстаЗапроса(Ложь);
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса.Доступность = Ложь;
		Кнопка.Текст = "Сохранить";
		Кнопка.Подсказка = "Сохранить текст узла дерева запроса";
		Кнопка.Пояснение = Кнопка.Подсказка;
		Кнопка.Картинка = БиблиотекаКартинок.ЗакончитьРедактирование;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьКнопкуИзменитьПодзапрос()

	Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева;
	Кнопка.Текст = "Изменить ";
	Кнопка.Подсказка = "Изменить текст узла дерева запроса";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Картинка = БиблиотекаКартинок.Изменить;
	Возврат Неопределено;
	
КонецФункции

Процедура КоманднаяПанельФормыРежимДереваЗапроса(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса;
	КонецЕсли;
	НовыйРежимДереваЗапроса = Не Кнопка.Пометка;
	
	Если Ложь
		Или мТекущаяСтрока = Неопределено
		//Или мТекущаяСтрока.ТипЗапроса = "Папка"
	Тогда
		//мРежимДереваЗапроса = НовыйРежимДереваЗапроса;
		Кнопка.Пометка = НовыйРежимДереваЗапроса;
		Возврат;
	КонецЕсли; 
	Если мПарсер = Неопределено Тогда
		Если Не ИнициализироватьПарсерЗапроса() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Не НовыйРежимДереваЗапроса Тогда 
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда 
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(РазвернутьВложенныеЗапросы(ДеревоЗапроса.Строки[0], мТекстЗапросаДерева));
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();
	Если мТекущаяСтрока.ТипЗапроса <> "Папка" Тогда
		Если НовыйРежимДереваЗапроса Тогда 
			Если Не РазобратьТекстЗапроса(ЭлементыФормы.ТекстЗапроса) Тогда 
				Возврат;
			КонецЕсли;
			ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
		Иначе
			ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Ложь;
			УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки, Истина);
			ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева.Доступность = Ложь;
			мРежимРедактирования = Ложь;
		КонецЕсли;
		ЛксИзменитьСвернутость(НовыйРежимДереваЗапроса, ЭлементыФормы.ДеревоЗапроса, ЭтаФорма.ЭлементыФормы.гРазделительДеревоЗапросов, ЭтаФорма.Панель, "низ");
	КонецЕсли; 
	мРежимДереваЗапроса = НовыйРежимДереваЗапроса;
	Кнопка.Пометка = мРежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ИзменитьИлиСохранитьУзелДерева.Доступность = мРежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ПерейтиКРодительскомуУзлу.Доступность = мРежимДереваЗапроса;
	//ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Сворачивать.Доступность = мРежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.УдалитьВременныеТаблицы.Доступность = Истина
		И Не мРежимДереваЗапроса
		И Не мРежимОтладки;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНоваяКонсоль(Кнопка)
	
	ЛксОткрытьНовоеОкноОбработки(ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПАРСЕР

Функция ИнициализироватьПарсерЗапроса()

	мПарсер = ирКэш.Получить().мПолучитьПарсер("ГрамматикаЯзыкаЗапросов");
	Если мПарсер <> Неопределено Тогда 
		ДеревоЗапроса.Колонки.Добавить("СтрокаДанных");
		ДеревоЗапроса.Колонки.Добавить("ТекущееВыделение");
		ДеревоЗапроса.Колонки.Добавить("Псевдоним");
	КонецЕсли;
	Возврат мПарсер <> Неопределено;

КонецФункции // ИнициализироватьПарсерЗапроса()


Функция РазобратьТекстЗапроса(ПолеТекстовогоДокумента, СтроитьДеревоЗапроса = Истина)
	
	Если мПарсер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ПолеТекстовогоДокумента.ПолучитьТекст();
	мОбъектЗапроса.Текст = ТекстЗапроса;
	//Если Не ПолучитьПараметрыИзЗапроса(, Ложь) Тогда 
	//	Возврат Ложь;
	//КонецЕсли;
	
	Состояние("Идет анализ текста запроса...");
	
	Если СтроитьДеревоЗапроса Тогда 
		мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
		мТаблицаКоординат.Очистить();
	КонецЕсли;
	
	gpMsgTokenRead			= 1;
	gpMsgReduction			= 2;
	gpMsgAccept				= 3;
	gpMsgNotLoadedError		= 4;
	gpMsgLexicalError		= 5;
	gpMsgSyntaxError 		= 6;
	gpMsgCommentError		= 7;
	gpMsgInternalError		= 8;
	gpMsgCommentBlockRead	= 9;
	gpMsgCommentLineRead	= 10;
	
	мПарсер.OpenTextString(ТекстЗапроса);
	Закончили = Ложь;
	мПарсер.TrimReductions = Истина;
	TrimReductions = Истина;
	Пока Не Закончили Цикл 
		Ответ = мПарсер.Parse();
		Если TrimReductions <> Истина Тогда
			мПарсер.TrimReductions = Истина;
			TrimReductions = Истина;
		КонецЕсли; 
		Если Ложь
			Или Ответ = gpMsgLexicalError 
			Или (Истина // Хотя Builder в этом случае диагностируе лексическую ошибку, этот парсер почему то бесконечно выдает статус 7
				И Ответ = 7 
				И мПарсер.CurrentReduction = Неопределено)
		Тогда
			мПарсер.PopInputToken();
			Закончили = Истина;
			ЛксСообщитьСУчетомМодальности(ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента) + "Ошибка лексического анализатора!",
				МодальныйРежим, СтатусСообщения.Важное);
			ПоказатьТекущиеКоординаты();
		ИначеЕсли Ответ = gpMsgSyntaxError Тогда
			ЛксСообщитьСУчетомМодальности(ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента) + "Синтаксическая ошибка """ 
				+ мПарсер.CurrentToken().Data + """"
				//+ ", ожидается: " + ПолучитьСтрокуОжидаемыхТокенов()
				, МодальныйРежим, СтатусСообщения.Важное);
			мПарсер.PushInputToken(мПарсер.Tokens(0));
			ПоказатьТекущиеКоординаты();
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgReduction Тогда
			ИмяПравила = мПарсер.CurrentReduction.ParentRule.RuleNonterminal.Name;
			Если Ложь
				Или ИмяПравила = "Table" 
				Или ИмяПравила = "TableName"
			Тогда
				мПарсер.TrimReductions = Ложь;
				TrimReductions = Ложь;
			КонецЕсли; 
		ИначеЕсли Ответ = gpMsgAccept Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgCommentError Тогда
		ИначеЕсли Ответ = gpMsgTokenRead Тогда
		ИначеЕсли Ответ = gpMsgInternalError Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgNotLoadedError Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgCommentBlockRead Тогда
		ИначеЕсли Ответ = gpMsgCommentLineRead Тогда
		КонецЕсли;
	КонецЦикла;
	
	Если СтроитьДеревоЗапроса Тогда 
		ПостроитьНисходящееЗапросы(ДеревоЗапроса, мПарсер.CurrentReduction);
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда
			ОбработатьДеревоЗапроса(ДеревоЗапроса.Строки[0], ДеревоЗапроса.Строки[0].СтрокаДанных.НачальнаяСтрока,
				ДеревоЗапроса.Строки[0].СтрокаДанных.НачальнаяКолонка);
			ДеревоЗапроса.Строки.Сортировать("Порядок Убыв", Истина);
			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(1, 1, 1, 1);
			ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ДеревоЗапроса.Строки[0];
			ЭлементыФормы.ДеревоЗапроса.Развернуть(ДеревоЗапроса.Строки[0], Истина);
			// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=999555#999555
			ЭлементыФормы.ДеревоЗапроса.ОбновитьСтроки();
			
			мТекстЗапросаДерева = ТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
	Состояние();
	Возврат (Ответ = gpMsgAccept);
	
КонецФункции // РазобратьТекстЗапроса

Процедура ПоказатьТекущиеКоординаты()

	// Баг платформы
	ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(мПарсер.CurrentLineNumber(), 1,
		мПарсер.CurrentLineNumber(), 1024);

КонецПроцедуры // ПоказатьКоординаты()

Функция ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента)
	
	Возврат ЛксПолучитьПредставлениеИзИдентификатора(ПолеТекстовогоДокумента.Имя)
		+ ": Строка " + мПарсер.CurrentLineNumber() + ": {(" + мПарсер.CurrentLineNumber() + "," + мПарсер.CurrentColumnNumber() + ")}: ";
		
КонецФункции // ПолучитьКоординатыВТекстеЗапроса()

Функция ПолучитьСтрокуОжидаемыхТокенов()

	СтрокаОжидаемыхТокенов = "";
	Для й = 0 по мПарсер.TokenCount() - 1 Цикл
		Токен = мПарсер.Tokens(й);
		СтрокаОжидаемыхТокенов = СтрокаОжидаемыхТокенов + ", " + Токен.Text;
	КонецЦикла;
	Возврат Сред(СтрокаОжидаемыхТокенов, 3);

КонецФункции // ПолучитьСтрокуОжидаемыхТокенов()

Функция ПостроитьНисходящееЗапросы(СтрокаДерева, Данные, Знач ЭтоВыборТаблицы = Ложь, Знач ПсевдонимСверху = Неопределено, Знач ЭтоСозданиеТаблицы = Ложь)
	
	Если Данные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	СтрокаВниз = СтрокаДерева;
	РодительскоеПравило = Данные.ParentRule.RuleNonterminal.Text;
	СоздатьУзелСразу = Ложь
		Или ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений")
		Или РодительскоеПравило = "<CreateUnion>"
		Или РодительскоеПравило = "<SelectUnion>"
		Или РодительскоеПравило = "<SimpleUnion>"
		Или (Истина
			И СтрокаДерева.ТипУзла = "<Packet>"
			И РодительскоеПравило <> "<Packet>")
		Или (Истина
			И (Ложь 
				Или РодительскоеПравило = "<SelectQuery>"
				Или РодительскоеПравило = "<CreateQuery>"
				Или РодительскоеПравило = "<Query>")
			И (Ложь
				Или СтрокаДерева.ТипУзла = "<Packet>"
				Или СтрокаДерева.ТипУзла = "<CreateUnion>"
				Или СтрокаДерева.ТипУзла = "<SelectUnion>"
				Или СтрокаДерева.ТипУзла = "<SimpleUnion>"))
		;
	Если СоздатьУзелСразу Тогда 
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.ТипУзла = РодительскоеПравило;
		СтрокаВниз = НоваяСтрока;
	КонецЕсли;
	Если Ложь
		//Или (Истина
		//	И СтрокаВниз.Имя = ""
		//	И (Ложь
		//		Или СтрокаВниз.Родитель = Неопределено
		//		Или СтрокаВниз.Родитель.ТипУзла = "<Packet>"))
		//Или РодительскоеПравило = "<Packet>"
		Или СоздатьУзелСразу
		Или РодительскоеПравило = "<EmbededQuery>"
		Или (Истина
			И РодительскоеПравило = "<Packet>"
			И СтрокаВниз.ТипУзла <> "<Packet>")
		Или (Истина
			И (Ложь
				Или РодительскоеПравило = "<TableName>"
				Или РодительскоеПравило = "<TableParameter>")
			И СтрокаВниз.ТипУзла = "<ChooseTable>")
		Или (Истина
			И ЭтоВыборТаблицы
			И РодительскоеПравило = "<TableAS>")
	Тогда
		Если Не ЗначениеЗаполнено(СтрокаВниз.Имя) Тогда 
			Если Ложь
				Или СтрокаВниз.Родитель = Неопределено
				Или СтрокаВниз.Родитель.ТипУзла = "<Packet>"
			Тогда 
				СтрокаВниз.Имя = "Запрос";
			КонецЕсли;
			Если РодительскоеПравило = "<Packet>" Тогда 
				//СтрокаВниз.Имя = "Запрос";
				СтрокаВниз.Имя = "Пакет"; // Заменено 10.08.2013
			ИначеЕсли РодительскоеПравило = "<EmbededQuery>" Тогда 
				СтрокаВниз.Имя = "Подзапрос";
			ИначеЕсли Ложь
				Или РодительскоеПравило = "<CreateUnion>"
				Или РодительскоеПравило = "<SelectUnion>"
				Или РодительскоеПравило = "<SimpleUnion>"
			Тогда 
				СтрокаВниз.Имя = "Объединение";
			ИначеЕсли Ложь
				Или РодительскоеПравило = "<SelectQuery>"
				Или РодительскоеПравило = "<CreateQuery>"
				Или РодительскоеПравило = "<Query>"
			Тогда
				СтрокаВниз.Имя = "Выборка";
			КонецЕсли;
		КонецЕсли;
		СтрокаВниз.Псевдоним = СтрокаВниз.Имя;
		
		ИмяПравила = Данные.ParentRule.RuleNonterminal.Text;
		СтрокаЗапроса = мТаблицаКоординат.Добавить();
		НачальныйТокен = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.ПолучитьГраничныйТерминалПравила(Данные, 0);
		СтрокаЗапроса.НачальнаяКолонка = НачальныйТокен.ColumnNumber;
		СтрокаЗапроса.НачальнаяСтрока = НачальныйТокен.LineNumber;
		КонечныйТокен = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.ПолучитьГраничныйТерминалПравила(Данные, 1);
		СтрокаЗапроса.КонечнаяКолонка = КонечныйТокен.ColumnNumber + СтрДлина(КонечныйТокен.Data);
		СтрокаЗапроса.КонечнаяСтрока = КонечныйТокен.LineNumber;

		Порядок = мТаблицаКоординат.Индекс(СтрокаЗапроса);
		СтрокаВниз.СтрокаДанных = СтрокаЗапроса;
		СтрокаВниз.Порядок = Порядок;
		мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
			СтрокаЗапроса.НачальнаяСтрока, СтрокаЗапроса.НачальнаяКолонка, СтрокаЗапроса.КонечнаяСтрока, СтрокаЗапроса.КонечнаяКолонка);
		Текст = мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст;
		Текст = СокрЛП(Текст);
		Если РодительскоеПравило = "<EmbededQuery>" Тогда 
			СтрокаВниз.Текст = Сред(Текст, 2, СтрДлина(Текст) - 2);
		Иначе 
			СтрокаВниз.Текст = Текст;
		КонецЕсли;
	КонецЕсли;
	Если Не СоздатьУзелСразу Тогда 
		Если Ложь
			//Или РодительскоеПравило = "<FromUnion>"
			Или РодительскоеПравило = "<InUnion>"
			Или РодительскоеПравило = "<ChooseTable>"
		Тогда 
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.ТипУзла = РодительскоеПравило;
			СтрокаВниз = НоваяСтрока;
		КонецЕсли;
	КонецЕсли;
	Для ИндексТокена = 0 По Данные.TokenCount - 1 Цикл
		Токен = Данные.Tokens(Данные.TokenCount - 1 - ИндексТокена);
		Если Токен.Kind = 0 Тогда
			// Не терминальный токен
			ПсевдонимСнизу = ПостроитьНисходящееЗапросы(СтрокаВниз, Токен.Data,
				((Данные.TokenCount - 1 - ИндексТокена) = 0) И (РодительскоеПравило = "<ChooseTable>"), ПсевдонимСверху, 
					ЭтоСозданиеТаблицы Или РодительскоеПравило = "<CreateRoot>");
			Если ПсевдонимСнизу <> Неопределено Тогда 
				Если Ложь
					Или РодительскоеПравило = "<FromUnion>"
					Или РодительскоеПравило = "<ChooseTable>"
				Тогда 
					//НоваяСтрока.Имя = ПсевдонимСнизу;
					СтрокаВниз.Имя = ПсевдонимСнизу;
					Если РодительскоеПравило = "<FromUnion>" Тогда
						СтрокаВниз.ТипУзла = РодительскоеПравило;
					КонецЕсли; 
				ИначеЕсли Ложь
					Или РодительскоеПравило = "<DropRoot>"
					Или РодительскоеПравило = "<CreateRoot>"
				Тогда
					СтрокаТекущегоЗапроса = СтрокаВниз;
					//Пока Истина
					//	И СтрокаТекущегоЗапроса.Родитель <> Неопределено
					//	И СтрокаТекущегоЗапроса.Родитель.ТипУзла <> "<Packet>"
					//Цикл 
					//	СтрокаТекущегоЗапроса = СтрокаТекущегоЗапроса.Родитель;
					//КонецЦикла;
					КорневаяСтрока = СтрокаТекущегоЗапроса;
					КорневаяСтрока.ТипУзла = РодительскоеПравило;
					Если РодительскоеПравило = "<DropRoot>" Тогда
						КорневаяСтрока.Имя = "Удаление_" + ПсевдонимСнизу;
					Иначе
						КорневаяСтрока.Имя = "Создание_" + ПсевдонимСнизу;
					КонецЕсли;
				ИначеЕсли Истина
					И ЭтоСозданиеТаблицы 
					И Не РодительскоеПравило = "<TableName>"
					И Не РодительскоеПравило = "<TableParameter>"
				Тогда 
					ПсевдонимВверх = ПсевдонимСнизу;
				ИначеЕсли Истина
					И РодительскоеПравило = "<TableName>"
					И Не РодительскоеПравило = "<TableParameter>"
				Тогда 
					ПсевдонимВверх = ПсевдонимСнизу;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли Ложь
			//Или РодительскоеПравило = "<TableName>"
			Или (Истина
				И Не ЭтоВыборТаблицы
				И РодительскоеПравило = "<TableAS>")
		Тогда 
			ПсевдонимВверх = Токен.Data;
		//ИначеЕсли ЭтоСозданиеТаблицы Тогда 
		//	ПсевдонимВверх = ПсевдонимСнизу;
		КонецЕсли;
	КонецЦикла;
	Возврат ПсевдонимВверх;
	
КонецФункции

Функция ЛиСворачиваемыйТипУзла(ТипУзла)
	
	Результат = Ложь
		Или ТипУзла = "<InUnion>"
		Или ТипУзла = "<FromUnion>";
	Возврат Результат;
	
КонецФункции

Процедура СвернутьПодзапросы(СтрокаДерева, НачальнаяСтрока, НачальнаяКолонка)

	Если ЛиСворачиваемыйТипУзла(СтрокаДерева.ТипУзла) Тогда
		СтрокаДанных = СтрокаДерева.СтрокаДанных;
		Если НачальнаяСтрока = СтрокаДанных.НачальнаяСтрока Тогда 
			лНачальнаяКолонка = НачальнаяКолонка;
		Иначе
			лНачальнаяКолонка = 1;
		КонецЕсли;
		Если СтрокаДанных.КонечнаяСтрока = СтрокаДанных.НачальнаяСтрока Тогда
			лКонечнаяКолонка = лНачальнаяКолонка;
		Иначе
			лКонечнаяКолонка = 1;
		КонецЕсли;
		мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
			СтрокаДанных.НачальнаяСтрока - НачальнаяСтрока + 1,
			СтрокаДанных.НачальнаяКолонка - лНачальнаяКолонка + 1,
			СтрокаДанных.КонечнаяСтрока - НачальнаяСтрока + 1,
			СтрокаДанных.КонечнаяКолонка - лКонечнаяКолонка + 1);
		Если СтрокаДерева.ТипУзла = "<InUnion>" Тогда
			мОбъектЗапроса.УстановитьПараметр("_" + СтрокаДерева.Имя + "_",);
			мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "(&" + СтрокаДерева.Псевдоним + ")";
		ИначеЕсли СтрокаДерева.ТипУзла = "<FromUnion>" Тогда
			мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = СтрокаДерева.Псевдоним;
		КонецЕсли;
	Иначе
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			СвернутьПодзапросы(ДочерняяСтрока, НачальнаяСтрока, НачальнаяКолонка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СвернутьПодзапросы()

Процедура ОбработатьДеревоЗапроса(СтрокаДерева, НачальнаяСтрока = 1, НачальнаяКолонка = 1)

	Представление = СтрокаДерева.Имя;
	//Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(СтрокаДерева.Текст);
	//Если Фрагменты.Количество() > 1 Тогда
	//	ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
	//	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
	//	Если ОбъектМетаданных <> Неопределено Тогда
	//		Представление = Представление + "=" + СтрокаДерева.Текст;
	//	КонецЕсли; 
	//КонецЕсли; 
	Если СтрокаДерева.ТипУзла = "<ChooseTable>" Тогда
		Представление = Представление + " = " + ЛксПолучитьПервыйФрагмент(СтрокаДерева.Текст, "(");
		СтрокаДерева.ДлительностьПолная = "";
	КонецЕсли; 
	СтрокаДерева.Представление = Представление;
	
	// Нормализация динамических имен
	МассивДинамическихИмен = ЛксБыстрыйМассив("Выборка", "Подзапрос", "Запрос");
	Для Каждого ДинамическоеИмя Из МассивДинамическихИмен Цикл
		СтрокиДинамическогоИмени = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Имя", ДинамическоеИмя));
		ВГраница = СтрокиДинамическогоИмени.ВГраница();
		Для Счетчик = 0 По ВГраница Цикл
			ДочерняяСтрока = СтрокиДинамическогоИмени[ВГраница - Счетчик];
			ДочерняяСтрока.Имя = ДочерняяСтрока.Имя + Строка(Счетчик + 1);
		КонецЦикла;
	КонецЦикла;
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		ПсевдонимПодзапроса = "_" + СтрокаДерева.Имя + "_" + ДочерняяСтрока.Имя + "_";
		ДочерняяСтрока.Псевдоним = ПсевдонимПодзапроса;
		СтрокаДанных = ДочерняяСтрока.СтрокаДанных;
		Если ЛиСворачиваемыйТипУзла(ДочерняяСтрока.ТипУзла) Тогда
			СмещениеКолонки = 1;
		Иначе
			СмещениеКолонки = 0;
		КонецЕсли;
		Если СтрокаДанных = Неопределено Тогда
			// ВЫБРАТЬ * ИЗ &ТТ
			Продолжить;
		КонецЕсли;
		ОбработатьДеревоЗапроса(ДочерняяСтрока, СтрокаДанных.НачальнаяСтрока, СтрокаДанных.НачальнаяКолонка + СмещениеКолонки);
	КонецЦикла;
	
	Если Не мРежимСворачивания Тогда
		Возврат;
	КонецЕсли;
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(СтрокаДерева.Текст);
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		СвернутьПодзапросы(ДочерняяСтрока, НачальнаяСтрока, НачальнаяКолонка);
	КонецЦикла;
	СтрокаДерева.Текст = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();

КонецПроцедуры // ОбработатьДеревоЗапроса()

Процедура лРазвернутьВложенныеПодзапросы(Текст, СтрокаДерева)

	Если ЛиСворачиваемыйТипУзла(СтрокаДерева.ТипУзла) Тогда
		Если СтрокаДерева.ТипУзла = "<InUnion>" Тогда
			Текст = СтрЗаменить(Текст, "(&" + СтрокаДерева.Псевдоним + ")", "(" + РазвернутьВложенныеЗапросы(СтрокаДерева) + ")");
		ИначеЕсли СтрокаДерева.ТипУзла = "<FromUnion>" Тогда
			Текст = СтрЗаменить(Текст, СтрокаДерева.Псевдоним, "(" + РазвернутьВложенныеЗапросы(СтрокаДерева) + ")");
		КонецЕсли;
	Иначе
		Для Каждого СубДочерняяСтрока Из СтрокаДерева.Строки Цикл
			лРазвернутьВложенныеПодзапросы(Текст, СубДочерняяСтрока);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // лРазвернутьВложенныеПодзапросы()

Функция РазвернутьВложенныеЗапросы(СтрокаДерева, Текст = "")
	
	Если Текст = "" Тогда 
		Текст = СтрокаДерева.Текст;
	КонецЕсли; 
	Если мРежимСворачивания Тогда 
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			лРазвернутьВложенныеПодзапросы(Текст, ДочерняяСтрока);
		КонецЦикла;
	КонецЕсли;
	Возврат Текст;

КонецФункции // РазвернутьВложенныеЗапросы()

Процедура ДеревоЗапросаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ИмяКолонки = "Представление";
	Ячейка = ОформлениеСтроки.Ячейки[ИмяКолонки];
	Ячейка.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ТипУзла = "<FromUnion>" Тогда 
		Ячейка.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<InUnion>" Тогда 
		Ячейка.ИндексКартинки = 1;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<Into>" Тогда 
		Ячейка.ИндексКартинки = 13;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<DropRoot>" Тогда 
		Ячейка.ИндексКартинки = 26;
	ИначеЕсли Ложь 
		Или ДанныеСтроки.ТипУзла = "<CreateUnion>"
		Или ДанныеСтроки.ТипУзла = "<SelectUnion>"
		Или ДанныеСтроки.ТипУзла = "<SimpleUnion>"
	Тогда 
		Ячейка.ИндексКартинки = 16;
	ИначеЕсли Ложь
		Или ДанныеСтроки.ТипУзла = "<SelectQuery>"
		Или ДанныеСтроки.ТипУзла = "<CreateQuery>"
	Тогда 
		Ячейка.ИндексКартинки = 15;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<Query>" Тогда 
		Ячейка.ИндексКартинки = 15;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<ChooseTable>" Тогда 
		ПолноеИмяТаблицы = ЛксПолучитьПервыйФрагмент(ДанныеСтроки.Текст, "(");
		ТипТаблицы = ирНеглобальный.ПолучитьТипТаблицыБДЛкс(ПолноеИмяТаблицы);
		Ячейка.ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(ТипТаблицы);
	КонецЕсли;
	
КонецПроцедуры

Функция КоманднаяПанельТекстЗапросаСворачивать(Кнопка = Неопределено)
	
	Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Сворачивать;
	Если Не мРежимДереваЗапроса Тогда
		Кнопка.Пометка = Не Кнопка.Пометка;
		мРежимСворачивания = Кнопка.Пометка;
		Возврат Истина;
	Иначе
		НовыйРежимСворачивания = Не Кнопка.Пометка;
		Если КоманднаяПанельТекстЗапросаЗакончитьРедактирование(, НовыйРежимСворачивания) Тогда 
			Кнопка.Пометка = НовыйРежимСворачивания;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции

Процедура ПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.Параметры.ТекущаяСтрока;
	Если ТекущаяСтрока.ЭтоВыражение = 2 Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение.Очистить();
	Иначе
		Если Не ТекущаяСтрока.НеИспользоватьОграничениеТипа Тогда
			ТекущаяСтрока.Значение = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);
			//Элемент.Значение = ТекущаяСтрока.ТипЗначения.ПривестиЗначение(ТекущаяСтрока.Значение);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельЗапросаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИмяСтраницы = ЭлементыФормы.ПанельЗапроса.Страницы[ТекущаяСтраница].Имя;
	Если Ложь
		Или ирНеглобальный.СтрокиРавныЛкс(ИмяСтраницы, "Компоновка")
		Или ирНеглобальный.СтрокиРавныЛкс(ИмяСтраницы, "Построитель")
	Тогда 
		мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
		Если Не ПолучитьПараметрыИзЗапроса() Тогда 
			Возврат;
		КонецЕсли;
		УстановитьТипЗапроса(, Истина, мОбъектЗапроса.Текст);
	ИначеЕсли Ложь
		Или ирНеглобальный.СтрокиРавныЛкс(ИмяСтраницы, "WQL")
	Тогда
		Если КлассыWMI.Количество() = 0 Тогда
			НастроитьКомпоновщикWMI(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьТипЗапроса(НовыйТип = "", ПоказыватьОшибки = Ложь, ТекстЗапроса = "")

	Если мТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	//Если НовыйТип = "Папка" Тогда
	//	Если Не НеЗадаватьВопросы Тогда
	//		Ответ = Вопрос("Содержимое текущего запроса будет утеряно. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	//		Если Ответ <> КодВозвратаДиалога.ОК Тогда
	//			Возврат Ложь;
	//		КонецЕсли;
	//	КонецЕсли; 
	//КонецЕсли; 
	Если НовыйТип = "" Тогда
		НовыйТип = мТекущаяСтрока.ТипЗапроса;
	КонецЕсли;
	Если НовыйТип = "" Тогда
		НовыйТип = "Обычный";
	КонецЕсли;
	Если мТекущаяСтрока.ТипЗапроса <> НовыйТип Тогда
		Модифицированность = Истина;
	КонецЕсли;
	мТекущаяСтрока.ТипЗапроса = НовыйТип;
	Для Каждого лКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки Цикл
		лКнопка.Пометка = Ложь;
	КонецЦикла;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки[НовыйТип].Пометка = Истина;
	
	ОбновитьДоступностьПанелиЗапроса();
	Если НовыйТип <> "Папка" Тогда
		Если Не мЗапросЗагруженВКонсоль Тогда
			ЗагрузитьЗапросВКонсоль();
		КонецЕсли; 
		Если ТекстЗапроса = "" Тогда
			ТекстЗапроса = вПолучитьТекстЗапроса(Истина);
		КонецЕсли;
		БезОшибок = Истина;
		
		Если ирКэш.Получить().ВерсияПлатформы >= 801011 Тогда
			МассивСоздаваемыхВременныхТаблиц = ПолучитьМассивСоздаваемыхВременныхТаблицПакета();
			Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
				ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
				Если ИмяВременнойТаблицы <> Неопределено Тогда
					ТекстЗапроса = ТекстЗапроса + "
					|;
					|ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НовыйТип = "Компоновка" Тогда
			БезОшибок = ОбновитьКомпоновщик(ТекстЗапроса, ПоказыватьОшибки);
		ИначеЕсли НовыйТип = "Построитель" Тогда
			БезОшибок = ОбновитьПостроитель(ТекстЗапроса, ПоказыватьОшибки);
		Иначе
			мМассивВременныхТаблицКомпоновщика = Новый Массив;
			мОбъектЗапроса.Текст = ТекстЗапроса;
		КонецЕсли;
		//ЭтаФорма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Открыть_КонсольКомпоновокДанных.Доступность = НовыйТип = "Компоновка";
		Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой <> Неопределено Тогда
			ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.РежимКомпоновкиДанных = (НовыйТип = "Компоновка");
		КонецЕсли;
	КонецЕсли; 
	Для Каждого ПереключаемаяСтраница Из мСписокПереключаемыхСтраниц Цикл
		ПереключаемаяСтраница.Видимость = ирНеглобальный.СтрокиРавныЛкс(ПереключаемаяСтраница.Имя, НовыйТип); 
	КонецЦикла;
	Возврат БезОшибок;

КонецФункции // УстановитьТипЗапроса()

Процедура ОбновитьДоступностьПанелиЗапроса() Экспорт

	ЭлементыФормы.ПанельЗапроса.Доступность = Истина
		И мТекущаяСтрока <> Неопределено
		И мТекущаяСтрока.ТипЗапроса <> "Папка";

КонецПроцедуры

Процедура ИзменитьТипЗапроса(Кнопка)
	
	УстановитьТипЗапроса(Кнопка.Имя);
	 
КонецПроцедуры

Функция ПолучитьМассивСоздаваемыхВременныхТаблицПакета()

	МассивТаблиц = ирКэш.Получить().ПолучитьМассивСоздаваемыхВременныхТаблицПакета(мОбъектЗапроса.Текст);
	Возврат МассивТаблиц;

КонецФункции // ПолучитьМассивСоздаваемыхВременныхТаблицПакета()

Функция ПолучитьРезультирующийЗапрос(пЗапрос)

	ТекстЗапроса = мОбъектЗапроса.Текст;
	МассивСоздаваемыхВременныхТаблиц = ПолучитьМассивСоздаваемыхВременныхТаблицПакета();

	Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда 
		//Если ирКэш.Получить().ВерсияПлатформы >= 801012 Тогда
		//	Компоновщик.Настройки.Структура.Очистить();
		//	ЭлементСтруктуры = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		//	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		//	Компоновщик.Настройки.Выбор.Элементы.Очистить();
		//	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		//		// Чтобы пропустить системные папки
		//		Если Не ДоступноеПоле.Папка Тогда
		//			НовоеВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//			НовоеВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		//			НовоеВыбранноеПоле.Использование = Истина;
		//		КонецЕсли;
		//	КонецЦикла;
		//	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		//	//Попытка
		//	//	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки, , ,
		//	//		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		//	//	КомпоновкаУдалась = Истина;
		//	//Исключение
		//	//	// Исключение может произойти в случае удаления временной таблицы
		//	//	КомпоновкаУдалась = Ложь;
		//	//	ИнформацияОбОшибке = ИнформацияОбОшибке();
		//	//КонецПопытки;
		//Иначе
			//// Установим использование параметров
			//Для Каждого ЭлементПараметра Из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
			//	ЭлементПараметра.Использование = Истина;
			//КонецЦикла;
			
			Компоновщик.Настройки.УсловноеОформление.Элементы.Очистить();
			ЭлементОформления = Компоновщик.Настройки.УсловноеОформление.Элементы.Добавить();
			ЭлементыОформления = ЭлементОформления.Отбор.Элементы;
			ЭлементыДоступныхПолей = Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы;
			ДобавитьДоступныеПоляВЭлементыУсловногоОформления(ЭлементыОформления, ЭлементыДоступныхПолей);
			
		//КонецЕсли;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Попытка
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки);
			КомпоновкаУдалась = Истина;
		Исключение
			// Исключение может произойти в случае создания/удаления временной таблицы
			КомпоновкаУдалась = Ложь;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		Если КомпоновкаУдалась Тогда
			Если МакетКомпоновкиДанных.НаборыДанных.Количество() > 0 Тогда
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
				Для Каждого лПараметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					Если Параметры.Найти(лПараметр.Имя, "ИмяПараметра") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					пЗапрос.УстановитьПараметр(лПараметр.Имя, лПараметр.Значение);
				КонецЦикла;
				Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
					ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
				КонецЕсли;
				//Если Не ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда // Закомментировал 23.03.2012
					СтрокаПорядка = ЛксПолучитьСтрокуПорядкаКомпоновки(Компоновщик.Настройки.Порядок);
					Если ЗначениеЗаполнено(СтрокаПорядка) Тогда
						Если Найти(ТекстЗапроса, "УПОРЯДОЧИТЬ ПО") = 0 Тогда
							ТекстЗапроса = ТекстЗапроса + Символы.ПС + "УПОРЯДОЧИТЬ ПО";
						Иначе
							ТекстЗапроса = ТекстЗапроса + ", ";
						КонецЕсли;
						ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + СтрокаПорядка;
					КонецЕсли;
					Если мФлагМаскировкиАвтоупорядочивание = Истина Тогда
						ТекстЗапроса = ТекстЗапроса + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ";
					КонецЕсли;
				//КонецЕсли;
			Иначе
				// Такое происходит если нет ни одного запроса на выборку
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли мТекущаяСтрока.ТипЗапроса = "Построитель" Тогда 
		Попытка
			ЗапросИзПостроителя = Построитель.ПолучитьЗапрос();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			//ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса,,,, МодальныйРежим, ИнформацияОбОшибке);
			Возврат МассивСоздаваемыхВременныхТаблиц;
		КонецПопытки;
		Если ЗапросИзПостроителя.Текст <> "" Тогда
			ТекстЗапроса = ЗапросИзПостроителя.Текст;
			Для Каждого лПараметр Из ЗапросИзПостроителя.Параметры Цикл
				Если Параметры.Найти(лПараметр.Ключ, "ИмяПараметра") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				пЗапрос.УстановитьПараметр(лПараметр.Ключ, лПараметр.Значение);
			КонецЦикла;
		Иначе
			// Такое происходит если нет ни одного запроса на выборку
		КонецЕсли;
	//ИначеЕсли мТекущаяСтрока.ТипЗапроса = "Обычный" Тогда 
	//	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	КонецЕсли;
	пЗапрос.Текст = ирКэш.Получить().РазмаскироватьВременныеТаблицы(ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	
	Возврат МассивСоздаваемыхВременныхТаблиц;

КонецФункции // ПолучитьРезультирующийЗапрос()

Функция ДобавитьДоступныеПоляВЭлементыУсловногоОформления(ЭлементыОформления, ЭлементыДоступныхПолей) Экспорт

	Для Каждого ДоступноеПоле Из ЭлементыДоступныхПолей Цикл
		Если Ложь
			Или ДоступноеПоле.Папка
		Тогда
			Продолжить;
		КонецЕсли; 
		Если ДоступноеПоле.Таблица Тогда
			ДобавитьДоступныеПоляВЭлементыУсловногоОформления(ЭлементыОформления, ДоступноеПоле.Элементы);
			Продолжить;
		КонецЕсли; 
		НовыйЭлементОтбора = ЭлементыОформления.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
		НовыйЭлементОтбора.Использование = Истина;
	КонецЦикла;
	Возврат Неопределено;

КонецФункции

Процедура КоманднаяПанельФормыИсполняемыйЗапрос(Кнопка)
	
	лЗапрос = Новый Запрос;
	//// @@@@ Тут доделать в 8.1.11
	//мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	//ЗаполнитьЗначенияСвойств(лЗапрос, мОбъектЗапроса, "Текст, МенеджерВременныхТаблиц");
	//Если Не ПолучитьПараметрыИзЗапроса() Тогда 
	//	Возврат;
	//КонецЕсли;
	//// @@@@ Тут еще перед выполнением запроса обработчик 
	УстановитьПараметрыЗапроса(лЗапрос);
		
	ПолучитьРезультирующийЗапрос(лЗапрос);
	Обработки.ирКонсольЗапросов.Создать().ОткрытьДляОтладки(лЗапрос, мТекущаяСтрока.ТипЗапроса, мТекущаяСтрока.Запрос + "- Исполняемый");
	
КонецПроцедуры

Процедура МенюДереваЗапросаПеренестиВНовыйЗапрос(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	ПутьВДеревеЗапроса = ЛксПолучитьСтрокуПутиВДереве(мТекущаяСтрокаДереваЗапроса, "Псевдоним");
	СтараяСтрокаДереваЗапросов = мТекущаяСтрока;
	ТекстЗапроса = СтараяСтрокаДереваЗапросов.ТекстЗапроса;
	СтрокаДанных = мТекущаяСтрокаДереваЗапроса.СтрокаДанных;
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
	мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
		СтрокаДанных.НачальнаяСтрока,
		СтрокаДанных.НачальнаяКолонка,
		СтрокаДанных.КонечнаяСтрока,
		СтрокаДанных.КонечнаяКолонка);
	мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = мТекущаяСтрокаДереваЗапроса.Имя + " ";
	НовыйТекстСтарогоЗапроса = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
	
	Ответ = Вопрос("Хотите добавить запрос в текущий пакетный запрос (Да) или создать отдельный простой запрос (Нет)?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТекстЗапросаПоместить = вПолучитьТекстЗапроса(Истина);
		ТекстЗапросаПоместить = ирКэш.Получить().ДобавитьПредложениеПоместитьВЗапрос(ТекстЗапросаПоместить, мТекущаяСтрокаДереваЗапроса.Имя);
		НовыйТекстСтарогоЗапроса = ТекстЗапросаПоместить + Символы.ПС + ";" + Символы.ПС + НовыйТекстСтарогоЗапроса;
		мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(НовыйТекстСтарогоЗапроса);
		ОчиститьДеревоЗапроса();
		РазобратьТекстЗапроса(мСлужебноеПолеТекстовогоДокумента);
	Иначе
		НоваяСтрокаЗапроса = СкопироватьТекущийПодзапросВНовыйЗапрос(-1);
		НоваяСтрокаЗапроса.Запрос = "*" + НоваяСтрокаЗапроса.Запрос;
		ТекстЗапросаПоместить = ирКэш.Получить().ДобавитьПредложениеПоместитьВЗапрос(НоваяСтрокаЗапроса.ТекстЗапроса, мТекущаяСтрокаДереваЗапроса.Имя);
		НоваяСтрокаЗапроса.ТекстЗапроса = ТекстЗапросаПоместить;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаЗапроса;
		ВыполнитьЗапрос();
		СтараяСтрокаДереваЗапросов.ТекстЗапроса = НовыйТекстСтарогоЗапроса;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = СтараяСтрокаДереваЗапросов;
	КонецЕсли;
	НоваяТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДеревеЗапроса);
	Если НоваяТекущаяСтрока <> Неопределено Тогда
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенюДереваЗапросаПреобразоватьВПодзапрос(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	ПутьВДеревеЗапроса = ЛксПолучитьСтрокуПутиВДереве(мТекущаяСтрокаДереваЗапроса, "Псевдоним");
	СтрокаДанных = мТекущаяСтрокаДереваЗапроса.СтрокаДанных;
	мСлужебноеПолеТекстовогоДокумента.УстановитьТекст(мТекстЗапросаДерева);
	мСлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
	СтрокаДанных.НачальнаяСтрока,
	СтрокаДанных.НачальнаяКолонка,
	СтрокаДанных.КонечнаяСтрока,
	СтрокаДанных.КонечнаяКолонка);
	НовыйВыделенныйТекст = РазвернутьВложенныеЗапросы(ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока, мТекущаяСтрокаДереваЗапроса.Текст);
	ТипУзла = мТекущаяСтрокаДереваЗапроса.ТипУзла;
	Если ТипУзла = "<ChooseTable>" Тогда
		НовыйВыделенныйТекст = "(ВЫБРАТЬ * ИЗ " + НовыйВыделенныйТекст + " КАК " + мТекущаяСтрокаДереваЗапроса.Имя + ") ";
		
	// Заменено 30.11.2011
	//ИначеЕсли ТипУзла = "<FromUnion>" Тогда 
	//	НовыйВыделенныйТекст = "(ВЫБРАТЬ * ИЗ (" + НовыйВыделенныйТекст + ") КАК " + мТекущаяСтрокаДереваЗапроса.Имя + ") ";
	//ИначеЕсли ТипУзла = "<SelectRoot>" Тогда 
	//	НовыйВыделенныйТекст = "ВЫБРАТЬ * ИЗ (" + НовыйВыделенныйТекст + ") КАК " + мТекущаяСтрокаДереваЗапроса.Имя;
	ИначеЕсли ТипУзла = "<FromUnion>" Тогда 
		НовыйВыделенныйТекст = "(" + ирКэш.Получить().ПреобразоватьЗапросВПодзапрос(НовыйВыделенныйТекст, , мТекущаяСтрокаДереваЗапроса.Имя) + ") ";
	ИначеЕсли ТипУзла = "<SelectRoot>" Тогда
		ПсевдонимВложенногоЗапроса = мТекущаяСтрокаДереваЗапроса.Имя;
		Если мТекущаяСтрокаДереваЗапроса.Строки.Количество() = 1 Тогда
			Если мТекущаяСтрокаДереваЗапроса.Строки[0].ТипУзла = "<ChooseTable>"  Тогда
				ПсевдонимВложенногоЗапроса = мТекущаяСтрокаДереваЗапроса.Строки[0].Имя;
			КонецЕсли; 
		КонецЕсли; 
		НовыйВыделенныйТекст = ирКэш.Получить().ПреобразоватьЗапросВПодзапрос(НовыйВыделенныйТекст, , ПсевдонимВложенногоЗапроса);
	КонецЕсли;
	мСлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = НовыйВыделенныйТекст;
	
	// Данная проверка нужна только для корня
	мОбъектЗапроса.Текст = мСлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
	Если Не ПолучитьПараметрыИзЗапроса(Ложь, Ложь) Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();
	РазобратьТекстЗапроса(мСлужебноеПолеТекстовогоДокумента);
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДеревеЗапроса);
	
КонецПроцедуры

Процедура ДеревоЗапросовПослеУдаления(Элемент)

	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ЛксПриПолученииДанныхДоступныхПолейКомпоновки(ОформленияСтрок);

КонецПроцедуры // ПриПолученииДанныхДоступныхПолей()

Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "НеИспользоватьОграничениеТипа" Тогда
		ПривестиЗначениеПараметраКОграничениюТипов();
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирНеглобальный.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.КоманднаяПанельТаблица.Кнопки.Пустые.Пометка);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.РезультатТаблица.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.РезультатДерево.ОбновитьСтроки();
	
КонецПроцедуры

Процедура РезультатДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирНеглобальный.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.КоманднаяПанельДерево.Кнопки.Пустые.Пометка);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаШиринаКолонок(Кнопка)
	
	ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаСжатьКолонки(Кнопка)
	
	ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоСжатьКолонки(Кнопка)
	
	ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоШиринаКолонок(Кнопка)
	
	ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура МенюДереваЗапросаШагнутьЧерез(Кнопка)
	
	Если Ложь
		Или Не мРежимДереваЗапроса
		Или Не СохранитьТекущийПодзапрос()
	Тогда 
		Возврат;
	КонецЕсли;
	ВыполнитьЗапрос();
	ТекущаяСтрокаДереваЗапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	РодительУровня = ТекущаяСтрокаДереваЗапроса.Родитель;
	Если РодительУровня = Неопределено Тогда
		РодительУровня = ДеревоЗапроса;
	КонецЕсли; 
	СтрокиУровня = РодительУровня.Строки;
	ТекущийИндекс = СтрокиУровня.Индекс(ТекущаяСтрокаДереваЗапроса);
	Если СтрокиУровня.Количество() = ТекущийИндекс + 1 Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокиУровня[ТекущийИндекс + 1];
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЛксОбновитьЗаголовкиСтраницПанелей(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаСравнить(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(мСравнительТабличныхДокументов, ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОткрыть_КонсольКомпоновокДанных(Кнопка)
	
	НовыйТип = "Компоновка";
	Если мТекущаяСтрока.ТипЗапроса <> НовыйТип Тогда
		Ответ = Вопрос("Тип запроса будет изменен на ""Компоновка"". Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	Если Не УстановитьПараметрыЗапроса() Тогда
		Возврат;
	КонецЕсли;
	Если Не УстановитьТипЗапроса(НовыйТип) Тогда
		Возврат;
	КонецЕсли;
	НовыеНастройки = Компоновщик.ПолучитьНастройки();
	ЭлементСтруктуры = НовыеНастройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Для Каждого ПолеНабораДанных Из мНаборДанных.Поля Цикл
		ВыбранноеПоле = НовыеНастройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Использование = Истина;
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеНабораДанных.Поле);
	КонецЦикла;
	Для Каждого ЗначениеПараметра Из НовыеНастройки.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра.Использование = Истина;
	КонецЦикла;
	Отладить(мСхемаКомпоновки, Ложь, НовыеНастройки);
	
КонецПроцедуры

Процедура МенюДереваЗапросаПерейтиКСозданию(Кнопка)
	
	ТекущаяСтрока = ЭтаФорма.ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	СтрокаЗапросаСоздания = ЭтаФорма.ДеревоЗапроса.Строки.Найти("Создание_" + ТекущаяСтрока.Имя, "Имя", Истина);
	Если СтрокаЗапросаСоздания <> Неопределено Тогда
		ЭтаФорма.ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаЗапросаСоздания;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОбъединитьФайл(Кнопка)
	
	ОткрытьФайл(Ложь);

КонецПроцедуры

Процедура КоманднаяПанельФормыОткрытьФайл(Кнопка)
	
	ОткрытьФайл();
	
КонецПроцедуры

Процедура ПараметрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Истина
		И ВыбраннаяСтрока.Значение <> ВыбраннаяСтрока.Значение
		И Колонка.Данные = "Значение" 
	Тогда
		ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыИсследоватьПараметры(Кнопка)
	
	Если ЭлементыФормы.Параметры.ТекущаяСтрока <> Неопределено Тогда
		Исследовать(ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНастройкаОсторожностиВыборкиДанных(Кнопка)
	
	 ФормаНастройки = ирКэш.Получить().ПолучитьФорму("НастройкаОсторожностиВыборкиДанных");
	 ФормаНастройки.ОткрытьМодально();
	 Кнопка.Пометка = ВосстановитьЗначение("ир_ВыполнятьПредварительныйЗапрос") = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыОПодсистеме(Кнопка)
	
	ЛксОткрытьСправкуПоПодсистеме(ЭтотОбъект);
	
КонецПроцедуры

Процедура МенюДереваЗапросовСоздатьЭлементСправочникаЗапросы(Кнопка)
	
	ОбъектМДЗапросы = Метаданные.Справочники.Найти("Запросы2iS");
	Если ОбъектМДЗапросы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗначениеВыбора = ЛксВыбратьСсылку(ОбъектМДЗапросы, мСсылка);
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		//ЗапросОбъект = ЗначениеВыбора.ПолучитьОбъект();
		ЗапросОбъект = ЗначениеВыбора;
	Иначе
		ЗапросОбъект = Справочники.Запросы2iS.СоздатьЭлемент();
	КонецЕсли; 
	ФормаЭлемента = ДУ("Р = УФ(П1, П2)", Перечисления.Сервисы2iS.ПолучитьФормуОбъектаБД, ЗапросОбъект);
	СтароеЗакрыватьПриЗакрытииВладельца = ЗакрыватьПриЗакрытииВладельца;
	СтароеВладелецФормы = ВладелецФормы;
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ЭтаФорма.ВладелецФормы = ФормаЭлемента;
	ЭтаФорма.ВладелецФормы.Открыть();
	вСохранитьЗапросыВФайл(, , Истина, "");
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = СтароеЗакрыватьПриЗакрытииВладельца;
	ЭтаФорма.ВладелецФормы = СтароеВладелецФормы;
	
КонецПроцедуры

Процедура МенюДереваЗапросовЗагрузитьИзЭлементаСправочникаЗапросы(Кнопка)
	
	ОбъектМДЗапросы = Метаданные.Справочники.Найти("Запросы2iS");
	Если ОбъектМДЗапросы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЗначениеВыбора = ЛксВыбратьСсылку(ОбъектМДЗапросы, мСсылка);
	Если Не ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Возврат;
	КонецЕсли; 
	ФормаЭлемента = Вычислить("УФ(Перечисления.Сервисы2iS.ПолучитьФормуОбъектаБД, ЗначениеВыбора)");
	СтароеЗакрыватьПриЗакрытииВладельца = ЗакрыватьПриЗакрытииВладельца;
	СтароеВладелецФормы = ВладелецФормы;
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ЭтаФорма.ВладелецФормы = ФормаЭлемента;
	ЭтаФорма.ВладелецФормы.Открыть();
	вСохранитьЗапросыВФайл(, , Истина);
	ЭтаФорма.ЗакрыватьПриЗакрытииВладельца = СтароеЗакрыватьПриЗакрытииВладельца;
	ЭтаФорма.ВладелецФормы = СтароеВладелецФормы;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаКонсольОбработки(Кнопка)
	
	ирНеглобальный.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектов(ЭтаФорма.ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	ЛксДеревоКонсолиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваЗапросов");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = Параметры
	Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДеревоЗапросовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	ЛксДеревоКонсолиПеретаскивание(ЭтаФорма, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка, "СтрокаДереваЗапросов");
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если Истина
		И ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив")
		И ЗначениеПеретаскивания.Количество() > 0
		И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаТаблицыЗначений") 
		И ЗначениеПеретаскивания[0].Владелец() = Параметры
	Тогда
		СтандартнаяОбработка = Ложь;
		Для Каждого СтрокаПараметра Из ЗначениеПеретаскивания Цикл
			СтрокаНовогоПараметра = Строка.ПараметрыЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовогоПараметра, СтрокаПараметра);
			СтрокаНовогоПараметра.ИмяПараметра = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(Строка.ПараметрыЗапроса,
				СтрокаНовогоПараметра, "ИмяПараметра");
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	вСохранитьЗапросТекущейСтроки();
	ЛксДеревоКонсолиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение, "СтрокаДереваЗапросов")
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоЗаполнитьГруппыДублейДляЗамены(Кнопка)
	
	ЛксОткрытьФормуЗаменыСсылокИзТабличногоПоля(ЭтаФорма.ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗаполнитьГруппуДублейДляЗамены(Кнопка)
	
	ЛксОткрытьФормуЗаменыСсылокИзТабличногоПоля(ЭтаФорма.ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаШаблонЧтениеИЗаписьСсылочногоОбъекта(Кнопка)
	
	Текст =
	"Объект = СтрокаРезультата.Ссылка.ПолучитьОбъект();
	|
	|// Обработка объекта
	|Объект.Реквизит1 = ?;
	|
	|//Объект.ОбменДанными.Загрузка = Истина;
	|Объект.Записать();";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиСтрокиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиСтрокиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаШаблонЧтениеИЗаписьМенеджераЗаписи(Кнопка)

	Текст =
	"// В результате запроса должны присутствовать все измерения регистра
	|МенеджерЗаписи = РегистрыСведений.Регистр1.СоздатьМенеджерЗаписи();
	|ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаРезультата);
	|МенеджерЗаписи.Прочитать();
	|
	|// Обработка менеджера записи
	|МенеджерЗаписи.Реквизит1 = ;
	|
	|МенеджерЗаписи.Записать();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиСтрокиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиСтрокиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаШаблонЧтениеИЗаписьНабораЗаписей(Кнопка)

	Текст =
	"// В результате запроса должны присутствовать все колонки для отбора
	|НаборДвижений = РегистрыСведений.Регистр1.СоздатьНаборЗаписей();
	|Для Каждого ЭлементОтбора Из НаборДвижений.Отбор Цикл
	|	ЭлементОтбора.Использование = Истина;
	|	ЭлементОтбора.Значение = СтрокаРезультата[ЭлементОтбора.Имя];
	|КонецЦикла;
	|НаборДвижений.Прочитать();
	|// В таком наборе записей будет 0 или 1 строка
	|Для Каждого ДвижениеРегистра Из НаборДвижений Цикл
	|
	|	// Обработка строки
	|	ДвижениеРегистра.Реквизит1 = ;
	|
	|КонецЦикла;
	|//НаборДвижений.ОбменДанными.Загрузка = Истина;
	|НаборДвижений.Записать();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиСтрокиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиСтрокиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаРезультатаШаблонОбходПоГруппировкам(Кнопка)

	Текст =
	"КолонкиРезультата = мРезультатЗапроса.Колонки;
	|Выборка1 = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, КолонкиРезультата.Группировка1.Имя);
	|Индикатор = ЛксПолучитьИндикаторПроцесса(Выборка1.Количество());
	|Пока Выборка1.Следующий() Цикл
	|	ЛксОбработатьИндикатор(Индикатор);
	|	Выборка2 = Выборка1.Выбрать();
	|	Пока Выборка2.Следующий() Цикл
	|	КонецЦикла;
	|КонецЦикла;
	|ЛксОсвободитьИндикаторПроцесса();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаРезультатаСравнитьТекст(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(ирКэш.Получить().МассивСравненияТекстов, ЭлементыФормы.ЗапросРезультата);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыСверткаРезультаты(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛксИзменитьСвернутость(Кнопка.Пометка, ЭлементыФормы.ПанельРезультата, ЭтаФорма.ЭлементыФормы.РазделительГоризонтальный, ЭтаФорма.Панель, "низ");
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаДатыЗаПериод(Кнопка)
	
	Текст = "ВЫБРАТЬ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d) КАК Период 
	|		ИЗ 
	|   (ВЫБРАТЬ 0 КАК a 
	|   ОБЪЕДИНИТЬ   
	|   ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 9) КАК aa 
	|	  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 0 КАК b 
	|	  ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ    
	|	ВЫБРАТЬ 9) КАК bb 
	|	  ПО (ИСТИНА) 
	|	  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 0 КАК c 
	|	  ОБЪЕДИНИТЬ 
	|	ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ    
	|	ВЫБРАТЬ 9) КАК cc 
	|	  ПО (ИСТИНА) 
	|	  ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ 
	|		 0 КАК d 
	|	ОБЪЕДИНИТЬ 
	|	ВЫБРАТЬ 1 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 2 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 3 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 4 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 5 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 6 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 7 
	|   ОБЪЕДИНИТЬ 
	|   ВЫБРАТЬ 8 
	|   ОБЪЕДИНИТЬ    
	|	ВЫБРАТЬ 9) КАК dd 
	|	  ПО (ИСТИНА) 
	|ГДЕ 
	|   aa.a * 1000 + bb.b * 100 + cc.c * 10 + dd.d <= РАЗНОСТЬДАТ(&НачалоПериода, &КонецПериода, ДЕНЬ)";
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаСВыбромМетаданных(ЛиТаблицыИзменения = Ложь) Экспорт

	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", ЭтаФорма, ЭтаФорма);
	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	//лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	ЗначениеВыбора = Форма.ОткрытьМодально();
	Если ЗначениеВыбора <> Неопределено Тогда
		Текст = ирНеглобальный.ПолучитьТекстЗапросаПоВыбраннымМетаданнымЛкс(ЗначениеВыбора, ЛиТаблицыИзменения);
	КонецЕсли; 
	Возврат Текст;

КонецФункции // ПолучитьТекстЗапросаСВыбромМетаданных()

Процедура КоманднаяПанельТекстЗапросаОбъединениеСсылочныхТаблиц(Кнопка)
	
	Текст = ПолучитьТекстЗапросаСВыбромМетаданных();
	Если Не ПустаяСтрока(Текст) Тогда
		ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаОбъединениеСсылочныхТаблицИзменений(Кнопка)
	
	Текст = ПолучитьТекстЗапросаСВыбромМетаданных(Истина);
	Если Не ПустаяСтрока(Текст) Тогда
		ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаОбъединениеРегистраторов(Кнопка)
	
	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", ЭтаФорма, ЭтаФорма);
	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Ложь);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	ЗначениеВыбора = Форма.ОткрытьМодально();
	Если ЗначениеВыбора <> Неопределено Тогда
		Массив = Новый Массив;
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(ЗначениеВыбора.ПолноеИмяОбъекта);
		ПостроительЗапроса = Новый ПостроительЗапроса("ВЫБРАТЬ Т.* ИЗ " + ЗначениеВыбора.ПолноеИмяОбъекта + " КАК Т");
		ПостроительЗапроса.ЗаполнитьНастройки();
		ПоляТаблицы = ПостроительЗапроса.ДоступныеПоля;
		Если ПоляТаблицы.Найти("Регистратор") <> Неопределено Тогда
			Для Каждого ТипРегистратора Из ПоляТаблицы.Регистратор.ТипЗначения.Типы() Цикл
				Регистратор = Метаданные.НайтиПоТипу(ТипРегистратора);
				Массив.Добавить(Регистратор.ПолноеИмя());
			КонецЦикла; 
			Текст = ирНеглобальный.ПолучитьТекстЗапросаПоВыбраннымМетаданнымЛкс(Массив);
			ЛксУстановитьТекстСОткатом(ЭлементыФормы.ТекстЗапроса, Текст);
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаКонсольКода(Кнопка)
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат;
	КонецЕсли; 
	СтруктураПараметров = Новый Структура(); 
	СтруктураПараметров.Вставить("мРезультатЗапроса", мРезультатЗапроса);
	СтруктураПараметров.Вставить("Параметры", ПолучитьСтруктуруПараметров());
	ОперироватьСтруктурой(ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст(), , СтруктураПараметров);
	
КонецПроцедуры

Функция ПолучитьКодОбработкиТаблицыРезультата(ПеременнаяТаблица = "РезультатТаблица", ПеременнаяСтрокаТаблицы = "СтрокаРезультата")
	
	ТекстМодуля = "";
	Если флРаботатьВТранзакции Тогда
		ТекстМодуля = ТекстМодуля + "
		|НачатьТранзакцию();";
	КонецЕсли; 
	ТекстМодуля = ТекстМодуля + "
	|//Индикатор = ЛксПолучитьИндикаторПроцесса(" + ПеременнаяТаблица + ".";
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		ТекстМодуля = ТекстМодуля + "Количество()";
	Иначе
		ТекстМодуля = ТекстМодуля + "Count";
	КонецЕсли; 
	ТекстМодуля = ТекстМодуля + ");
	|Для каждого " + ПеременнаяСтрокаТаблицы + " Из " + ПеременнаяТаблица + " Цикл";
	ТекстОбработкиСтроки = ЭлементыФормы.КодОбработкиСтрокиРезультата.ПолучитьТекст();
	//Если Не ПустаяСтрока(ТекстОбработкиСтроки) Тогда
		ТекстМодуля = ТекстМодуля + "
		|	//ЛксОбработатьИндикатор(Индикатор);
		|	ОбработкаПрерыванияПользователя();
		|	Попытка
		|		// Обработчик строки результата НАЧАЛО";
		Для Счетчик = 1 По СтрЧислоСтрок(ТекстОбработкиСтроки) Цикл
			ТекстМодуля = ТекстМодуля + "
			|		" + СтрПолучитьСтроку(ТекстОбработкиСтроки, Счетчик);
		КонецЦикла;
		ТекстМодуля = ТекстМодуля + "
		|		// Обработчик строки результата КОНЕЦ";
		ТекстМодуля = ТекстМодуля + "
		|	Исключение";
		Если флПропускатьОшибки Тогда 
			ТекстМодуля = ТекстМодуля + "
			|		Сообщить(ОписаниеОшибки());
			|		Продолжить";
		Иначе
			ТекстМодуля = ТекстМодуля + "
			|		ВызватьИсключение";
		КонецЕсли;
		ТекстМодуля = ТекстМодуля + "
		|	КонецПопытки;";
	//КонецЕсли; 
	ТекстМодуля = ТекстМодуля + "
	|КонецЦикла;
	|//ЛксОсвободитьИндикаторПроцесса(Индикатор, Истина);";
	Если флРаботатьВТранзакции Тогда
		ТекстМодуля = ТекстМодуля + "
		|ЗафиксироватьТранзакцию();";
	КонецЕсли;
	Возврат  ТекстМодуля;

КонецФункции

Функция ПолучитьКодПолученияРезультатаЗапроса(ПеременнаяЗапрос = "мОбъектЗапроса", ПеременнаяРезультатЗапроса = "РезультатЗапроса")
	
	ПолучитьРезультирующийЗапрос(мОбъектЗапроса);
	ТекстЗапроса = ирНеглобальный.ПолучитьСтроковыйЛитералИзМногострочногоТекстаЛкс(мОбъектЗапроса.Текст);
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		ТекстМодуля = ПеременнаяЗапрос + " = Новый Запрос;
		|" + ПеременнаяЗапрос + ".Текст = " + ТекстЗапроса + ";";
		Для Каждого СтрокаПараметра Из Параметры Цикл
			Если СтрокаПараметра.ЭтоВыражение = 1 Тогда
				ТекстЗначения = "" + СтрокаПараметра.Значение;
				ПредставлениеЗначения = "";
			Иначе
				ТекстЗначения = "" + СтрокаПараметра.ИмяПараметра;
				ПредставлениеЗначения = "<" + ТипЗнч(СтрокаПараметра.Значение) + ">[" + СтрокаПараметра.Значение + "]";
			КонецЕсли; 
			ТекстМодуля = ТекстМодуля + "
			|" + ПеременнаяЗапрос + ".Параметры.Вставить(""" + СтрокаПараметра.ИмяПараметра + """, " + ТекстЗначения + "); // " + ПредставлениеЗначения;
		КонецЦикла;
	Иначе
		ТекстМодуля = "ЛокаторWMI = Новый COMОбъект(""WbemScripting.SWbemLocator"");
		|" + ПеременнаяЗапрос + " = ЛокаторWMI.ConnectServer(""."", , , , ТекущийЯзыкСистемы());"; 
	КонецЕсли; 
	ТекстПередВыполнением = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
	Если Не ПустаяСтрока(ТекстПередВыполнением) Тогда
		ТекстМодуля = ТекстМодуля + "
		|Параметры = " + ПеременнаяЗапрос + ".Параметры;
		|// Обработчик перед выполнением НАЧАЛО
		|" + ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст() + "
		|// Обработчик перед выполнением КОНЕЦ";
	КонецЕсли; 
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		ТекстМодуля = ТекстМодуля + "
		|" + ПеременнаяРезультатЗапроса + " = " + ПеременнаяЗапрос + ".Выполнить();";
	Иначе
		ТекстМодуля = ТекстМодуля + "
		|" + ПеременнаяРезультатЗапроса + " = " + ПеременнаяЗапрос + ".ExecQuery(" + ТекстЗапроса + ");";
	КонецЕсли; 
	Возврат ТекстМодуля;

КонецФункции

Процедура КоманднаяПанельОбработкаСтрокиРезультатаПолучитьТекст(Кнопка)
	
	ПеременнаяРезультатЗапроса = "РезультатЗапроса";
	ТекстМодуля = ПолучитьКодПолученияРезультатаЗапроса(, ПеременнаяРезультатЗапроса);
	ПеременнаяТаблица = "РезультатТаблица";
	ТекстМодуля = ТекстМодуля + "
	|" + ПеременнаяТаблица + " = " + ПеременнаяРезультатЗапроса;
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		ТекстМодуля = ТекстМодуля + ".Выгрузить()";
	КонецЕсли; 
	ТекстМодуля = ТекстМодуля + ";";
	ТекстМодуля = ТекстМодуля + ПолучитьКодОбработкиТаблицыРезультата(ПеременнаяТаблица);
    ирНеглобальный.ПоместитьТекстВБуферОбменаОСЛкс(ТекстМодуля);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаПолучитьТекст(Кнопка)
	
	ТекстМодуля = ПолучитьКодПолученияРезультатаЗапроса();
    ирНеглобальный.ПоместитьТекстВБуферОбменаОСЛкс(ТекстМодуля);
	ТекстОбработкиРезультата = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
	Если Не ПустаяСтрока(ТекстОбработкиРезультата) Тогда
		ТекстМодуля = ТекстМодуля + "
		|// Обработчик результата НАЧАЛО
		|" + ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст() + "
		|// Обработчик результата КОНЕЦ";
	КонецЕсли; 
    ирНеглобальный.ПоместитьТекстВБуферОбменаОСЛкс(ТекстМодуля);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкаСтрокиРезультатаКонсольКода(Кнопка)
	
	Если мРезультатЗапроса = Неопределено Тогда
		Предупреждение("Сначала нужно выполнить запрос", 10);
		Возврат;
	КонецЕсли; 
	СтруктураПараметров = Новый Структура();
	Если ТипЗнч(мРезультатЗапроса) = Тип("РезультатЗапроса") Тогда
		СтруктураПараметров.Вставить("РезультатТаблица", РезультатТаблица);
	Иначе
		СтруктураПараметров.Вставить("РезультатТаблица", мРезультатЗапроса);
	КонецЕсли; 
	СтруктураПараметров.Вставить("Параметры", ПолучитьСтруктуруПараметров());
	ТекстАлгоритма = ПолучитьКодОбработкиТаблицыРезультата();
	ОперироватьСтруктурой(ТекстАлгоритма, , СтруктураПараметров);
	
КонецПроцедуры

Процедура ПараметрыТипЗначенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ирНеглобальный.РедактироватьОписаниеТиповЛкс(Элемент);
	ирНеглобальный.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(ЭлементыФормы.Параметры, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРежимТранзакции(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	Параметры.ВыполнятьВТранзакции = Кнопка.Пометка;
	
КонецПроцедуры

Процедура КоманднаяПанельПередВыполнениемЗапросаВыполнить(Кнопка)
	
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ВыполнитьПрограммныйКод();

КонецПроцедуры

Процедура КоманднаяПанельПередВыполнениемЗапросаКонсольКода(Кнопка)
	
	//мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	//Если Не ПолучитьПараметрыИзЗапроса() Тогда 
	//	Возврат;
	//КонецЕсли;
	УстановитьПараметрыЗапроса();
	СтруктураПараметров = ПолучитьСтруктуруПараметров();
	СтруктураПараметров.Вставить("мОбъектЗапроса", мОбъектЗапроса);
	ОперироватьСтруктурой(ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст(), , СтруктураПараметров);
	
КонецПроцедуры

Процедура ПараметрыЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.Параметры.ТекущаяСтрока.Значение);

КонецПроцедуры

Процедура МенюДереваЗапросаОткрытьФормуСписка(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(ТекущаяСтрока.Текст);
	Если Фрагменты.Количество() > 1 Тогда
		ПолноеИмяМД = Фрагменты[0] + "." + Фрагменты[1];
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
		Если ОбъектМетаданных <> Неопределено Тогда
			Если ирНеглобальный.ЛиТипВнешнегоИсточникаДанных(ОбъектМетаданных) Тогда
				ПолноеИмяМД = ТекущаяСтрока.Текст;
			КонецЕсли; 
			ОткрытьФорму(ПолноеИмяМД + ".ФормаСписка");
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаРедакторОбъектаБД(Кнопка)
	
	ирНеглобальный.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоРедакторОбъектаБД(Кнопка)

	ирНеглобальный.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаКонсольКомпоновки(Кнопка)
	
    Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоТаблицеЗначений(РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоОткрытьТаблицу(Кнопка)

	ирНеглобальный.ОткрытьФормуПроизвольногоЗначенияЛкс(РезультатДерево, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаОткрытьТаблицу(Кнопка)
	
	ирНеглобальный.ОткрытьФормуПроизвольногоЗначенияЛкс(РезультатТаблица, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаЧтениеИЗаписьТабличнойЧасти(Кнопка)
	
	Текст = 
	"// В запросе должны присутствовать ИТОГИ ПО полю ссылки
	|ИмяКолонкиСсылки = мРезультатЗапроса.Колонки.Ссылка.Имя; // Ссылка - имя колонки, содержащей ссылку на объект
	|ИмяКолонкиНомераСтроки = мРезультатЗапроса.Колонки.НомерСтроки.Имя; // НомерСтроки - имя колонки, содержащей номер строки табличной части
	|Выборка1 = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяКолонкиСсылки); 
	|Индикатор = ЛксПолучитьИндикаторПроцесса(Выборка1.Количество());
	|Пока Выборка1.Следующий() Цикл
	|	ЛксОбработатьИндикатор(Индикатор);
	|	Объект = Выборка1.Ссылка.ПолучитьОбъект(); // Ссылка - имя колонки, содержащей ссылку на объект
	|	Выборка2 = Выборка1.Выбрать();
	|	Пока Выборка2.Следующий() Цикл
	|		ТабличнаяЧасть = Объект.ТабличнаяЧасть1; // ТабличнаяЧасть1 - имя табличной части
	|		ИндексСтроки = Выборка2[ИмяКолонкиНомераСтроки] - 1;
	|		СтрокаТабличнойЧасти = ТабличнаяЧасть[ИндексСтроки];
	|
	|		// Обработка Строки
	|		СтрокаТабличнойЧасти.Реквизит1 = ;
	|
	|	КонецЦикла;
	|	//Объект.ОбменДанными.Загрузка = Истина;
	|	Объект.Записать();
	|КонецЦикла;
	|ЛксОсвободитьИндикаторПроцесса();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельОбработкиРезультатаЧтениеИЗаписьНабораЗаписей(Кнопка)
	
	Текст = 
	"// В запросе должны присутствовать ИТОГИ ПО полю регистратора
	|НаборДвижений = РегистрыСведений.Регистр1.СоздатьНаборЗаписей(); // РегистрыСведений.Регистр1 - регистр, подчиненный регистратору
	|ИмяКолонкиРегистратора = мРезультатЗапроса.Колонки.Регистратор.Имя; // Регистратор - имя колонки, содержащей ссылку регистратора набора записей
	|ИмяКолонкиНомераСтроки = мРезультатЗапроса.Колонки.НомерСтроки.Имя; // НомерСтроки - имя колонки, содержащей номер строки набора записей
	|Выборка1 = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ИмяКолонкиРегистратора);
	|Индикатор = ЛксПолучитьИндикаторПроцесса(Выборка1.Количество());
	|Пока Выборка1.Следующий() Цикл
	|	ЛксОбработатьИндикатор(Индикатор);
	|	НаборДвижений.Отбор.Регистратор.Установить(Выборка1[ИмяКолонкиРегистратора]); 
	|	НаборДвижений.Прочитать();
	|	Выборка2 = Выборка1.Выбрать();
	|	Пока Выборка2.Следующий() Цикл
	|		ИндексСтроки = Выборка2[ИмяКолонкиНомераСтроки] - 1;
	|		ДвижениеРегистра = НаборДвижений[ИндексСтроки];
	|		
	|		// Обработка строки
	|		ДвижениеРегистра.Реквизит1 = ;
	|		
	|	КонецЦикла;
	|	//НаборДвижений.ОбменДанными.Загрузка = Истина;
	|	НаборДвижений.Записать();
	|КонецЦикла;
	|ЛксОсвободитьИндикаторПроцесса();
	|";
	
	ЛксУстановитьТекстСОткатом(ЭлементыФормы.КодОбработкиРезультата, Текст);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодОбработкиРезультата;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыДобавитьСтандартныйПериод(Кнопка)
	
	ИмяПараметраПериод = "Период";
	СтрокаПараметра = Параметры.Найти(ИмяПараметраПериод, "ИмяПараметра");
	Если СтрокаПараметра <> Неопределено Тогда
		Если ТипЗнч(СтрокаПараметра.Значение) = Тип("СтандартныйПериод") Тогда
			Если РедактироватьСтандартныйПериод(СтрокаПараметра.Значение) Тогда
				ВычислитьПараметрыЗапроса();
			КонецЕсли; 
		Иначе
			Предупреждение("Параметр с именем """ + ИмяПараметраПериод + """ найден, но он имеет некорректный тип");
		КонецЕсли; 
		Возврат;
	КонецЕсли; 
	СтрокаПериода = Параметры.Добавить();
	СтрокаПериода.ИмяПараметра = ИмяПараметраПериод;
	СтандартныйПериод = Новый СтандартныйПериод;
	СтандартныйПериод.Вариант = ВариантСтандартногоПериода.Сегодня;
	СтрокаПериода.Значение = СтандартныйПериод;
	СтрокаПериода.ЭтоВыражение = Ложь;
	
	СтрокаНачалаПериода = Параметры.Добавить();
	СтрокаНачалаПериода.ИмяПараметра = "НачалоПериода";
	СтрокаНачалаПериода.Выражение = "лПараметры.Период.ДатаНачала";
 	СтрокаНачалаПериода.ЭтоВыражение = Истина;

	СтрокаКонцаПериода = Параметры.Добавить();
	СтрокаКонцаПериода.ИмяПараметра = "КонецПериода";
	СтрокаКонцаПериода.Выражение = "лПараметры.Период.ДатаОкончания";
	СтрокаКонцаПериода.ЭтоВыражение = Истина;
	
	ВычислитьПараметрыЗапроса();
	УправлениеКолонкамиПараметры();
	
КонецПроцедуры

Процедура ПараметрыВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоВыражение = Истина Тогда
		ЗначенияПараметров = ПолучитьСтруктуруПараметров();
		ОбработкаВводаФормулы = Обработки.ирВводВыраженияВстроенногоЯзыка.Создать();
		ОбработкаВводаФормулы.Инициализировать(ЭтаФорма, ТекущиеДанные.Выражение, , , ЗначенияПараметров);
		ФормаВводаВыражения = ОбработкаВводаФормулы.ПолучитьФорму(, ЭтаФорма);
		ФормаВводаВыражения.Открыть();
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры


Процедура КоманднаяПанельПараметрыОбновитьВычисляемые(Кнопка)
	
	ВычислитьПараметрыЗапроса();
	
КонецПроцедуры

Процедура ПараметрыЗначениеПриИзменении(Элемент = Неопределено)
	
	ВычислитьПараметрыЗапроса();
	
КонецПроцедуры

Функция РедактироватьСтандартныйПериод(СтандартныйПериод)
	
	КонецПериода = СтандартныйПериод.ДатаОкончания;
	НачалоПериода = СтандартныйПериод.ДатаНачала;
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		СтандартныйПериод.ДатаНачала = НастройкаПериода.ПолучитьДатуНачала();
		СтандартныйПериод.ДатаОкончания = НастройкаПериода.ПолучитьДатуОкончания();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ПараметрыЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		#Если _ Тогда
		    Элемент.Значение = Новый СтандартныйПериод
		#КонецЕсли
		Если РедактироватьСтандартныйПериод(Элемент.Значение) Тогда
			ПараметрыЗначениеПриИзменении();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСсылкаНаОбъектБД(Кнопка)
	
	ЭкземплярКомпоненты = ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка);
	СтрокаПараметра = ЭкземплярКомпоненты.ВставитьСсылкуНаОбъектБД(ЭлементыФормы.Параметры, "ИмяПараметра", , "Параметры");
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗагрузитьПолностью(Кнопка)
	
	ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПолностьюЛкс(ЭтаФорма, мВыборкаРезультата, ЭлементыФормы.КоманднаяПанельТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаПерейтиКРодительскомуУзлу(Кнопка)
	
	Если Не СохранитьТекущийПодзапрос() Тогда 
		Возврат;
	КонецЕсли;
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если Ложь
		Или ТекущаяСтрока = Неопределено 
		Или ТекущаяСтрока.Родитель = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ТекущаяСтрока.Родитель;
	Если Ложь
		Или Не мРежимСворачивания 
		Или Не ЛиСворачиваемыйТипУзла(ТекущаяСтрока.ТипУзла)
	Тогда
		ОтносительнаяНачальнаяСтрока = ТекущаяСтрока.СтрокаДанных.НачальнаяСтрока - ТекущаяСтрока.Родитель.СтрокаДанных.НачальнаяСтрока + 1;
		ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(ОтносительнаяНачальнаяСтрока, 1, ОтносительнаяНачальнаяСтрока, 1);
	Иначе
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.НайтиПоказатьСловоВТексте(ТекущаяСтрока.Псевдоним);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимТранзакции.Пометка = ВыполнятьВТранзакции;
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаРезультатаВыполнитьАнализТехножурнала(Кнопка)
	
	Если мАнализТехножурнала <> Неопределено Тогда
		мАнализТехножурнала.ПоказатьТрассу(, "СтрокаМодуля",, 0);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросаРезультатаНастройкаТехножурнала(Кнопка)
	
	ФормаНастройки = Обработки.ирНастройкаТехножурнала.ПолучитьФорму();
	ФормаНастройки.Открыть();
	ФормаНастройки.НаСервере = Не ирКэш.Получить().ЭтоФайловаяБаза;
	ФормаНастройки.ПриИзмененииПравилаПолученияФайлаНастройки();
	Если 1=1 Тогда
		Если ирКэш.ЭтоФайловаяБазаЛкс() Тогда
			Ответ = Вопрос("Хотите загрузить рекомендуемую настройку для трассировки запросов под текущим пользователем?",
				РежимДиалогаВопрос.ОКОтмена);
		Иначе
			Ответ = Вопрос("Хотите загрузить рекомендуемую настройку для трассировки запросов в текущей базе под текущим пользователем?",
				РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаНастройки.ЗагрузитьФайлНастройки("ШаблонТрассировкаЗапросов", Истина, Истина, Ложь);
			СтрокаКаталога = ФормаНастройки.ТабличноеПолеЖурналы[0];
			ФормаНастройки.ЭлементыФормы.ТабличноеПолеЖурналы.ТекущаяСтрока = СтрокаКаталога;
			ФормаЖурнала = ФормаНастройки.ОткрытьФормуРедактированияЖурнала();
			ТабличноеПолеСписокСобытий = ФормаЖурнала.ЭлементыФормы.ТабличноеПолеСписокСобытий;
			Для Каждого СтрокаТП Из ТабличноеПолеСписокСобытий.Значение Цикл
				ТабличноеПолеСписокСобытий.ВыделенныеСтроки.Добавить(СтрокаТП);
			КонецЦикла;
			ФормаЖурнала.КП_ДетальныйФильтрСобытийТекущийПользователь();
			Если Не ирКэш.ЭтоФайловаяБазаЛкс() Тогда
				// К сожалению в файловой СУБД это свойство не заполняется
				ФормаЖурнала.КП_ДетальныйФильтрСобытийТекущаяБаза();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	//ФормаЖурнала.УстановитьТекущуюСтрокуСобытия("SDBL");
	
КонецПроцедуры

Процедура ДеревоЗапросовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ТипЗапроса = "Компоновка" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирСхемаКомпоновкиДанных);
	ИначеЕсли ДанныеСтроки.ТипЗапроса = "Построитель" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирПостроительЗапроса);
	ИначеЕсли ДанныеСтроки.ТипЗапроса = "Обычный" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирЗапрос);
	ИначеЕсли ДанныеСтроки.ТипЗапроса = "WQL" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирWMI);
	ИначеЕсли ДанныеСтроки.ТипЗапроса = "ADO" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирADO);
	Иначе //Если ДанныеСтроки.ТипЗапроса = "Папка" Тогда
		ОформлениеСтроки.Ячейки.Запрос.УстановитьКартинку(БиблиотекаКартинок.ирПапка);
		ОформлениеСтроки.Ячейки.НовыйМенеджерВремменныхТаблиц.ТолькоПросмотр = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура МенюДереваЗапросовДобавитьПапку(Кнопка)
	
	ТекущийРодитель = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоЗапросов;
	КонецЕсли; 
	НоваяСтрока = ТекущийРодитель.Строки.Добавить();
	НоваяСтрока.ТипЗапроса = "Папка";
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
	ЭлементыФормы.ДеревоЗапросов.ИзменитьСтроку();
	
КонецПроцедуры

Процедура КоманднаяПанельТабличныйДокументАвтосумма(Кнопка)
	
	ЭтаФорма.Автосумма = Не Кнопка.Пометка;
	Кнопка.Пометка = Автосумма;
	ЭлементыФормы.РезультатТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.РезультатТабличныйДокумент.ТекущаяОбласть;

КонецПроцедуры

Процедура РезультатТабличныйДокументПриАктивизацииОбласти(Элемент)
	
	Если Автосумма Тогда
		ТекстКнопки = ирНеглобальный.ПолеТабличногоДокумента_ПолучитьПредставлениеСуммыВыделенныхЯчеекЛкс(Элемент);
	Иначе
		ТекстКнопки = "";
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельТабличныйДокумент.Кнопки.Автосумма.Текст = ТекстКнопки;

КонецПроцедуры

Процедура КоманднаяПанельТабличныйДокументСравнить(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(мСравнительТабличныхДокументов, ЭлементыФормы.РезультатТабличныйДокумент);
	
КонецПроцедуры

Процедура РезультатТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	#Если _ Тогда
	    мДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	#КонецЕсли
	ЗначенияПолей = мДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля();
	Если ЗначенияПолей.Количество() > 0 Тогда
		ОткрытьЗначение(ЗначенияПолей[0].Значение);
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура НастроитьКолонкиТаблицыРезультата()
	
	КоличествоСтрокВТаблице = РезультатТаблица.Количество();
	ВыполнятьАнализДанных = КоличествоСтрокВТаблице < 10000;
	Для Каждого Колонка Из ЭлементыФормы.РезультатТаблица.Колонки Цикл
		Колонка.ТолькоПросмотр = Истина;
		Колонка.ОтображатьИтогиВПодвале = ПоказыватьИтогиТаблицы;
		КолонкаТЗ = РезультатТаблица.Колонки[Колонка.Данные];
		Если Истина
			И КолонкаТЗ.ТипЗначения.СодержитТип(Тип("Строка"))
			И (Ложь
				Или КолонкаТЗ.ТипЗначения.КвалификаторыСтроки.Длина = 0 
				Или КолонкаТЗ.ТипЗначения.КвалификаторыСтроки.Длина > 100)
		Тогда
			Колонка.Ширина = 20;
		КонецЕсли; 
		Если ВыполнятьАнализДанных Тогда
			ОписаниеТиповБезNull = Новый ОписаниеТипов(КолонкаТЗ.ТипЗначения, , "NUll");
			ПустыеСтрокиБезNUll = РезультатТаблица.НайтиСтроки(Новый Структура(Колонка.Данные, ОписаниеТиповБезNull.ПривестиЗначение()));
			ПустыеСтрокиNull = РезультатТаблица.НайтиСтроки(Новый Структура(Колонка.Данные, Null));
			Если ПустыеСтрокиБезNUll.Количество() + ПустыеСтрокиNull.Количество() = КоличествоСтрокВТаблице Тогда
				Колонка.Ширина = 5;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.РезультатТаблица.Подвал = ПоказыватьИтогиТаблицы;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПоказыватьИтоги(Кнопка)
	
	ПоказыватьИтогиТаблицы = Не Кнопка.Пометка;
	Кнопка.Пометка = ПоказыватьИтогиТаблицы;
	НастроитьКолонкиТаблицыРезультата();
	
КонецПроцедуры

Процедура МенюДереваЗапросаВыполнитьВсеПодзапросы(Кнопка)
	
	ВсеСтрокиДерева = ирНеглобальный.ПолучитьВсеСтрокиДереваЗначенийЛкс(ДеревоЗапроса);
	ЕщеНеВыполненные = ДеревоЗапроса.Строки.НайтиСтроки(Новый Структура("ДлительностьПолная", Неопределено), Истина);
	НеУчаствующие = ДеревоЗапроса.Строки.НайтиСтроки(Новый Структура("ДлительностьПолная", ""), Истина);
	ВыполнятьУжеВыполненные = Истина;
	Если Истина
		И ЕщеНеВыполненные.Количество() > 0 
		И ВсеСтрокиДерева.Количество() <> НеУчаствующие.Количество() + ЕщеНеВыполненные.Количество()
	Тогда
		Ответ = Вопрос("Хотите выполнить только еще не выполненные подзапросы?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВыполнятьУжеВыполненные = Ложь;
		КонецЕсли;
	КонецЕсли; 
	Индикатор = ЛксПолучитьИндикаторПроцесса(ВсеСтрокиДерева.Количество());
	ВыполнитьВсеПодзапросыСтрокиДереваЗапросов(, ВыполнятьУжеВыполненные, Индикатор);
	ЛксОсвободитьИндикаторПроцесса();
	
КонецПроцедуры

Процедура ВыполнитьВсеПодзапросыСтрокиДереваЗапросов(СтрокаДереваЗапроса = Неопределено, ВыполнятьУжеВыполненные = Истина, Индикатор = Неопределено)
	
	Если СтрокаДереваЗапроса = Неопределено Тогда
		СтрокаДереваЗапроса = ДеревоЗапроса.Строки[0];
	КонецЕсли;
	ЛксОбработатьИндикатор(Индикатор);
	Если Ложь
		Или СтрокаДереваЗапроса.ДлительностьПолная = Неопределено 
		Или ВыполнятьУжеВыполненные
	Тогда
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаДереваЗапроса;
		ВыполнитьЗапрос();
	КонецЕсли;
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		ОбработкаПрерыванияПользователя();
		Если Не ирНеглобальный.СтрокиРавныЛкс(ДочерняяСтрока.ТипУзла, "<ChooseTable>") Тогда
			ВыполнитьВсеПодзапросыСтрокиДереваЗапросов(ДочерняяСтрока, ВыполнятьУжеВыполненные, Индикатор);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

// WMI

Процедура ДобавитьСтруктуруВСтрокуТаблицаЗначений(ТекущаяСтрокаТаблицы, ДобавляемаяСтруктура)
	
	ТаблицаЗначений = ТекущаяСтрокаТаблицы.Владелец();
	Колонки = ТаблицаЗначений.Колонки;
	Для Каждого ЭлементСтруктуры Из ДобавляемаяСтруктура Цикл
		Если Неопределено = Колонки.Найти(ЭлементСтруктуры.Ключ) Тогда 
			ПолеНабораДанных = мСхемаКомпоновки.НаборыДанных.Основной.Поля.Найти(ЭлементСтруктуры.Ключ);
			Если ПолеНабораДанных <> Неопределено Тогда
				ОписаниеТипов = Новый ОписаниеТипов(ПолеНабораДанных.ТипЗначения); // Типизация
			Иначе
				ОписаниеТипов = Новый ОписаниеТипов();
			КонецЕсли; 
			Колонки.Добавить(ЭлементСтруктуры.Ключ, ОписаниеТипов);
		КонецЕсли;
		ТекущаяСтрокаТаблицы[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
	КонецЦикла
	
КонецПроцедуры

Функция ПреобразоватьРезультатыWMIвТаблицуЗначений(ТаблицаWMI = Неопределено, РезультатыWMI, Знач СобиратьСистемныеСвойства = Ложь, 
	Знач СобиратьМетоды = Ложь, Знач ПолучатьПуть = Ложь, Знач ПолучатьЗначениеWMI = Ложь, ЗагружатьЭлементов = 100000) Экспорт
		
	Если ТаблицаWMI = Неопределено Тогда
		ТаблицаWMI = Новый ТаблицаЗначений;
	КонецЕсли; 
	ТаблицаWMI = Новый ТаблицаЗначений;
	Если ПолучатьЗначениеWMI Тогда 
		ТаблицаWMI.Колонки.Добавить("Значение");
	КонецЕсли;
	Если ПолучатьПуть Тогда 
		ТаблицаWMI.Колонки.Добавить("Path", Новый ОписаниеТипов("Строка")); // Типизация
	КонецЕсли;
	Если СобиратьМетоды Тогда
		ТаблицаWMI.Колонки.Добавить("Methods");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружатьЭлементов) Тогда
		КоличествоЭлементов = Мин(ЗагружатьЭлементов, РезультатыWMI.Count);
	Иначе
		КоличествоЭлементов = РезультатыWMI.Count;
	КонецЕсли; 
	Индикатор = ЛксПолучитьИндикаторПроцесса(КоличествоЭлементов, "Загрузка результата");
	СчетчикЭлементов = 0;
	Для Каждого ЗначениеWMI Из РезультатыWMI Цикл
		Если Индикатор.Счетчик = КоличествоЭлементов Тогда
			Прервать;
		КонецЕсли; 
		ЛксОбработатьИндикатор(Индикатор);
		СтрокаТаблицыWMI = ТаблицаWMI.Добавить();
		Если ПолучатьЗначениеWMI Тогда 
			СтрокаТаблицыWMI.Значение = ЗначениеWMI;
		КонецЕсли;
		Свойства = ирНеглобальный.ПолучитьСтруктуруИзЗначенияWMIЛкс(ЗначениеWMI.Properties_);
		//ДобавитьСтруктуруВСтрокуТаблицаЗначений(СтрокаТаблицыWMI, Свойства);
		Если Индикатор.Счетчик = 1 Тогда
			//ТаблицаWMI.Колонки.Добавить("_Object");
			ЗаполнитьКолонкиТаблицыИзСвойствWMI(ТаблицаWMI, ЗначениеWMI.Properties_);
		КонецЕсли; 
		//СтрокаТаблицыWMI["_Object"] = ЗначениеWMI;
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыWMI, Свойства); 
		Если СобиратьСистемныеСвойства Тогда 
			СистемныеСвойства = ирНеглобальный.ПолучитьСтруктуруИзЗначенияWMIЛкс(ЗначениеWMI.SystemProperties_);
			//ДобавитьСтруктуруВСтрокуТаблицаЗначений(СтрокаТаблицыWMI, СистемныеСвойства);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыWMI, СистемныеСвойства); 
		КонецЕсли;
		Если ПолучатьПуть Тогда 
			СтрокаТаблицыWMI.Path = ЗначениеWMI.Path_.Path;
		КонецЕсли;
		
		Если СобиратьМетоды Тогда 
			СтрокаТаблицыWMI.Methods = Новый Массив;
			Для Каждого МетодWMI из ЗначениеWMI.Methods_ Цикл
				ОписаниеМетода = "Метод: " + МетодWMI.Name;
				Если МетодWMI.InParameters <> Неопределено Тогда 
					Для Каждого ПараметрWMI из МетодWMI.InParameters.Properties_ Цикл
						КвалификаторыПраметра = ирНеглобальный.ПолучитьСтруктуруИзЗначенияWMIЛкс(ПараметрWMI.Qualifiers_);
						ОписаниеМетода = ОписаниеМетода + Символы.ПС + "Входной параметр: " + ПараметрWMI.Name;
					КонецЦикла;
				КонецЕсли;
				Если МетодWMI.OutParameters <> Неопределено Тогда 
					Для Каждого ПараметрWMI из МетодWMI.OutParameters.Properties_ Цикл
						КвалификаторыПраметра = ирНеглобальный.ПолучитьСтруктуруИзЗначенияWMIЛкс(ПараметрWMI.Qualifiers_);
						ОписаниеМетода = ОписаниеМетода + Символы.ПС + "Выходной параметр: " + ПараметрWMI.Name;
					КонецЦикла;
				КонецЕсли;
				СтрокаТаблицыWMI.Methods.Добавить(ОписаниеМетода);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ЛксОсвободитьИндикаторПроцесса();
	//Если КоличествоЭлементов < РезультатыWMI.Count Тогда
	//	Сообщить("Результат загружен частично " + КоличествоЭлементов + " из " + РезультатыWMI.Count + " элементов!");
	//КонецЕсли; 
	Возврат ТаблицаWMI;
	
КонецФункции

Процедура КлассыWMIКоманднаяПанельОбновить(Кнопка)
	
	ОбновитьКлассыWMI();

КонецПроцедуры

Процедура ОбновитьКлассыWMI()
	
	ТекущаяСтрока = ЭлементыФормы.КлассыWMI.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		КлючТекущейСтроки = ТекущаяСтрока.Имя;
	КонецЕсли; 
	КлассыWMI.Очистить();
	мWMIService = ПолучитьWMIСлужбу();
	Если мWMIService = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЛксСостояние("Запрос классов WMI");
	wbemFlagUseAmendedQualifiers = 131072; //&H20000
	КоллекцияКлассов = мWMIService.SubclassesOf(, wbemFlagUseAmendedQualifiers);
	Индикатор = ЛксПолучитьИндикаторПроцесса(КоллекцияКлассов.Count, "Загрузка классов WMI");
	Для Каждого ЭлементКоллекции Из КоллекцияКлассов Цикл
		ЛксОбработатьИндикатор(Индикатор);
		СтрокаКласса = КлассыWMI.Добавить();
		СтрокаКласса.Имя = ЭлементКоллекции.Path_.Class;
		СтрокаКласса.Описание = ирНеглобальный.ПолучитьОписаниеЭлементаWMIЛкс(ЭлементКоллекции);
	КонецЦикла;
	ЛксОсвободитьИндикаторПроцесса();
	КлассыWMI.Сортировать("Имя");
	
	Если КлючТекущейСтроки <> Неопределено Тогда
		ТекущаяСтрока = КлассыWMI.Найти(КлючТекущейСтроки);
		Если ТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормы.КлассыWMI.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры


Процедура КлассыWMIВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ЭтаФорма.ТекущийКлассWMI = Элемент.ТекущаяСтрока.Имя;
	НастроитьКомпоновщикWMI();
	Если ВыполнятьПриВыбореТаблицы Тогда
		ВыполнитьЗапрос();
	КонецЕсли; 
	
КонецПроцедуры

Процедура НастроитьКомпоновщикWMI(ЗагружатьСписокКлассов = Ложь)
	
	Если Истина
		И ЗагружатьСписокКлассов
		И КлассыWMI.Количество() = 0 
	Тогда
		ОбновитьКлассыWMI();
	КонецЕсли; 
	мWMIService = ПолучитьWMIСлужбу();
	wbemFlagUseAmendedQualifiers = 131072; //&H20000
	ОписаниеКласса = мWMIService.Get(ТекущийКлассWMI, wbemFlagUseAmendedQualifiers);
	ТаблицаКласса = Новый ТаблицаЗначений;
	МассивКоллекцийСвойств = Новый Массив();
	МассивКоллекцийСвойств.Добавить(ОписаниеКласса.Properties_);
	//Если СобиратьСистемныеСвойстваWMI Тогда
	//	МассивКоллекцийСвойств.Добавить(ОписаниеКласса.SystemProperties_);
	//КонецЕсли; 
	Для Каждого КоллекцияСвойств Из МассивКоллекцийСвойств Цикл
		ЗаполнитьКолонкиТаблицыИзСвойствWMI(ТаблицаКласса, КоллекцияСвойств);
	КонецЦикла;
	мСхемаКомпоновки = ЛксСоздатьСхемуПоТаблицамЗначений(Новый Структура("Основной", ТаблицаКласса), , , , Ложь);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки);
	Компоновщик.Инициализировать(ИсточникНастроек);

КонецПроцедуры

Функция ПолучитьWMIСлужбу()

	Если мWMIService = Неопределено Тогда
		мWMIService = ирКэш.ПолучитьCOMОбъектWMIЛкс();
	КонецЕсли; 
	Возврат мWMIService;

КонецФункции

Процедура ЗаполнитьКолонкиТаблицыИзСвойствWMI(ТаблицаКласса, КоллекцияСвойств)

	//КлючПоиска = Новый Структура();
	//КлючПоиска.Вставить("Класс", ТекущийКлассWMI);
	Для Каждого Свойство Из КоллекцияСвойств Цикл
		ИмяТипа = ирНеглобальный.ПолучитьИмяТипаИзКвалификаторовWMIЛкс(Свойство);
		Попытка
			ОписаниеТипов = Новый ОписаниеТипов(ИмяТипа,,,, Новый КвалификаторыСтроки(1024)); // Доделать распознавание типов
		Исключение
			ОписаниеТипов = СвойстваСтрокиРезультата.Колонки.Значение.ТипЗначения;
		КонецПопытки;
		//КлючПоиска.Вставить("Имя", Свойство.Name);
		//НайденныеСтроки = мТаблицаСвойствWMI.НайтиСтроки(КлючПоиска);
		//Если НайденныеСтроки.Количество() > 0 Тогда
		//	ПредставлениеСвойства = НайденныеСтроки[0].Представление;
		//Иначе
		//	ПредставлениеСвойства = Неопределено;
		//КонецЕсли; 
		ПредставлениеСвойства = ирНеглобальный.ПолучитьОписаниеЭлементаWMIЛкс(Свойство, "DisplayName");
		ТаблицаКласса.Колонки.Добавить(Свойство.Name, ОписаниеТипов, ПредставлениеСвойства);
	КонецЦикла;

КонецПроцедуры

Процедура СвойстваСтрокиРезультатаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	КвалификаторыЧисла = ДанныеСтроки.ТипЗначения.КвалификаторыЧисла;
	#Если _ Тогда
	    КвалификаторыЧисла = Новый КвалификаторыЧисла;
	#КонецЕсли
	ФорматнаяСтрока = "ЧН=; ЧЦ=" + КвалификаторыЧисла.Разрядность + "; ЧДЦ=0" + КвалификаторыЧисла.РазрядностьДробнойЧасти;
	ОформлениеСтроки.Ячейки.Значение.УстановитьТекст(Формат(ДанныеСтроки.Значение, ФорматнаяСтрока));
	ирНеглобальный.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки,
		ЭлементыФормы.КоманднаяПанельТаблица.Кнопки.Пустые.Пометка, "Значение");
	
КонецПроцедуры

Процедура СвойстваСтрокиРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура РезультатТаблицаПриАктивизацииСтроки(Элемент)
	
	ЗаполнитьТаблицуСвойствСтрокиРезультата();
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуСвойствСтрокиРезультата()
	
	Для Каждого СтрокаСвойства Из СвойстваСтрокиРезультата Цикл
		Если ЭлементыФормы.РезультатТаблица.ТекущаяСтрока <> Неопределено Тогда
			СтрокаСвойства.Значение = ЭлементыФормы.РезультатТаблица.ТекущаяСтрока[СтрокаСвойства.Имя];
		Иначе
			СтрокаСвойства.Значение = Неопределено;
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Функция мПолучитьЗапросWMI(ПринудительноИзКонструктора = Ложь)
	
	ПанельЗапроса = ЭлементыФормы.ПанельЗапроса;
	Если Истина
		И ПанельЗапроса.ТекущаяСтраница = ПанельЗапроса.Страницы.ТекстЗапроса
		И Не ПринудительноИзКонструктора
	Тогда
		Результат = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Иначе
		Компоновщик.Восстановить();
		НастройкаКомпоновкиДанных = Компоновщик.Настройки;
		Если НастройкаКомпоновкиДанных.Структура.Количество() = 0 Тогда
			ирНеглобальный.НайтиДобавитьЭлементСтруктурыГруппировкаКомпоновкиЛкс(НастройкаКомпоновкиДанных.Структура);
		КонецЕсли; 
		СтрокаПорядка = ЛксПолучитьСтрокуПорядкаКомпоновки(НастройкаКомпоновкиДанных.Порядок);
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ТекстПоля = "";
		ТекстГДЕ = "";
		ТекстПорядок = "";
		Если МакетКомпоновки.НаборыДанных.Количество() > 0 Тогда
			Для Каждого Поле Из МакетКомпоновки.НаборыДанных.Основной.Поля Цикл
				Если ТекстПоля <> "" Тогда
					ТекстПоля = ТекстПоля + ", " + Символы.ПС;
				КонецЕсли; 
				ТекстПоля = ТекстПоля + Символы.Таб + Поле.ПутьКДанным;
			КонецЦикла;
			//ТекстГДЕ = МакетКомпоновки.НаборыДанных.Основной.Отбор; 
			ТекстГДЕ = ирНеглобальный.ПолучитьВыражениеОтбораКомпоновкиНаЯзыкеЛкс(НастройкаКомпоновкиДанных.Отбор, "WQL");
			ТекстПорядок = ирНеглобальный.ПолучитьВыражениеПорядкаКомпоновкиНаЯзыкеЛкс(НастройкаКомпоновкиДанных.Порядок,,,"WQL"); 
		КонецЕсли; 
		Если Ложь 
			Или Не ЗначениеЗаполнено(ТекстПоля)
			Или ВыбратьВсеПоля
		Тогда
			ТекстПоля = "*";
		КонецЕсли; 
		Результат = 
		"SELECT 
		|" + ТекстПоля + " 
		|FROM " + ТекущийКлассWMI;
		Если ЗначениеЗаполнено(ТекстГДЕ) Тогда
			Результат = Результат + "
			|WHERE " + ТекстГДЕ;
		КонецЕсли; 
		//Если ЗначениеЗаполнено(ТекстПорядок) Тогда
		//	// Extended WQL http://msdn.microsoft.com/en-us/library/ms815501.aspx
		//	Результат = Результат + "
		//	|ORDER BY " + ТекстПорядок;
		//КонецЕсли; 
		//Если Ложь
		//	//Или ИзКонструктора
		//	Или ПринудительноИзКонструктора
		//Тогда
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Результат);
		//КонецЕсли; 
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Процедура КоманднаяПанельТаблицаСверткаСвойства(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛксИзменитьСвернутость(Кнопка.Пометка, ЭлементыФормы.СвойстваСтрокиРезультата, ЭтаФорма.ЭлементыФормы.вРазделительТаблицаРезультатаИСвойстваСтроки,
		ЭтаФорма.ЭлементыФормы.ПанельРезультата, "право");
	
КонецПроцедуры

Процедура ИмяСервераWMIПриИзменении(Элемент)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	мWMIService = Неопределено;
	ОбновитьКлассыWMI();
	
КонецПроцедуры

Процедура КлассыWMIКоманднаяПанельВыполнятьПриВыборе(Кнопка)
	
	ЭтаФорма.ВыполнятьПриВыбореТаблицы = Не Кнопка.Пометка;
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура ОбновитьДоступность()
	
	//ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = ЭтаФорма.ИзКонструктора;
	ЭлементыФормы.КлассыWMIКоманднаяПанель.Кнопки.Подменю.Кнопки.ВыполнятьПриВыборе.Пометка = ВыполнятьПриВыбореТаблицы;
	ЭлементыФормы.ВыбранныеПоля.Доступность = Не ВыбратьВсеПоля;
	
КонецПроцедуры

Процедура КлассыWMIКоманднаяПанельОписание(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.КлассыWMI.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокаЗапроса = ТекущаяСтрока.Имя;
		ИскатьСтрокуВMSDN(СтрокаЗапроса);
	КонецЕсли;
	
КонецПроцедуры

Функция ИскатьСтрокуВMSDN(ПоисковыйЗапрос)

	СтрокаЗапуска = "http://social.msdn.microsoft.com/Search/en-US/windows/desktop?query=" + ПоисковыйЗапрос + "&Refinement=181&emptyWatermark=true&searchButtonTooltip=Search&ac=4";
	ЗапуститьПриложение(СтрокаЗапуска);
	Возврат Неопределено;

КонецФункции

Процедура КлассыWMIФильтрПриИзменении(Элемент)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура КлассыWMIФильтрНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ИмяСервераWMIНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ВыбратьВсеПоля1ПриИзменении(Элемент)
	
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура СвойстваКлассаWMIКоманднаяПанельОписание(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ДоступныеПоляWMI.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ИскатьСтрокуВMSDN(ТекущийКлассWMI + "%20" + ТекущаяСтрока.Поле);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоступныеПоляWMIПриАктивизацииСтроки(Элемент)
	
	ОписаниеСвойстваWMI = "";
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Элемент.ТекущаяСтрока.Папка Тогда
		Возврат;
	КонецЕсли; 
	ИмяПоля = "" + Элемент.ТекущаяСтрока.Поле;
	ОписаниеСвойстваWMI = ирНеглобальный.ПолучитьДокументациюСвойстваWMIЛкс(ТекущийКлассWMI, ИмяПоля);
	
КонецПроцедуры

// ADO 

Процедура СтрокаСоединенияADOНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СоединениеADO = Новый COMОбъект("ADODB.Connection");
	СоединениеADO.ConnectionString = Элемент.Значение;
	ДатаЛинк = Новый COMОбъект("DataLinks");
	Если ДатаЛинк.PromptEdit(СоединениеADO) Тогда
		Элемент.Значение = СоединениеADO.ConnectionString;
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает объект ADOUtils, при необходимости подключая ВК. 
// При неудаче возвращается Неопределено 
Функция Новый_GameWithFire_ADOUtils(Отладка = Ложь) Экспорт
	ADOUtils = Неопределено;
	Попытка
		ADOUtils = Новый("AddIn.ADOUtils");
	Исключение
		// пытаемся подключить ВК
		#Если Клиент Тогда
			Если Отладка = Истина Тогда
				Сообщить("Попытка подключения ВК 'GameWithFire.ADOUtils' ...", СтатусСообщения.Информация);
			КонецЕсли; 
			Попытка
				ПодключитьВнешнююКомпоненту("GameWithFire.ADOUtils");
			Исключение
				Если Отладка = Истина Тогда
					Сообщить("	ошибка подключения ВК: "+ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецЕсли; 
				Возврат Неопределено;
			КонецПопытки;
			Если Отладка = Истина Тогда
				Сообщить("	ВК успешно подключена.",СтатусСообщения.БезСтатуса);
			КонецЕсли; 
			Попытка
				ADOUtils = Новый("AddIn.ADOUtils");
			Исключение
				Если Отладка = Истина Тогда
					Сообщить("	ошибка создания объекта 'AddIn.ADOUtils' из ВК: "+ОписаниеОшибки(), СтатусСообщения.Важное);
				КонецЕсли; 
			КонецПопытки;
		#Иначе
			ВызватьИсключение("Подключение ВК 'GameWithFire.ADOUtils' доступно только на клиенте !");
		#КонецЕсли
	КонецПопытки;
	Возврат ADOUtils;
КонецФункции // Новый_GameWithFire_ADOUtils()

Функция ПолучитьADOUtils(ПытатьсяУстанавливать = Истина)
	
	ADOUtils = мПлатформа.ПолучитьADOUtils(ПытатьсяУстанавливать, ЭтаФорма.СмещениеГодаADO, ЭтаФорма.Типизировать1С);
	Если ПытатьсяУстанавливать Тогда
		УстановитьЭлементыФормыADO();
	КонецЕсли; 
	Возврат ADOUtils;
	
КонецФункции

// проверяет корректность структуры таблицы списка параметров запроса
Функция спПараметры_СтруктураКорректна(спПараметры) Экспорт
	Если ТипЗнч(спПараметры) <> Тип("ТаблицаЗначений") Тогда
		Возврат Ложь;
	КонецЕсли; 
	Возврат(  
		(Неопределено <> спПараметры.Колонки.Найти("Имя")) 
	   И(Неопределено <> спПараметры.Колонки.Найти("Значение"))
       И(Неопределено <> спПараметры.Колонки.Найти("ТипADO")) 
       И(Неопределено <> спПараметры.Колонки.Найти("Индекс")) 
		);
КонецФункции

// возвращает описание ошибки без информации о модуле , автор //Vitkovsky
Функция ЛокОписаниеОшибки(ЕррорТекст) Экспорт
	//СтрокаМодуля   = ОтделитьРазделителем2(ЕррорТекст, "{");
	//ОписаниеОшибки = ОтделитьРазделителем2(СтрокаМодуля, "}: ");
	//Возврат ОписаниеОшибки;
	Возврат ЕррорТекст;
	
КонецФункции // ЛокОписаниеОшибки()

// выполнение запроса через ADO на клиенте с выгрузкой результата (требуется общий модуль 'COMОбменКлиент')
// Результат - РезультатЗапроса, ADODB.Recordset
Функция ВыполнитьЗапрос_ADO(ИсточникДанных,СоединениеADO,ОбъектЗапрос,стОпции,ЗапросТекст,спПараметры,ЕррорИнфо)
	Перем NamedParameters;
	Перем UseParametersArray;
	
	стОпции.Свойство("NamedParameters",NamedParameters);
	стОпции.Свойство("UseParametersArray",UseParametersArray);
	
	//Если NamedParameters = Истина И UseParametersArray = Истина Тогда
	//	NamedParameters = Ложь;
	//КонецЕсли; 
	
	стПараметры = Неопределено;
	стПарТипADO = Неопределено;
	Если спПараметры_СтруктураКорректна(спПараметры) Тогда
		Если NamedParameters = Истина Тогда
			стПараметры = Новый Соответствие;
			стПарТипADO = Новый Соответствие;
			Для каждого СтрПар Из спПараметры Цикл
				стПараметры.Вставить(СтрПар.Имя, СтрПар.Значение);
				стПарТипADO.Вставить(СтрПар.Имя, СтрПар.ТипADO);
			КонецЦикла; 
		Иначе
			ТипаЧисло = Тип("Число");
			стПараметры = Новый Массив;
			стПарТипADO = Новый Массив;
			ИндексН = спПараметры.Количество()-1;
			Для каждого СтрПар Из спПараметры Цикл
				// установим индексы в строках, где они не были указаны
				Если ТипЗнч(СтрПар.Индекс) <> ТипаЧисло Тогда
					ИндексН = ИндексН + 1;
					СтрПар.Индекс = ИндексН;
				КонецЕсли; 
			КонецЦикла; 
			// список параметров в порядке индекса
			спПараметры.Сортировать("Индекс asc");
			Для каждого СтрПар Из спПараметры Цикл
				стПараметры.Добавить(СтрПар.Значение);
				стПарТипADO.Добавить(СтрПар.ТипADO);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	тзРезультаты = Неопределено;
	Попытка
		// обычный запрос ч/з ADO
		Если UseParametersArray = Истина Тогда
			стОпции.Вставить("Parameters", ирНеглобальный.ParametersArrayПолучить(стПараметры,стПарТипADO));
			РезультатЗапроса = ВыполнитьЗапросADO(ИсточникДанных,СоединениеADO,ОбъектЗапрос,стОпции,ЗапросТекст,Неопределено,Неопределено,ЕррорИнфо);
		Иначе
			РезультатЗапроса = ВыполнитьЗапросADO(ИсточникДанных,СоединениеADO,ОбъектЗапрос,стОпции,ЗапросТекст,стПараметры,стПарТипADO,ЕррорИнфо);
		КонецЕсли; 
	Исключение
		ЕррорИнфо = ЛокОписаниеОшибки(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РезультатЗапроса;
КонецФункции // ВыполнитьЗапрос_ADO()

// выполнение запроса через ADO на клиенте с выгрузкой результата 
Функция ВыполнитьЗапросADO(ИсточникСсылка,СоединениеADO,ОбъектЗапрос,стОпции,ЗапросТекст,cтПараметры,стПарТипADO,ЕррорИнфо) Экспорт
	Перем Еррорс;
	Перем Script;
	Перем ScriptError;
	Перем ADOUtils;
	Перем соИтогиБатчей;
	
	ТипаБулево = Тип("Булево");
	ТипаМассив = Тип("Массив");
	ТипаСоответствие = Тип("Соответствие");
	
	ЕррорИнфо = "";
	РезультатЗапроса = Неопределено;
	
	Если ТипЗнч(стОпции) <> Тип("Структура") Тогда
		стОпции = Новый Структура;
	КонецЕсли;
	ОпцияРезультатADOВРезультатЗапросаGWF = Неопределено;
	стОпции.Свойство("РезультатADOВРезультатЗапросаGWF", ОпцияРезультатADOВРезультатЗапросаGWF);
	Если ТипЗнч(ОпцияРезультатADOВРезультатЗапросаGWF) <> ТипаБулево Тогда
		ОпцияРезультатADOВРезультатЗапросаGWF = Ложь;
	КонецЕсли;
	
	// Опции выполнения запроса (приложение 1С)
	ПакетноеВыполнение = Неопределено;
	ИндексБатча = Неопределено;
	ВремяВыполнения = Неопределено;
	ВыводСостояния = Неопределено;
	ВыводСостоянияВыгрузки = Неопределено;
	Типизировать1С = Неопределено;
	BynaryToHex = Неопределено;
		
	стОпции.Свойство("ПакетноеВыполнение",ПакетноеВыполнение);
	стОпции.Свойство("ИндексБатча",ИндексБатча);
	стОпции.Свойство("ВыводСостояния",ВыводСостояния);
	стОпции.Свойство("ВыводСостоянияВыгрузки",ВыводСостоянияВыгрузки);
	стОпции.Свойство("ВремяВыполнения",ВремяВыполнения);
	стОпции.Свойство("Типизировать1С",Типизировать1С);
	стОпции.Свойство("BynaryToHex",BynaryToHex);
	
	ADOUtils = Неопределено;
	Если ОпцияРезультатADOВРезультатЗапросаGWF Тогда
		ADOUtils = ПолучитьADOUtils();
		Если ADOUtils = Неопределено Тогда
			ЕррорИнфо = "Не удалось подключить ВК GameWithFire.dll для преобразования результата запроса ADO в результат запроса 1C!";
			Возврат Неопределено;
		КонецЕсли; 
	КонецЕсли;
		
	Если ТипЗнч(ИндексБатча) <> Тип("Число") Тогда
		ИндексБатча = Неопределено;
	Иначе
		ИндексБатча = Цел(ИндексБатча);
	КонецЕсли;
		
	Если ИндексБатча = Неопределено Тогда
		ИндексБатча = 0;  // по умолчанию - результат первой команды из multi-batch-statement 
	КонецЕсли; 
		
	Переподключиться = Неопределено;
	НеВыполнять = Неопределено;
	НеОтключаться = Неопределено;
	
	стОпции.Свойство("Переподключиться", Переподключиться);
	стОпции.Свойство("НеВыполнять", НеВыполнять); // вернуть объект, выполняющий запрос
	стОпции.Свойство("НеОтключаться", НеОтключаться);
	
	Если СоединениеADO = Неопределено ИЛИ Переподключиться = Истина Тогда
		// подключаемся или переподключаемся
		Если НЕ ConnectADO(ИсточникСсылка, СоединениеADO, стОпции, Еррорс) Тогда
			ЕррорИнфо = "Ошибки подключения к источнику данных ADO:";
			о=0;
			Для каждого Ерр Из Еррорс Цикл
				о=о+1;
				ЕррорИнфо=ЕррорИнфо+"
				|	"+о+")"+Ерр;
			КонецЦикла; 
			Возврат Неопределено;
		КонецЕсли;
		Если ТипЗнч(ОбъектЗапрос) = Тип("COMОбъект") Тогда
			// если передан объект запроса - надо заново установить соединение
			ОбъектЗапрос.ActiveConnection = СоединениеADO;
		КонецЕсли; 
	КонецЕсли;
	
	// Передача параметров запроса
	cтПараметрыТип=ТипЗнч(cтПараметры);
	ПарТипADOТип=ТипЗнч(стПарТипADO);
	
	ПараметрыКоличество=0;
	Если cтПараметрыТип = ТипаМассив ИЛИ cтПараметрыТип = ТипаСоответствие Тогда
		Если стПарТипADO <> Неопределено И ПарТипADOТип <> cтПараметрыТип Тогда
			ЕррорИнфо = 
			"Тип значения списка типов параметров ADO ('"+ПарТипADOТип+"') не равен
			|типу значений списка параметров запроса ('"+cтПараметрыТип+"') !";
			Возврат Неопределено;
		КонецЕсли; 
		ПараметрыКоличество=cтПараметры.Количество();
	КонецЕсли;
	
	// Опции выполнения запроса (ADO)	
	RecordsetUse = Неопределено;
	Options = Неопределено;
	
	стОпции.Свойство("RecordsetUse",RecordsetUse);
	стОпции.Свойство("Options",Options);
	
	Если ПараметрыКоличество > 0 И RecordsetUse = Истина Тогда
		RecordsetUse = Ложь;
	КонецЕсли;
		
	CommandTimeout = Неопределено;
	CommandType = Неопределено;
	Prepared = Неопределено;
	NamedParameters = Неопределено;
	Parameters = Неопределено;
	
	CursorType = Неопределено;
	CursorLocation = Неопределено;
	LockType = Неопределено;
	MarshalOptions = Неопределено;
	MaxRecords = Неопределено;
	CacheSize = Неопределено;
	PageSize = Неопределено;
	
	Если RecordsetUse = Истина Тогда
		стОпции.Свойство("CursorType",CursorType);
		стОпции.Свойство("CursorLocation",CursorLocation);
		стОпции.Свойство("LockType",LockType);
		стОпции.Свойство("MarshalOptions",MarshalOptions);
		стОпции.Свойство("MaxRecords",MaxRecords);
		стОпции.Свойство("CacheSize",CacheSize);
		стОпции.Свойство("PageSize",PageSize);
	Иначе
		стОпции.Свойство("CommandTimeout",CommandTimeout);
		стОпции.Свойство("CommandType",CommandType);
		стОпции.Свойство("Prepared",Prepared);
		стОпции.Свойство("NamedParameters",NamedParameters);
		Если NamedParameters = Неопределено Тогда
			// по умолчанию будем смотреть по типу списка параметров запроса
			Если ПараметрыКоличество > 0 Тогда
				Если cтПараметрыТип = ТипаМассив Тогда
					NamedParameters = Ложь;
				ИначеЕсли cтПараметрыТип = ТипаСоответствие Тогда
					NamedParameters = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		стОпции.Свойство("Parameters",Parameters);
		Если ТипЗнч(Parameters)=ТипаМассив Тогда
			//Если Parameters.Количество()=0 Тогда
			//	Parameters = Неопределено; // все равно, что нет
			//КонецЕсли; 
		Иначе
			Parameters = Неопределено;
		КонецЕсли; 
		//Если Parameters <> Неопределено И NamedParameters = Истина Тогда
		//	// соответствие параметров - по индексу в переданном массиве
		//	NamedParameters = Ложь;
		//КонецЕсли; 
	КонецЕсли;
	
	// флаг инициализации параметрического запроса (первое выполнение)
	Инициализация = Неопределено;
	Если Prepared = Истина Тогда
		Если ОбъектЗапрос = Неопределено Тогда
			Инициализация = Истина; 
		Иначе
			Инициализация = НЕ ОбъектЗапрос.Prepared; 
		КонецЕсли; 
	КонецЕсли;
	
	соИтогиБатчей = Неопределено;
	Если ОпцияРезультатADOВРезультатЗапросаGWF Тогда
		соИтогиБатчей = Новый Соответствие;
	КонецЕсли;
	
	Если ПустаяСтрока(ЗапросТекст) Тогда
		ЗапросТекстИ = ЗапросТекст;
	Иначе
		ЗапросТекстИ = ОбработатьКомментарииЗапросаADO(ЗапросТекст, соИтогиБатчей);
	КонецЕсли; 
	
	Если RecordsetUse = Истина Тогда
		// открываем выборку
		ОбъектЗапрос = Новый COMОбъект("ADODB.Recordset");
		ОбъектЗапрос.ActiveConnection = СоединениеADO;
		//ОбъектЗапрос.Source = ЗапросТекстИ;
		
		Если CursorType<>Неопределено Тогда
			ОбъектЗапрос.CursorType = CursorType;
		КонецЕсли; 
		Если CursorLocation<>Неопределено Тогда
			ОбъектЗапрос.CursorLocation = CursorLocation;
		КонецЕсли; 
		Если LockType<>Неопределено Тогда
			ОбъектЗапрос.LockType = LockType;
		КонецЕсли;
		
		Если MarshalOptions<>Неопределено Тогда
			ОбъектЗапрос.MarshalOptions = MarshalOptions;
		КонецЕсли; 
		Если MaxRecords<>Неопределено Тогда
			ОбъектЗапрос.MaxRecords = MaxRecords;
		КонецЕсли; 
		Если CacheSize<>Неопределено Тогда
			ОбъектЗапрос.CacheSize = CacheSize;
		КонецЕсли;
		Если PageSize<>Неопределено Тогда
			ОбъектЗапрос.PageSize = PageSize;
		КонецЕсли;
	Иначе
		// выполняем команду
		Если Инициализация <> Ложь ИЛИ Инициализация = Истина Тогда
			Если мКомандаADO <> Неопределено Тогда
				ОбъектЗапрос = мКомандаADO;
			Иначе
				ОбъектЗапрос = Новый COMОбъект("ADODB.Command");
			КонецЕсли; 
			ОбъектЗапрос.ActiveConnection = СоединениеADO;
			ОбъектЗапрос.CommandText = ЗапросТекстИ;
			
			Если CommandType<>Неопределено И Options=Неопределено Тогда
				ОбъектЗапрос.CommandType = CommandType;
			КонецЕсли; 
			Если CommandTimeout<>Неопределено Тогда
				ОбъектЗапрос.CommandTimeout = CommandTimeout;
			КонецЕсли; 
			Если NamedParameters<>Неопределено Тогда
				ОбъектЗапрос.NamedParameters = NamedParameters;
			КонецЕсли;
			Если Prepared<>Неопределено Тогда
				ОбъектЗапрос.Prepared = Prepared;
			КонецЕсли;
		Иначе
			//Сообщить("ОбъектЗапрос.Prepared = "+ОбъектЗапрос.Prepared);
		КонецЕсли;
		
		УстановитьПараметры = Ложь;
		Если Parameters = Неопределено Тогда
			// если массив параметров НЕ-ПЕРЕДАН
			Если ПараметрыКоличество > 0 Тогда
				// устанавливаем параметры всегда (когда требуется)
				Если NamedParameters = Истина И (cтПараметрыТип <> ТипаСоответствие) Тогда
					ЕррорИнфо = // для ИМЕНОВАННЫХ параметров необходимо передавать имена в ключах списка
					"Тип значения списка ИМЕНОВАННЫХ параметров запроса должен быть 'Соответствие' !";
					Возврат Неопределено;
				ИначеЕсли NamedParameters <> Истина И (cтПараметрыТип <> ТипаМассив) Тогда
					ЕррорИнфо = // для НЕ-ИМЕНОВАННЫХ параметров важен порядок следования, задаваемый индексом массива
					"Тип значения списка НЕ-ИМЕНОВАННЫХ параметров запроса должен быть 'Массив' !";
					Возврат Неопределено;
				КонецЕсли;
				cп_Параметры = cтПараметры;
				сп_ПарТипADO = стПарТипADO;
				УстановитьПараметры = Истина;
			КонецЕсли; 
		Иначе // если же массив параметров ПЕРЕДАН
			УстановитьПараметры = Ложь;
			Если Инициализация <> Ложь ИЛИ Инициализация = Истина Тогда
				// заполняем параметры по переданному массиву объектов ADODB.Parameter
				Если ОбъектЗапрос.Parameters.Count <> Parameters.Количество() Тогда
					Попытка
						Если ОбъектЗапрос.Parameters.Count > 0 Тогда
							// очищаем коллекцию параметров
							Пока ОбъектЗапрос.Parameters.Count > 0 Цикл
								ОбъектЗапрос.Parameters.Delete(0);
							КонецЦикла;
						КонецЕсли; 
						// заполняем коллекцию параметров по массиву
						Для каждого Parameter Из Parameters Цикл
							ОбъектЗапрос.Parameters.Append(Parameter);
						КонецЦикла; 
					Исключение
						ЕррорИнфо=
						"Ошибка заполнения параметров запроса по переданному массиву объектов ADODB.Parameter: 
						|	"+ОписаниеОшибки();
						Возврат Неопределено;
					КонецПопытки;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		Если УстановитьПараметры = Истина Тогда
			// инициализация параметров запроса
			сзЕррорс = Новый СписокЗначений;
			Индекс = -1;
			Для каждого Параметр Из cп_Параметры Цикл
				Если cтПараметрыТип = ТипаМассив Тогда
					ПараметрИмя = Неопределено;
					ПараметрЗнч = Параметр;
				ИначеЕсли cтПараметрыТип = ТипаСоответствие Тогда
					ПараметрИмя = СокрЛП(Параметр.Ключ);
					ПараметрЗнч = Параметр.Значение;
				Иначе
					Продолжить;
				КонецЕсли; 
				Индекс = Индекс + 1;
				стТипADO=Неопределено;
				Если ПарТипADOТип=ТипаМассив Тогда
					Если Индекс<=сп_ПарТипADO.Количество()-1 Тогда
						стТипADO = сп_ПарТипADO.Получить(Индекс);
					КонецЕсли; 
				ИначеЕсли ПарТипADOТип = ТипаСоответствие Тогда
					стТипADO = сп_ПарТипADO.Получить(Параметр.Ключ);
				КонецЕсли; 
				ЕррИнфо="";
				Рез = ирНеглобальный.ADODBCommand_УстановитьПараметрПо1С(ОбъектЗапрос,Инициализация,Индекс,ПараметрИмя,стТипADO,ПараметрЗнч,ADOUtils,ЕррИнфо);
				Если НЕ Рез Тогда
					Если ПараметрИмя = Неопределено Тогда
						сзЕррорс.Добавить("Param["+Индекс+"]",ЕррИнфо);
					Иначе
						сзЕррорс.Добавить(Параметр.Ключ,ЕррИнфо);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
			Если сзЕррорс.Количество()>0 Тогда
				ЕррорИнфо = "Ошибки установки параметров запроса через объект 'ADODB.Command':";
				о=0;
				Для каждого Ерр Из сзЕррорс Цикл
					о=о+1;
					ЕррорИнфо=ЕррорИнфо+"
					|	"+о+") Параметр '"+Ерр.Значение+"': "+Ерр.Представление;
				КонецЦикла; 
				Возврат Неопределено;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Если НеВыполнять=Истина Тогда
		// просто вернем COM-объект, выполняющий запрос (через аргумент ОбъектЗапрос).
		Возврат Неопределено;
	КонецЕсли;
		
	RecordsAffected = 0;
	БатчаИндекс = 0; // индекс текущего выполняемого батча (команды)
	
	// чистим коллекцию ошибок и выполняем запрос
	СоединениеADO.Errors.Clear();
	Если ВыводСостояния = Истина Тогда
		СостояниеИнфо = "Запрос через ADO";
		Состояние(СостояниеИнфо+" ...");
	КонецЕсли; 
	Попытка
		Если RecordsetUse = Истина Тогда
			Если Options=Неопределено Тогда
				ОбъектЗапрос.Open(ЗапросТекстИ);
			Иначе
				ОбъектЗапрос.Open(ЗапросТекстИ,СоединениеADO,CursorType,LockType,Options);
			КонецЕсли;
			РезультатЗапроса = ОбъектЗапрос;
		Иначе
			Если Parameters=Неопределено И Options=Неопределено Тогда
				РезультатЗапроса = ОбъектЗапрос.Execute(RecordsAffected);
			ИначеЕсли Parameters=Неопределено И Options<>Неопределено Тогда
				РезультатЗапроса = ОбъектЗапрос.Execute(RecordsAffected,,Options);
			ИначеЕсли Parameters<>Неопределено И Options=Неопределено Тогда
				РезультатЗапроса = ОбъектЗапрос.Execute(RecordsAffected,Parameters);
			Иначе
				РезультатЗапроса = ОбъектЗапрос.Execute(RecordsAffected,Parameters,Options);
			КонецЕсли;
		КонецЕсли;
	Исключение
		// ошибки библиотеки ADO
		ЕррорИнфо=
		"Ошибка ADO: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке().Причина);
		Возврат Неопределено;
	КонецПопытки;
	
	// ошибки провайдера данных
	Если СоединениеADO.Errors.Count>0 Тогда
		ЕррорИнфо="Ошибки провайдера данных:";
		Для каждого Err Из СоединениеADO.Errors Цикл
			о=о+1;
			ErrСтр="Описание: "+Err.Description+"; Номер: "+Err.Number+"; Источник: "+Err.Source+"; Состояние: "+Err.SQLState+"; Код"+Err.NativeError;
			ЕррорИнфо=ЕррорИнфо+"
			|	"+о+") "+ErrСтр;
		КонецЦикла;
	
		стОпции.Вставить("RecordsAffected",0);
		// возвратим результат запроса - объект 'ADODB.Recordset'
		ВозвратЗначение = РезультатЗапроса;
		Возврат ВозвратЗначение;
	КонецЕсли;
	
	Если РезультатЗапроса.State = 0 Тогда
		// выполнена команда
	Иначе
		// открыта выборка, объектом 'ADODB.Recordset' или при выполнении команды объектом 'ADODB.Command' 
		RecordsAffected = РезультатЗапроса.RecordCount;
	КонецЕсли;
		
	// преобразование первого результата запроса (объекта ADODB.RecordSet) в результат запроса 1С 
	Если ОпцияРезультатADOВРезультатЗапросаGWF Тогда
		СтрИтоги = СокрЛП(соИтогиБатчей[БатчаИндекс]);
		Если ПустаяСтрока(СтрИтоги) Тогда
			РезультатЗапроса = ADOUtils.ADORecordsetToQueryResult(РезультатЗапроса);
		Иначе
			РезультатЗапроса = ADOUtils.ADORecordsetToQueryResult(РезультатЗапроса,СтрИтоги);
		КонецЕсли; 
	КонецЕсли;
	стОпции.Вставить("RecordsAffected",RecordsAffected); // возвратим через опции итоговое число обработанных строк
	
	Если НеОтключаться <> Истина Тогда
		DisconnectADO(ИсточникСсылка, СоединениеADO,стОпции,Еррорс);
	КонецЕсли;
	
	Возврат РезультатЗапроса;
КонецФункции // ВыполнитьЗапросADO()

// выгружает результат запроса ADO (объект 'ADODB.Recordset') в таблицу значений с выводом прогресса состояния выгрузки
Функция ЗапросADOРезультат_Выгрузить(РезультатRecordset, Типизировать1С = Ложь, BynaryToHex = Ложь, RecordsAffected = 0) Экспорт
	
	РезультатТаблица = Новый ТаблицаЗначений;
	Если РезультатRecordset = Неопределено Тогда
		Возврат РезультатТаблица;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ЗагружатьЭлементов) Тогда
		КоличествоЭлементов = Мин(ЗагружатьЭлементов, РезультатRecordset.RecordCount);
	Иначе
		КоличествоЭлементов = РезультатRecordset.RecordCount;
	КонецЕсли; 
	Индикатор = ЛксПолучитьИндикаторПроцесса(КоличествоЭлементов, "Загрузка результата");
	Если РезультатRecordset.State=0 Тогда
		// Выполнена команда
		РезультатТаблица.Колонки.Добавить("ExecutionInfo",,"Информация о выполнении:");
		Стр = РезультатТаблица.Добавить();
		Стр.ExecutionInfo = "Число записей, обработанных запросом: "+ RecordsAffected;
	Иначе
		FieldКолонка=Новый Соответствие;
		Для каждого Field Из РезультатRecordset.Fields Цикл
			Если ПустаяСтрока(Field.Name) Тогда
				ИмяКолонки = ":?";
				Для о=1 По СтрДлина(Field.Name)-1 Цикл
					ИмяКолонки = ИмяКолонки + "?";
				КонецЦикла; 
			Иначе
				ИмяКолонки = Field.Name;
			КонецЕсли;
			Если Не ЛксЛиИмяПеременной(ИмяКолонки) Тогда
				ИмяКолонки = мПлатформа.ПолучитьИдентификаторИзПредставления(ИмяКолонки);
			КонецЕсли; 
			// контроль полей - двойников по именам
			НомерДвойника=0;
			Пока РезультатТаблица.Колонки.Найти(ИмяКолонки + Формат(НомерДвойника,"ЧГ=0")) <> Неопределено Цикл
				НомерДвойника = НомерДвойника + 1;
			КонецЦикла;
			ИмяКолонки = ИмяКолонки + Формат(НомерДвойника, "ЧГ=0");
			Если Типизировать1С = Истина Тогда
				Тип1С = ирНеглобальный.FieldADO_ПолучитьТип1C(Field);
			Иначе
				Тип1С = Неопределено;
			КонецЕсли;
			//Если Тип1С=Неопределено Тогда
			//	Колонка = РезультатТаблица.Колонки.Добавить(ИмяКолонки,,"["+Name+"]");
			//Иначе
				Колонка = РезультатТаблица.Колонки.Добавить(ИмяКолонки,Тип1С);
			//КонецЕсли;
			FieldКолонка.Вставить(Field, Колонка);
		КонецЦикла;
		// Открыта выборка
		ТипCOMSafeArray = Тип("COMSafeArray");
		adBinaryType = ирНеглобальный.intTypeADO("adBinary");
		adVarBinaryType = ирНеглобальный.intTypeADO("adVarBinary");
		adLongVarBinaryType = ирНеглобальный.intTypeADO("adLongVarBinary");
		ПервыйРаз=Истина;
		Счетчик = 0;
		Пока РезультатRecordset.EOF() = 0 Цикл
			Если Индикатор.Счетчик = КоличествоЭлементов Тогда
				Прервать;
			КонецЕсли; 
			ЛксОбработатьИндикатор(Индикатор);
			Счетчик = Счетчик + 1;
			СтрНов = РезультатТаблица.Добавить();
			Для каждого Field Из РезультатRecordset.Fields Цикл
				Индекс = РезультатТаблица.Колонки.Индекс(FieldКолонка.Получить(Field));
				Если  Истина
					И ТипЗнч(Field.Value)=ТипCOMSafeArray
					И BynaryToHex = Истина
					И (Ложь
						Или Field.Type=adBinaryType
						Или Field.Type=adVarBinaryType
						//ИЛИ (Field.Type=adLongVarBinaryType)
						)
				Тогда
					// преобразование COMSafeArray в строку HEX
					СтрНов[Индекс] = ирНеглобальный.BinaryCOMSafeArrayToHEX(Field.Value);
				Иначе
					// преобразование типа неявное
					СтрНов[Индекс] = Field.Value;
				КонецЕсли; 
			КонецЦикла;
			РезультатRecordset.MoveNext();
		КонецЦикла;
		ЛксОсвободитьИндикаторПроцесса();
	КонецЕсли;
	Возврат РезультатТаблица;
	
КонецФункции

// инициирует таблицу списка параметров запроса
Функция спПараметры_Инит() Экспорт
	спПараметры = Новый ТаблицаЗначений;
	спПараметры.Колонки.Добавить("Имя");
	спПараметры.Колонки.Добавить("Значение");
	спПараметры.Колонки.Добавить("ТипADO");
	спПараметры.Колонки.Добавить("Индекс");
	Возврат спПараметры;
КонецФункции

// выполняет запрос с переданным именем, возвращает признак успешности выполнения
//   аргумент Запрос			- имя строки дерева запроса или сама строка дерева запроса
Функция ЗапросADOВыполнить(ЭтотЗапрос, РезультатADOВРезультатЗапросаGWF = Ложь) Экспорт 
	Перем СтандартнаяОбработка, Отказ;
	//Перем ЭтотЗапрос;
	Перем ЗапросОбъект;
	Перем СоединениеADO;
	Перем тзРезультаты;
	
	ЕррорИнфо = "";
	СтандартнаяОбработка = Истина;
	//СоединенияADO_Инит();
		
	// заполним список параметров текущего запроса ...
	Если НЕ спПараметры_СтруктураКорректна(ЭтотЗапрос.спПараметры)  Тогда
		ЭтотЗапрос.спПараметры = спПараметры_Инит();
	КонецЕсли;
	
	// ... с учетом предварительной установки параметров в скриптах
	Для каждого СтрокаПараметра Из Параметры Цикл
		СтрПар = ЭтотЗапрос.спПараметры.Найти(СтрокаПараметра.ИмяПараметра, "Имя");
		Если СтрПар = Неопределено Тогда
			СтрПар = ЭтотЗапрос.спПараметры.Добавить();
			СтрПар.Имя = СтрокаПараметра.ИмяПараметра;
			СтрПар.Значение = СтрокаПараметра.Значение;
		Иначе
			// установим индекс строки для задания прорядка в НЕ-ИМЕНОВАННЫХ списках параметров
			СтрПар.Индекс = Параметры.Индекс(СтрокаПараметра);
		КонецЕсли; 
	КонецЦикла; 
			
	Если СтандартнаяОбработка = Истина Тогда
		ЗапросТекст = СокрЛП(ЭтотЗапрос.ТекстЗапроса);
		Если ПустаяСтрока(ЗапросТекст) Тогда
			ЕррорИнфо = "Не задан текст запроса !";
			Перейти ~ВызыватьИсключение;
		КонецЕсли;
		
		//ОпцииОчистить(ЭтотЗапрос);
		//ОпцияВставить(ЭтотЗапрос,"ВремяВыполнения",Истина); // Возвращать время выполнения и время выгрузки
		ИсточникДанных = ЭтотЗапрос.ИсточникДанных;
		ЕррорИнфо = "";
		Если Не ЗначениеЗаполнено(ИсточникДанных) Тогда
			ВызватьИсключение "Источник данных ADO не заполнен";
		КонецЕсли; 
		// запрос ADO
		ОпцияВставить(ЭтотЗапрос, "НеОтключаться",Истина);
		СоединениеADO = ПолучитьСоединениеADO();
		стОпции = ЭтотЗапрос.стОпции;
		спПараметры = ЭтотЗапрос.спПараметры;
		РезультатRecordSet = ВыполнитьЗапрос_ADO(ИсточникДанных,СоединениеADO,ЗапросОбъект,стОпции,ЗапросТекст,спПараметры,ЕррорИнфо);
	КонецЕсли;
	Если ПустаяСтрока(ЕррорИнфо) Тогда
		Возврат РезультатRecordSet;
	КонецЕсли;
	
~ВызыватьИсключение:

	ЕррорТекстС = "" + ЕррорИнфо;
	ЛксСообщитьСУчетомМодальности(ЕррорТекстС, МодальныйРежим, СтатусСообщения.Внимание);
	
КонецФункции // ЗапросADOВыполнить()

// заполняет структуру с опциями ADO запроса значениями по умолчанию
Функция ОпцииЗапросаADOПоУмолчанию()
	
	СтруктураОпций = Новый Структура;
	СтруктураОпций.Вставить("RecordsetUse",Ложь);		// ч/з объект 'ADODB.Command'
	СтруктураОпций.Вставить("CommandTimeout",30);		// 30 сек.
	СтруктураОпций.Вставить("CommandType",8);			// adCmdUnknown
	СтруктураОпций.Вставить("NamedParameters",Ложь);	// не передавать имена параметров
	СтруктураОпций.Вставить("UseParametersArray",Ложь);	// не использовать массив Parameters для передчи параметров
	СтруктураОпций.Вставить("Prepared",Ложь);			// не использовать предподготовленный параметризованный запрос
	СтруктураОпций.Вставить("ExecuteOption",Неопределено); // не указано
	СтруктураОпций.Вставить("Options",Неопределено);	// не использовать аргумент Options в методах Command.Execute и Recordset.Open
	СтруктураОпций.Вставить("CursorType",0);			// adOpenForwardOnly
	СтруктураОпций.Вставить("CursorLocation",2);		// adUseServer
	СтруктураОпций.Вставить("LockType",-1);				// adLockUnspecified
	СтруктураОпций.Вставить("MarshalOptions",0);		// adMarshalAll
	СтруктураОпций.Вставить("CacheSize",1);				// размер кэша записей курсора по умолчанию	
	СтруктураОпций.Вставить("PageSize",10);				// размер страницы набора записей курсора по умолчанию
	СтруктураОпций.Вставить("MaxRecords",0);			// возвращать все записи из запроса
	
	СтруктураОпций.Вставить("Типизировать1С",Ложь);		// не типизировать
	СтруктураОпций.Вставить("BynaryToHex",Ложь);		// не преобразовывать Binary(N) в строку-HEX (оставлять значение COMSafeArray)
	СтруктураОпций.Вставить("РезультатADOВРезультатЗапросаGWF", Ложь); // не преобразовывать результат запроса ADO в результат запроса 1С
	//СтруктураОпций.Вставить("ВыгрузкаРезультатаADOЧерезGWF", Ложь); // не использовать ВК GameWithFire.dll для выгрузки результата запроса ADO	
	//СтруктураОпций.Вставить("СмещениеГодаADO", Неопределено); // смещение дат для запроса
	Возврат СтруктураОпций;
	
КонецФункции

// возвращает значение опции по имени из структуры опций выполнения запроса
Функция ОпцияПолучить(Запрос,ИмяОпции)
	Возврата = Неопределено;
	Если ПроверитьЗапрос_ИмяПараметра(Запрос,) = Ложь Тогда
		Возврат Возврата;
	КонецЕсли;
	Если ТипЗнч(Запрос.стОпции) <> Тип("Структура") Тогда
		Запрос.стОпции = Новый Структура;
	КонецЕсли;
	Попытка
		Запрос.стОпции.Свойство(ИмяОпции,Возврата);
	Исключение
	КонецПопытки;
	Возврат Возврата;
КонецФункции // ОпцияПолучить()

// устанавливает значение опции по имени в структуре опций выполнения запроса
Процедура ОпцияВставить(Запрос,ИмяОпции,ЗначениеОпции)
	Если ПроверитьЗапрос_ИмяПараметра(Запрос,) = Ложь Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Запрос.стОпции) <> Тип("Структура") Тогда
		Запрос.стОпции = Новый Структура;
	КонецЕсли;
	Попытка
		Запрос.стОпции.Вставить(ИмяОпции,ЗначениеОпции);
	Исключение
	КонецПопытки;
КонецПроцедуры // ОпцияВставить()

// проверяет корректность значений имени запроса и имени параметра
Функция ПроверитьЗапрос_ИмяПараметра(Запрос,ИмяПараметра=Неопределено)
	//Если ТипЗнч(Запрос) <> Тип("СтрокаДереваЗначений") Тогда 
	//	ИмяЗапроса = СокрЛП(Запрос);
	//	Запрос = Запрос_Найти(ИмяЗапроса,Ложь);
	//	Если Запрос = Неопределено Тогда
	//		ЕррорИнфо = "Запрос не найден по имени '"+ИмяЗапроса+"' в дереве списка запросов !";
	//		ВызватьИсключение(ЕррорИнфо);
	//	КонецЕсли;
	//КонецЕсли;
	Если ИмяПараметра <> Неопределено Тогда
		Если ПустаяСтрока(ИмяПараметра) Тогда
			ЕррорИнфо = "Не задано имя параметра запроса !";
			ВызватьИсключение(ЕррорИнфо);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Запрос.ИсточникДанных) Тогда
			// для запроса 1С дополнительная проверочка правильности имени параметра
			Попытка
				ТестСтруктура = Новый Структура(ИмяПараметра);
			Исключение
				ЕррорИнфо = "Неверное имя параметра запроса: '"+ИмяПараметра+"' !";
				ВызватьИсключение(ЕррорИнфо);
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Истина;
КонецФункции // ПроверитьЗапрос_ИмяПараметра()

// проверяет корректность структуры таблицы значений с результатами запроса
Функция тзРезультаты_СтруктураКорректна(тзРезультаты,ИсточникДанных)
	Если тзРезультаты = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли ТипЗнч(тзРезультаты) = Тип("ТаблицаЗначений") Тогда
		спИменаКолонок = Новый Массив;
		спИменаКолонок.Добавить("Результат");
		спИменаКолонок.Добавить("Список");
		спИменаКолонок.Добавить("Дерево");
		спИменаКолонок.Добавить("ВремяВыполнения");
		спИменаКолонок.Добавить("ВремяВыгрузки");
		Если ЗначениеЗаполнено(ИсточникДанных) Тогда
			спИменаКолонок.Добавить("RecordsAffected");
		КонецЕсли; 
		ЧислоОшибок = 0;
		Для каждого ИмяКол Из спИменаКолонок Цикл
			Если Неопределено = тзРезультаты.Колонки.Найти(ИмяКол) Тогда
				ЧислоОшибок = ЧислоОшибок + 1;
			КонецЕсли; 
		КонецЦикла;
		Если ЧислоОшибок = 0 Тогда
			Возврат Истина;
		ИначеЕсли ЧислоОшибок = 1 Тогда
			РезультатОК = (Неопределено <> тзРезультаты.Колонки.Найти("Результат"));
			СписокОК = (Неопределено <> тзРезультаты.Колонки.Найти("Список"));
			ДеревоОК = (Неопределено <> тзРезультаты.Колонки.Найти("Дерево"));
			Если РезультатОК И СписокОК И НЕ ДеревоОК Тогда
				// добавим колонку "Дерево"
				тзРезультаты.Колонки.Добавить("Дерево");
				Возврат Истина;
			ИначеЕсли РезультатОК И ДеревоОК И НЕ СписокОК Тогда
				// добавим колонку "Список"
				тзРезультаты.Колонки.Добавить("Список");
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли; 
		Иначе
			Возврат Ложь;
		КонецЕсли; 
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции

Процедура УстановитьЭлементыФормыADO()
	
	//СписокВыбора = ЭлементыФормы.CommandType.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(-1,strCommandTypeADO(-1));
	//СписокВыбора.Добавить(+1,strCommandTypeADO(+1));
	//СписокВыбора.Добавить(+2,strCommandTypeADO(+2));
	//СписокВыбора.Добавить(+4,strCommandTypeADO(+4));
	//СписокВыбора.Добавить(+8,strCommandTypeADO(+8));
	//СписокВыбора.Добавить(+256,strCommandTypeADO(+256));
	//СписокВыбора.Добавить(+512,strCommandTypeADO(+512));
	//
	//СписокВыбора = ЭлементыФормы.ExecuteOption.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(-1,strExecuteOption(-1));
	//СписокВыбора.Добавить(+16,strExecuteOption(+16));
	//СписокВыбора.Добавить(+32,strExecuteOption(+32));
	//СписокВыбора.Добавить(+64,strExecuteOption(+64));
	//СписокВыбора.Добавить(+128,strExecuteOption(+128));
	//СписокВыбора.Добавить(+256,strExecuteOption(+256));
	//СписокВыбора.Добавить(+512,strExecuteOption(+512));
	//
	//СписокВыбора = ЭлементыФормы.CursorType.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(-1,strCursorType(-1));
	//СписокВыбора.Добавить(+0,strCursorType(+0));
	//СписокВыбора.Добавить(+1,strCursorType(+1));
	//СписокВыбора.Добавить(+2,strCursorType(+2));
	//СписокВыбора.Добавить(+3,strCursorType(+3));
	//
	//СписокВыбора = ЭлементыФормы.CursorLocation.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(+1,strCursorLocation(1));
	//СписокВыбора.Добавить(+2,strCursorLocation(2));
	//СписокВыбора.Добавить(+3,strCursorLocation(3));
	//
	//СписокВыбора = ЭлементыФормы.LockType.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(-1,strLockType(-1));
	//СписокВыбора.Добавить(+1,strLockType(+1));
	//СписокВыбора.Добавить(+2,strLockType(+2));
	//СписокВыбора.Добавить(+3,strLockType(+3));
	//СписокВыбора.Добавить(+4,strLockType(+4));
	//
	//СписокВыбора = ЭлементыФормы.MarshalOptions.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(+0,strMarshalOptions(+0));
	//СписокВыбора.Добавить(+1,strMarshalOptions(+1));
	//
	//СписокВыбора = ЭлементыФормы.GWFYearOffset.СписокВыбора;
	//СписокВыбора.Очистить();
	//СписокВыбора.Добавить(Неопределено,"<< Неопределено >>");
	//СписокВыбора.Добавить(+0000,"0");
	//СписокВыбора.Добавить(+2000,"2000");
	
	ADOUtils = ПолучитьADOUtils(Ложь);
	Элемент = ЭлементыФормы.РамкаGameWithFire;
	Элемент.Заголовок = "Настройки использования внешней компоненты GameWithFire.dll";
	Если ADOUtils = Неопределено Тогда
		Элемент.ЦветРамки = WebЦвета.Коричневый;
		Элемент.Заголовок = Элемент.Заголовок + " (ВК - недоступна !)";
	Иначе
		Элемент.ЦветРамки = WebЦвета.Ультрамарин;
	КонецЕсли;
	
КонецПроцедуры

// Параметры - ПолучитьИсточникДанныхADO()
Функция ConnectADO(ИсточникДанных, СоединениеADO, стОпции=Неопределено, Еррорс=Неопределено, выхСтрокаСоединенияДляСообщения = "") Экспорт
	Перем Параметры;
	Перем Результат;
	
	Параметры=ИсточникДанных;
	Еррорс=Новый Массив;
	 
	// дополнительные параметры для соединения к источнику данных
	Если ТипЗнч(стОпции)<>Тип("Структура") Тогда
		стОпции = Новый Структура;
	КонецЕсли;
	
	Доп_Путь=Неопределено;
	Если стОпции.Свойство("Путь",Доп_Путь) Тогда
		// передали другой непустой путь - используем его
		Если ЗначениеЗаполнено(Доп_Путь) Тогда
			Параметры.Путь = Доп_Путь;
		КонецЕсли; 
	КонецЕсли; 
	
	// параметры подключения к источнику данных (в зависимости от его типа):
	ДопМаска="";
	ВыбратьПуть=Ложь;
	Путь = Параметры.Путь;
	Если Параметры.ТипИД=0 Тогда
		// файл с данными
		ПроверятьПользователя=Ложь;
		СтрИнфо="";
		Если ПустаяСтрока(Путь) Тогда
			ВыбратьПуть=Истина;
		Иначе
			ЗаданаМаскаФайлов=Ложь;
			ПутьДоступен=ДоступностьПутиИсточникаДанных(Путь,Ложь,СтрИнфо,ЗаданаМаскаФайлов);
			Если ЗаданаМаскаФайлов=Истина И (Лев(Нрег(Путь),7)<>Нрег("<Пусто>")) Тогда
				ДопМаска=СокрЛП(Путь);
				Если (СтрЧислоВхождений(Путь,"|")=0) Тогда
					ДопМаска="Маска узла COM|"+ДопМаска;
				КонецЕсли; 
				ВыбратьПуть=Истина;
			ИначеЕсли (ПутьДоступен = Ложь) И (Лев(Нрег(Путь),7)<>Нрег("<Пусто>")) Тогда
				Еррорс.Добавить("Ошибка доступности файла с данными: "+СтрИнфо);
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли Параметры.ТипИД=1 Тогда
		// база данных файловая
		Если Параметры.Платформа < 100 Тогда
			ПроверятьПользователя=Ложь;
		Иначе 
			ПроверятьПользователя=Истина;
		КонецЕсли; 
		СтрИнфо="";
		ПутьДоступен=ДоступностьПутиИсточникаДанных(Путь,Истина,СтрИнфо,);
		Если НЕ ПутьДоступен Тогда
			Еррорс.Добавить("Ошибка доступности каталога файловой базы: "+СтрИнфо);
		КонецЕсли; 
	ИначеЕсли Параметры.ТипИД=2 Тогда
		// база данных клиент-серверная
		ПроверятьПользователя=Истина;
		Если ПустаяСтрока(Параметры.БазаСервер) И НЕ ПустаяСтрока(Параметры.БазаИмя) Тогда
			Еррорс.Добавить("Не указано имя сервера для клиент-серверной базы");
		ИначеЕсли НЕ ПустаяСтрока(Параметры.БазаСервер) И ПустаяСтрока(Параметры.БазаИмя) Тогда
			Еррорс.Добавить("Не указано имя базы на сервере для клиент-серверной базы");
		ИначеЕсли ПустаяСтрока(Параметры.БазаСервер) И ПустаяСтрока(Параметры.БазаИмя) Тогда
			Еррорс.Добавить("Не указано имя сервера и имя базы на сервере для клиент-серверной базы");
		КонецЕсли; 
	ИначеЕсли Параметры.ТипИД=3 Тогда
		// ресурс интернета
		ПроверятьПользователя=Истина;
		Если ПустаяСтрока(Путь) Тогда
			Еррорс.Добавить("Не задан путь (URL) к ресурсу интернета базы данных");
		КонецЕсли; 
    Иначе
		Еррорс.Добавить("Не предусмотренный тип источника данных: ТипИДADO="+ Параметры.ТипИД);
	КонецЕсли;
	
	Если ПроверятьПользователя Тогда
		Если ПустаяСтрока(Параметры.Пользователь) И НЕ ПустаяСтрока(Параметры.Пароль) Тогда
			Еррорс.Добавить("Не указано имя пользователя базы");
		ИначеЕсли НЕ ПустаяСтрока(Параметры.Пользователь) И ПустаяСтрока(Параметры.Пароль) Тогда
			Еррорс.Добавить("Не указан пароль пользователя базы");
		ИначеЕсли ПустаяСтрока(Параметры.Пользователь) И ПустаяСтрока(Параметры.Пароль) Тогда
			Еррорс.Добавить("Не указаны имя и пароль пользователя базы");
		КонецЕсли; 
	КонецЕсли; 
	
	Если ВыбратьПуть=Истина И Еррорс.Количество()=0 Тогда
		#Если Клиент Тогда
			ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогФайла.Заголовок="Выбор пути к файлу с данными:";
			ДиалогФайла.МножественныйВыбор=Ложь;
			Если ДопМаска="" Тогда
				ДиалогФайла.ПолноеИмяФайла=Путь;
				ФайлПуть=Новый Файл(Путь);
				Если ФайлПуть.Существует() Тогда
					ДиалогФайла.Каталог=ФайлПуть.Путь;
				КонецЕсли;
				ДиалогФайла.Фильтр="Все файлы(*.*)|*.*";
			Иначе
				ДиалогФайла.Фильтр=ДопМаска+"|Все файлы(*.*)|*.*";
			КонецЕсли;
			Если ДиалогФайла.Выбрать() Тогда
				Параметры.Вставить("Путь",ДиалогФайла.ПолноеИмяФайла);
				стОпции.Вставить("Путь",ДиалогФайла.ПолноеИмяФайла);
				стОпции.Вставить("Отказ",Ложь);
			Иначе
				стОпции.Вставить("Путь",Неопределено);
				стОпции.Вставить("Отказ",Истина);
				Еррорс.Добавить("Выбор файла с данными для подключения к источнику данных отменен пользователем");
			КонецЕсли;
		#Иначе 
			Еррорс.Добавить("Не выбран файл с данными для подключения к источнику данных");
		#КонецЕсли	
	КонецЕсли;
	
	СоединениеADO=Неопределено;
		
	Если Еррорс.Количество()>0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КомпьютераИмя = ИмяКомпьютера();
	#Если Сервер Тогда
		КомпьютераИмя = КомпьютераИмя + " - сервер!";
	#КонецЕсли
	
	Попытка
		ApplicationID = "ADODB.Connection";
		//Если ПустаяСтрока(Параметры.СерверCOM) Тогда
			СоединениеADO = Новый COMОбъект(ApplicationID);
		//Иначе
		//	СоединениеADO = Новый COMОбъект(ApplicationID, Параметры.СерверCOM);
		//КонецЕсли; 
	Исключение
		Еррорс.Добавить(
		"Ошибка создания COM-объекта для подключения:
		|"+ОписаниеОшибки()+"
		|-----------------------------
		//|СерверCOM		= '"+Параметры.СерверCOM+"'
		|ИмяКомпьютера	= '"+КомпьютераИмя+"'
		|");	
		Возврат Ложь;
	КонецПопытки;
		
	// заменяем имена макроподстановок в строке соединения на значения соответствующих параметров:
	СоединениеФакт=Параметры.Соединение;
	
	// макро имена параметров подключения
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!Путь!",			Параметры.Путь);
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!БазаСервер!",	Параметры.БазаСервер);
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!БазаИмя!",		Параметры.БазаИмя);
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!Пользователь!",	Параметры.Пользователь);
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!Соединение!",	"");
	
	// макро имена переменных окружения - чистим (на всякий случай)
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"<Пусто>",		"");
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!стОпции!",		"");
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!СоединениеADO!",	"");
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!Результат!",	"");
	СоединениеФакт=СтрЗаменить(СоединениеФакт,"!Еррорс!",		"");
	
	Параметры.Соединение = СтрЗаменить(СоединениеФакт,"!Пароль!", Параметры.Пароль);
	СоединениеФакт= СтрЗаменить(СоединениеФакт,"!Пароль!", "***");
	выхСтрокаСоединенияДляСообщения = СоединениеФакт;
	
	// макро имена параметров подключения
	Результат = Неопределено;
	СоединениеADO.ConnectionTimeOut = 10;
	СоединениеADO.CommandTimeout = 20;
	СоединениеADO.CursorLocation = 3; // курсоры на стороне клиента
	Попытка
		СоединениеADO.Open(Параметры.Соединение, Параметры.Пользователь, Параметры.Пароль, -1); // синхронное подключение
		Результат = 1;
	Исключение
		СтрЕррор = 
		"Ошибка инициализации подключения:
		|	"+ОписаниеОшибки()+"
		|Фактическая строка соединения с базой:
		|	"+СоединениеФакт+"
		|";
		Еррорс.Добавить(СтрЕррор);
		Результат=-1;
	КонецПопытки;
	
	Если Еррорс.Количество()>0 Тогда
		Результат=-1;
	Иначе
		Если ТипЗнч(Результат)=Тип("Число") Тогда
			Если Результат<0 Тогда
				Результат=-1;
			ИначеЕсли Результат>0 Тогда
				Результат=+1;
			КонецЕсли; 
		КонецЕсли; 
		Если Результат<>1  Тогда
			ЕррорТекст="Не проработанная ошибка при выполнении модуля инициализации подключения";
			Если Результат=-1 Тогда
				ЕррорТекст=ЕррорТекст+" (фатального характера)";
			КонецЕсли; 
			Еррорс.Добавить(ЕррорТекст);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат (Результат=1);
КонецФункции

// Параметры - ПолучитьИсточникДанныхADO()
Процедура DisconnectADO(ИсточникДанных, СоединениеADO, стОпции=Неопределено, Еррорс=Неопределено) Экспорт
	Еррорс=Новый Массив;
	//Если НЕ ПустаяСтрока(Параметры.Disconnect) Тогда
		// заполним структуру параметров для подключению к источнику данных (тщательно все проверив):
		 
		// дополнительные параметры для соединения к источнику данных
		Если ТипЗнч(стОпции) <> Тип("Структура") Тогда
			стОпции = Новый Структура;
		КонецЕсли;
		
		Доп_Путь=Неопределено;
		Если стОпции.Свойство("Путь",Доп_Путь) Тогда
			// передали другой непустой путь - используем его
			Если ЗначениеЗаполнено(Доп_Путь) Тогда
				Параметры.Путь=Доп_Путь;
			КонецЕсли; 
		КонецЕсли;
				
		Если ИсточникДанных.ТипИД=0 И (Лев(Нрег(ИсточникДанных.Путь),7)=Нрег("<Пусто>")) Тогда
			// выбор пути для сохранения нового файла с данными
			#Если Клиент Тогда
				ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
				ДиалогФайла.Заголовок="Выбор пути к файлу для сохранения данных:";
				ДиалогФайла.МножественныйВыбор=Ложь;
				ДиалогФайла.Фильтр=Сред(Параметры.Путь,8);
				Если ПустаяСтрока(ДиалогФайла.Фильтр) Тогда
					ДиалогФайла.Фильтр="Все файлы(*.*)|*.*";
				КонецЕсли; 
				Если ДиалогФайла.Выбрать() Тогда
					Параметры.Вставить("Путь",ДиалогФайла.ПолноеИмяФайла);
					стОпции.Вставить("Путь",ДиалогФайла.ПолноеИмяФайла);
					стОпции.Вставить("Отказ",Ложь);
				Иначе
					стОпции.Вставить("Путь",Неопределено);
					стОпции.Вставить("Отказ",Истина);
					Еррорс.Добавить("Выбор пути для сохранения данных нового файла с данными отменен пользователем");
				КонецЕсли;
			#Иначе 
				Еррорс.Добавить("Не задан путь к файлу для сохранения данных нового файла");
			#КонецЕсли	
		КонецЕсли;
		 
		Попытка
			СоединениеADO.Close();
		Исключение
			Еррорс.Добавить(
			"Ошибка выполнения модуля закрытия соединения:
			|"+ОписаниеОшибки()+"
			|");
		КонецПопытки;
	//КонецЕсли; 
	СоединениеADO=Неопределено;
	
КонецПроцедуры

Функция ДоступностьПутиИсточникаДанных(Путь,Знач ВидПутиКаталог=Истина,СтрИнфо,ЗаданаМаскаФайлов=Ложь) Экспорт
	СтрИнфо="";
	ЗаданаМаскаФайлов=Ложь;
	
	ПрефиксНЛФС="";
	Если (Лев(Нрег(Путь),7)=Нрег("<Пусто>")) Тогда
		СтрИнфо="выбирается при закрытии соединения";
		Если (Найти(Путь,"*")>0)ИЛИ(Найти(Путь,"?")>0) Тогда
			ЗаданаМаскаФайлов=Истина;
			СтрИнфо = СтрИнфо + " (по маске файлов)";
		КонецЕсли; 
		Возврат НЕ ВидПутиКаталог;
	ИначеЕсли (Лев(Нрег(Путь),5)="http:") Тогда
		ПрефиксНЛФС="http";
	ИначеЕсли (Лев(Нрег(Путь),4)="ftp:") Тогда
		ПрефиксНЛФС="ftp";
	КонецЕсли; 
	
	Если ВидПутиКаталог=Истина Тогда
		МетаИмяПути = "каталог";
	ИначеЕсли ВидПутиКаталог=Ложь Тогда
		МетаИмяПути = "файл";
	Иначе
		// всякие http, ftp ресурсы - непроверяем
		Если НЕ ПустаяСтрока(ПрефиксНЛФС) Тогда
			СтрИнфо = "ресурс " + ПрефиксНЛФС + " не проверяется";
		КонецЕсли; 
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПрефиксНЛФС) Тогда
		СтрИнфо = МетаИмяПути + " по " + ПрефиксНЛФС + " не проверяется";
		Возврат Истина;
	КонецЕсли; 
	
	Если ПустаяСтрока(Путь) Тогда
		СтрИнфо = МетаИмяПути + " не задан";
		Возврат Ложь;
	КонецЕсли;
	
	Если (Найти(Путь,"*")>0)ИЛИ(Найти(Путь,"?")>0) Тогда
		ЗаданаМаскаФайлов=Истина;
		СтрИнфо = "задана маска файлов";
		Возврат НЕ ВидПутиКаталог;
	КонецЕсли; 
	
	#Если Сервер Тогда
	Если НЕ (Найти(Врег(СтрокаСоединенияИнформационнойБазы()), "FILE=") = 1) Тогда
		МетаИмяПути=МетаИмяПути+" на сервере 1С";
	КонецЕсли;
	#КонецЕсли	

	Файл = Новый Файл(Путь);
	Если НЕ Файл.Существует() Тогда
		СтрИнфо = МетаИмяПути + " не существует";
		Возврат Ложь;
	КонецЕсли;
	
	Если ВидПутиКаталог=Истина Тогда
		Если НЕ Файл.ЭтоКаталог() Тогда
			СтрИнфо = МетаИмяПути + " не является каталогом файлов";
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если НЕ Файл.ЭтоФайл() Тогда
			СтрИнфо = МетаИмяПути + " является каталогом файлов";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ДоступностьПутиИсточникаДанных()

// функция возвращает текста запроса, исключив из него строчные комментарии SQL и 1С
// формирует соответствие описаний итогов в батчах пакета запросов, заданых в комментариях
Функция ОбработатьКомментарииЗапросаADO(ТекстЗапроса0,соИтогиБатчей=Неопределено) Экспорт
	ПарситьИтоги = (типЗнч(соИтогиБатчей) = Тип("Соответствие"));
	ТекстЗапросаО="";
	ТекстЗапросаК="";
	
	ЧС = СтрЧислоСтрок(ТекстЗапроса0);
	ЧО = 0;
	ЧК = 0;
	Для О=1 По ЧС Цикл
		// вырезаем из текста запроса строчные комментарии SQL и 1C
		СтрО = СтрПолучитьСтроку(ТекстЗапроса0,О);
		СтрС = СокрЛП(СтрО);
		ПриЗ = Лев(СтрС,2);
		Если ПриЗ = "--" ИЛИ ПриЗ = "//" Тогда
			Если ПарситьИтоги Тогда
				// собираем строчные комментарии для обработки описаний итогов в батчах пакета запросов
				ТекстЗапросаК = ТекстЗапросаК + ?(ЧК = 0, "", " ") + СокрЛП(Сред(СтрС,3));
				ЧК = ЧК + 1;
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		ТекстЗапросаО = ТекстЗапросаО + ?(ЧО = 0, "", Символы.ПС) + СтрО;
		ЧО = ЧО + 1;
	КонецЦикла;
	
	Если ПарситьИтоги Тогда
		соИтогиБатчей.Очистить();
		
		ДС0 = СтрДлина(ТекстЗапросаК);
		Если ДС0 > 0 Тогда
			// нормализуем текст комментария, заменив спецсимволы пробелами 
			ТекстЗапросаК = СтрЗаменить(ТекстЗапросаК, Символы.ВК, " ");
			ТекстЗапросаК = СтрЗаменить(ТекстЗапросаК, Символы.ВТаб, " ");
			ТекстЗапросаК = СтрЗаменить(ТекстЗапросаК, Символы.НПП, " ");
			ТекстЗапросаК = СтрЗаменить(ТекстЗапросаК, Символы.ПФ, " ");
			ТекстЗапросаК = СтрЗаменить(ТекстЗапросаК, Символы.Таб, " ");
			ДС1 = 0;
			Пока ДС1 <> ДС0 Цикл
				// уберем повторяющие пробелы 
				ДС0 = СтрДлина(ТекстЗапросаК);
				ТекстЗапросаК = СтрЗаменить(ТекстЗапросаК, "  ", " ");
				ДС1 = СтрДлина(ТекстЗапросаК);
			КонецЦикла;
			//ViewValue(Символы.ПС+ТекстЗапросаК+Символы.ПС,"Нормализованный текст комментариев");
			
			мсИтогиБатчей = Новый Массив;
			Пока СтрДлина(ТекстЗапросаК) > 0 Цикл
				ТекПоз1 = Найти(ТекстЗапросаК,"{");
				ТекПоз2 = Найти(ТекстЗапросаК,"}");
				Если ТекПоз1 > 0 И ТекПоз2 > 0 Тогда
					Если ТекПоз2 > ТекПоз1 Тогда
						СтрокаИтогов0 = СокрЛП(Сред(ТекстЗапросаК, ТекПоз1 + 1, ТекПоз2 - ТекПоз1-1));
						СтрокаИтогов1 = "";
						Если СтрДлина(СтрокаИтогов0) > 0 Тогда
							Если (Лев(ВРег(СтрокаИтогов0),5) = "ИТОГИ") Тогда
								СтрокаИтогов1 = СокрЛП(Сред(СтрокаИтогов0,6));
							ИначеЕсли (Лев(ВРег(СтрокаИтогов0),6) = "TOTALS") Тогда
								СтрокаИтогов1 = СокрЛП(Сред(СтрокаИтогов0,7));
							КонецЕсли;
							Если НЕ ПустаяСтрока(СтрокаИтогов1) Тогда
								мсИтогиБатчей.Добавить(СтрокаИтогов1);
							КонецЕсли; 
						КонецЕсли; 
						ТекстЗапросаК = Сред(ТекстЗапросаК, ТекПоз2 + 1);
					Иначе
						// закрывающая скобка '}' оказалась перед открывающейся '{'
						ТекстЗапросаК = Сред(ТекстЗапросаК, ТекПоз1); // продолжим обработку с открывающей скобки
					КонецЕсли; 
				Иначе
					// нет одной из скобок - перываем обработку
					Прервать;
				КонецЕсли; 
			КонецЦикла;
			
			Если мсИтогиБатчей.Количество() > 0 Тогда
				// заполним соответствие описаний итогов в батчах пакета запросов     
				ИндексСтрокиИтогов = -1;
				Для каждого СтрокаИтогов0 Из мсИтогиБатчей Цикл
					СтрокаИтогов1 = "";
					ЧислоСкобка1 = СтрЧислоВхождений(СтрокаИтогов0,"[");
					ЧислоСкобка2 = СтрЧислоВхождений(СтрокаИтогов0,"]");
					Если ЧислоСкобка1 = 0 И ЧислоСкобка2 = 0 Тогда
						ИндексСтрокиИтогов = ИндексСтрокиИтогов + 1;
						ИндексБатча = -1;
						СтрокаИтогов1 = СтрокаИтогов0;
					ИначеЕсли ЧислоСкобка1 = 1 И ЧислоСкобка2 = 1 Тогда
						ИндексСтрокиИтогов = ИндексСтрокиИтогов + 1;
						СтрокаИтогов0 = СтрЗаменить(СтрокаИтогов0,"[",Символы.ПС);
						СтрокаИтогов0 = СтрЗаменить(СтрокаИтогов0,"]",Символы.ПС);
						Попытка
							ИндексБатча = Цел(СокрЛП(СтрПолучитьСтроку(СтрокаИтогов0,2)));
						Исключение
							ИндексБатча = -1;
						КонецПопытки;
						СтрокаИтогов1 = СокрЛП(СтрПолучитьСтроку(СтрокаИтогов0,3));
					КонецЕсли; 
					Если НЕ ПустаяСтрока(СтрокаИтогов1) Тогда
						Если ИндексБатча < 0 Тогда
							соИтогиБатчей[ИндексСтрокиИтогов] = СтрокаИтогов1;
						Иначе
							соИтогиБатчей[ИндексБатча] = СтрокаИтогов1;
						КонецЕсли; 
					КонецЕсли; 
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ТекстЗапросаО;
КонецФункции 

Функция ТипИДADO_УстановитьПоУмолчанию(ИсточникДанныхADO, ТипИДЗначение) Экспорт
	
	Если ИсточникДанныхADO.ТипИД <> ТипИДЗначение Тогда
		ИсточникДанныхADO.ТипИД = ТипИДЗначение;
	КонецЕсли; 
    ПлатформаПар = ПараметрыПлатформыADO_Получить(ИсточникДанныхADO.Платформа);
		
	// установим строку соединения, по параметрам платформы
	Если ТипИДЗначение=0 Тогда
		Если ЗначениеЗаполнено(ПлатформаПар.Путь) Тогда
			// установим маску файлов, если указана
			ИсточникДанныхADO.Путь=ПлатформаПар.Путь;
		КонецЕсли; 
		ИсточникДанныхADO.Соединение=ПлатформаПар.Соединение0;
	ИначеЕсли ТипИДЗначение=1 Тогда
		ИсточникДанныхADO.Соединение=ПлатформаПар.Соединение1;
	ИначеЕсли ТипИДЗначение=2 Тогда
		ИсточникДанныхADO.Соединение=ПлатформаПар.Соединение2;
	ИначеЕсли ТипИДЗначение=3 Тогда
		ИсточникДанныхADO.Соединение=ПлатформаПар.Соединение3;
	Иначе
		ИсточникДанныхADO.Соединение="";
	КонецЕсли;
	Возврат ПлатформаПар;
	
КонецФункции 

Функция ПараметрыПлатформыADO_Получить(ПлатформаЗначение) Экспорт
	ПлатформаПар=Новый Структура(
	"OLEAppID,COMAppID,isТипИД0,isТипИД1,isТипИД2,isТипИД3,Путь,"+
	"Соединение0,Соединение1,Соединение2,Соединение3,"+
	"OLEConnect,OLEDisconnect");
	
	isТипИД0=Ложь;
	isТипИД1=Ложь;
	isТипИД2=Ложь;
	isТипИД3=Ложь;
	Стр = мПлатформыADODB.Найти(ПлатформаЗначение,"Код");
	Если Стр<>Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПлатформаПар,Стр);
		ТипыИД=Стр.ТипыИД;
		isТипИД0=Сред(ТипыИД,1,1);
		isТипИД1=Сред(ТипыИД,2,1); 
		isТипИД2=Сред(ТипыИД,3,1);
		isТипИД3=Сред(ТипыИД,4,1);
	КонецЕсли;
	ПлатформаПар.Вставить("isТипИД0",НЕ(isТипИД0="0" ИЛИ ПустаяСтрока(isТипИД0)));
	ПлатформаПар.Вставить("isТипИД1",НЕ(isТипИД1="0" ИЛИ ПустаяСтрока(isТипИД1)));
	ПлатформаПар.Вставить("isТипИД2",НЕ(isТипИД2="0" ИЛИ ПустаяСтрока(isТипИД2)));
	ПлатформаПар.Вставить("isТипИД3",НЕ(isТипИД3="0" ИЛИ ПустаяСтрока(isТипИД3)));
	
	Возврат ПлатформаПар;
КонецФункции

Функция ПараметрыПлатформыADO_УстановитьПоУмолчанию(ИсточникДанных, ПлатформаЗначение) Экспорт
	
	Если ИсточникДанных.Платформа <> ПлатформаЗначение Тогда
		ИсточникДанных.Платформа = ПлатформаЗначение;
	КонецЕсли;
    ПлатформаПар = ПараметрыПлатформыADO_Получить(ПлатформаЗначение);
	Если ПлатформаПар.isТипИД1 Тогда
		ИсточникДанных.ТипИД=1;
		ИсточникДанных.Соединение=ПлатформаПар.Соединение1;
	ИначеЕсли ПлатформаПар.isТипИД2 Тогда
		ИсточникДанных.ТипИД=2;
		ИсточникДанных.Соединение=ПлатформаПар.Соединение2;
	ИначеЕсли ПлатформаПар.isТипИД0 Тогда
		ИсточникДанных.ТипИД=0;
		ИсточникДанных.Соединение=ПлатформаПар.Соединение0;
	ИначеЕсли ПлатформаПар.isТипИД3 Тогда
		ИсточникДанных.ТипИД=3;
		ИсточникДанных.Соединение=ПлатформаПар.Соединение3;
	Иначе
		ИсточникДанных.ТипИД=-1;
		ИсточникДанных.Соединение="";
	КонецЕсли;
	
	Если ТипИДADO=0 Тогда
		// источник - файл с данными
		Если ЗначениеЗаполнено(ПлатформаПар.Путь) Тогда
			// установим маску файлов, если указана
			ИсточникДанных.Путь = ПлатформаПар.Путь;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ПлатформаПар;
КонецФункции

Функция ПолучитьСоединениеADO(Переустановить = Ложь, Отключиться = Ложь, ВывестиСтрокуСоединения = Ложь)
	
	Если мКомандаADO <> Неопределено Тогда
		мСоединениеADO = мКомандаADO.ActiveConnection;
	КонецЕсли; 
	Если Ложь
		Или мСоединениеADO = Неопределено 
		Или Переустановить
	Тогда
		ИсточникДанных = ПолучитьИсточникДанныхADO();
		Еррорс = "";
		СтрокаСоединенияДляСообщения = "";
		Если НЕ ConnectADO(ИсточникДанных, мСоединениеADO, , Еррорс, СтрокаСоединенияДляСообщения) Тогда
			//ОчиститьСообщения();
			ТекстСообщения = "Ошибки при подключении к источнику данных ADO:";
			о=0;
			Для каждого Ерр Из Еррорс Цикл
				о=о+1;
				ТекстСообщения = ТекстСообщения + Символы.ПС + ""+о+") "+Ерр;
			КонецЦикла;
			ЛксСообщитьСУчетомМодальности(ТекстСообщения, МодальныйРежим, СтатусСообщения.Внимание);
			мСоединениеADO = Неопределено;
		Иначе
			Если ВывестиСтрокуСоединения Тогда
				ЛксСообщитьСУчетомМодальности("Соединение установлено. Фактическая строка соединения:
				|" + СтрокаСоединенияДляСообщения, МодальныйРежим);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	Если Отключиться Тогда
		DisconnectADO(ИсточникДанных, мСоединениеADO, Ложь);
	КонецЕсли; 
	Возврат мСоединениеADO;
	
КонецФункции

Функция ПолучитьИсточникДанныхADO()
	
	ИсточникДанныхADO = Новый Структура("Платформа,Путь,БазаСервер,БазаИмя,Пользователь,Пароль,ТипИД,Соединение");
	ИсточникДанныхADO.Платформа = ПлатформаADO;
	ИсточникДанныхADO.Путь = ПутьКИсточникуДанныхADO;
	ИсточникДанныхADO.БазаСервер = БазаСерверADO;
	ИсточникДанныхADO.БазаИмя = БазаИмяADO;
	ИсточникДанныхADO.Пользователь = ПользовательADO;
	ИсточникДанныхADO.Пароль = ПарольADO;
	ИсточникДанныхADO.ТипИД = ТипИДADO;
	ИсточникДанныхADO.Соединение = СтрокаСоединенияADO;
	Возврат ИсточникДанныхADO;
	 
КонецФункции

Процедура УстановитьИсточникДанныхADO(ПараметрыADO)

	ЭтаФорма.ПлатформаADO = ПараметрыADO.Платформа;
	ЭтаФорма.БазаСерверADO = ПараметрыADO.БазаСервер;
	ЭтаФорма.БазаИмяADO = ПараметрыADO.БазаИмя;
	ЭтаФорма.ПользовательADO = ПараметрыADO.Пользователь;
	ЭтаФорма.ПарольADO = ПараметрыADO.Пароль;
	ЭтаФорма.ПутьКИсточникуДанныхADO = ПараметрыADO.Путь;
	ЭтаФорма.ТипИДADO = ПараметрыADO.ТипИД;
	ЭтаФорма.СтрокаСоединенияADO = ПараметрыADO.Соединение;

КонецПроцедуры


// Форма ADO

Процедура ПлатформаADOПриИзменении(Элемент =  Неопределено)
	
	Элемент = ЭлементыФормы.ПлатформаADO;
	ИсточникДанныхADO = ПолучитьИсточникДанныхADO();
	
	// по значению платформы заполним настройки по умолчанию
	ПлатфПар = ПараметрыПлатформыADO_УстановитьПоУмолчанию(ИсточникДанныхADO, Элемент.Значение);
	
	//// переинициализируем контекстное меню для вставки ключевых слов строку соединений:
	//Если (Элемент.Значение>=0001)И(Элемент.Значение<0100) Тогда
	//	//платформа "Произвольный COM" или подключения ч/з ADO:
	//	ВидМеню=2; // доп.команды для ввода провайдеров OLEDB, драйверов ODBC и прочих параметров соединения
	//Иначе
	//	ВидМеню=1;
	//КонецЕсли; 
	//Действие=Новый Действие("СоединениеМенюВставитьМакроимя");
	//КонтекстноеМенюЗаполнить(ЭлементыФормы.СоединениеМеню.Кнопки.Подменю,ВидМеню,Действие);
	УстановитьИсточникДанныхADO(ИсточникДанныхADO);
	ФормаКонтроль_ПлатформаADO(ПлатфПар);
	ФормаКонтроль_ТипИДADO();

КонецПроцедуры

Процедура ФормаКонтроль_ТипИДADO()
	
	мСоединениеADO = Неопределено;
	ФайловыйИД=Истина;
	ПутьДоступен=Неопределено;
	ПутьМаскаФайлов=Неопределено;
	ДоступИнфо="";
	Если ТипИДADO=0 Тогда
		НадписьПутьЗаголовок = "Путь к файлу с данными:";
		Если ПустаяСтрока(ПутьКИсточникуДанныхADO) Тогда
			ДоступИнфо = "выбирается перед подключением";
			ПутьДоступен=Истина;
		Иначе
			ПутьДоступен=ДоступностьПутиИсточникаДанных(ПутьКИсточникуДанныхADO,Ложь,ДоступИнфо,ПутьМаскаФайлов);
			Если ПутьМаскаФайлов=Истина И (Лев(Нрег(ПутьКИсточникуДанныхADO),7)<>Нрег("<Пусто>")) Тогда
				ДоступИнфо=ДоступИнфо+" для выбора перед подключением";
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ТипИДADO=1 Тогда
		НадписьПутьЗаголовок="Путь к каталогу файловой базы данных:";
		ПутьДоступен=ДоступностьПутиИсточникаДанных(ПутьКИсточникуДанныхADO,Истина,ДоступИнфо,ПутьМаскаФайлов);
		Если ПутьМаскаФайлов=Истина Тогда
			ДоступИнфо=ДоступИнфо+" !!!";
		КонецЕсли; 
	ИначеЕсли ТипИДADO=2 Тогда
		НадписьПутьЗаголовок="Путь к источнику данных:";
		ФайловыйИД=Ложь;
	ИначеЕсли ТипИДADO=3 Тогда
		//НадписьПутьЗаголовок="Путь (URL) к ресурсу интернета:";
		НадписьПутьЗаголовок = "Путь к источнику данных:";
	КонецЕсли; 
	ЭлементыФормы.НадписьПутьКИсточникуДанныхADO.Заголовок=НадписьПутьЗаголовок+?(ПустаяСтрока(ДоступИнфо),""," ")+ДоступИнфо;
	//Шрифт=ЭлементыФормы.НадписьТипИД.Шрифт;
	//Если ПутьДоступен=Неопределено ИЛИ ПутьДоступен=Истина Тогда
	//	Если ПутьДоступен=Истина И НЕ ПустаяСтрока(ДоступИнфо) Тогда
	//		ЦветТекста=Новый Цвет(0, 0, 255);	// голубой
	//	Иначе
	//		ЦветТекста=Новый Цвет(0, 0, 128);	// темно-синий
	//	КонецЕсли;
	//Иначе
	//	Если НРег(ПутьКИсточникуДанныхADO)=Нрег("<Пусто>") Тогда
	//		ЦветТекста=Новый Цвет(128, 0, 128);		// лиловым жырным
	//	Иначе
	//		ЦветТекста=Новый Цвет(255, 0, 0);		// красный жырным
	//	КонецЕсли; 
	//	Шрифт=Новый Шрифт(Шрифт,,,Истина);
	//КонецЕсли;
	//ЭлементыФормы.НадписьПуть.ЦветТекста=ЦветТекста;
	//ЭлементыФормы.НадписьПуть.Шрифт=Шрифт;
	Если ФайловыйИД Тогда
		ЭлементыФормы.ПанельПутьИД.ТекущаяСтраница=ЭлементыФормы.ПанельПутьИД.Страницы.ФайловыйИД;
	Иначе
		ЭлементыФормы.ПанельПутьИД.ТекущаяСтраница=ЭлементыФормы.ПанельПутьИД.Страницы.СерверныйИД;
	КонецЕсли; 

КонецПроцедуры

Процедура ФормаКонтроль_ПлатформаADO(ПлатфПар)
	Если ПлатфПар=Неопределено Тогда
	    ПлатфПар = ПараметрыПлатформыADO_Получить(ПлатформаADO);
	КонецЕсли;
	ЭлементыФормы.ТипИД0.Доступность=ПлатфПар.isТипИД0;
	ЭлементыФормы.ТипИД1.Доступность=ПлатфПар.isТипИД1;
	ЭлементыФормы.ТипИД2.Доступность=ПлатфПар.isТипИД2;
	ЭлементыФормы.ТипИД3.Доступность=ПлатфПар.isТипИД3;
КонецПроцедуры 

Процедура ПутьКИсточникуДанныхADOПриИзменении(Элемент)
	
	ФормаКонтроль_ТипИДADO();

КонецПроцедуры

Процедура ПутьКИсточникуДанныхADOНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ВыборФайла=Ложь;
	Если ТипИДADO=0 Тогда
		ВыборФайла=Истина;
		НадписьПутьЗаголовок="Выбор пути к файлу с данными:";
	ИначеЕсли ТипИДADO=1 Тогда
		НадписьПутьЗаголовок="Выбор пути к каталогу файловой базы данных:";
	ИначеЕсли ТипИДADO=2 Тогда
		НадписьПутьЗаголовок="Выбор пути к источнику данных:";
		Возврат;
	ИначеЕсли ТипИДADO=3 Тогда
		НадписьПутьЗаголовок="Выбор пути (URL) к ресурсу интернета:";
		Возврат;
	КонецЕсли;
	
	ДиалогФайла = Новый ДиалогВыбораФайла(?(ВыборФайла=Ложь,РежимДиалогаВыбораФайла.ВыборКаталога,РежимДиалогаВыбораФайла.Открытие));
	ДиалогФайла.Заголовок=НадписьПутьЗаголовок;
	ДиалогФайла.МножественныйВыбор=Ложь;
	
	Если ВыборФайла=Ложь Тогда
		ДиалогФайла.Каталог=ПутьКИсточникуДанныхADO;
	Иначе
		ДопМаска="";
		Если (Найти(ПутьКИсточникуДанныхADO,"*")>0)ИЛИ(Найти(ПутьКИсточникуДанныхADO,"?")>0) Тогда
			Если (Лев(Нрег(ПутьКИсточникуДанныхADO),7)=Нрег("<Пусто>")) Тогда
				ДопМаска=СокрЛП(Сред(ПутьКИсточникуДанныхADO,8));
			Иначе
				ДопМаска=СокрЛП(ПутьКИсточникуДанныхADO);
			КонецЕсли;
			Если (СтрЧислоВхождений(ПутьКИсточникуДанныхADO,"|")=0) Тогда
				ДопМаска="Задано в форме узла("+ДопМаска+")|"+ДопМаска;
			КонецЕсли; 
		КонецЕсли;
		Если ДопМаска="" Тогда
			ДиалогФайла.ПолноеИмяФайла=ПутьКИсточникуДанныхADO;
			ФайлПуть=Новый Файл(ПутьКИсточникуДанныхADO);
			Если ФайлПуть.Существует() Тогда
				ДиалогФайла.Каталог=ФайлПуть.Путь;
			КонецЕсли;
			ДиалогФайла.Фильтр="Все файлы(*.*)|*.*";
		Иначе
			ДиалогФайла.Фильтр=ДопМаска+"|Все файлы(*.*)|*.*";
		КонецЕсли; 
	КонецЕсли; 
	
	Если ДиалогФайла.Выбрать() Тогда
		Если ВыборФайла=Ложь Тогда
			ЭтаФорма.ПутьКИсточникуДанныхADO = ДиалогФайла.Каталог;
			ЭтаФорма.ПутьКИсточникуДанныхADO = ПутьКИсточникуДанныхADO + ?(Прав(ПутьКИсточникуДанныхADO,1)="\","","\");
		Иначе
			ЭтаФорма.ПутьКИсточникуДанныхADO = СокрЛП(ДиалогФайла.ПолноеИмяФайла);
		КонецЕсли; 
		ПутьКИсточникуДанныхADOПриИзменении(Элемент)
	КонецЕсли; 

КонецПроцедуры

Процедура ПутьКИсточникуДанныхADOОчистка(Элемент, СтандартнаяОбработка)
	
    ПлатфПар = ПараметрыПлатформыADO_Получить(Элемент.Значение);
	Дефолт = ПлатфПар.Путь;
	Если ЗначениеЗаполнено(Дефолт)И(Элемент.Значение<>Дефолт) Тогда
		СтандартнаяОбработка = Ложь;
		Ответ = Вопрос("Установить значение по умолчанию ???", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
		Если НЕ Ответ Тогда
			Возврат;
		КонецЕсли;
		Элемент.Значение = Дефолт;
		ПутьКИсточникуДанныхADOПриИзменении(Элемент)
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПробноеПодключениеADOНажатие(Элемент)
	
	СоединениеADO = ПолучитьСоединениеADO(Истина, Истина, Истина);

КонецПроцедуры

Процедура ТипИДADOПриИзменении(Элемент)

	ИсточникДанныхADO = ПолучитьИсточникДанныхADO();
    ПлатфПар = ТипИДADO_УстановитьПоУмолчанию(ИсточникДанныхADO, Элемент.Значение);
	УстановитьИсточникДанныхADO(ИсточникДанныхADO);
	ФормаКонтроль_ПлатформаADO(ПлатфПар);
	ФормаКонтроль_ТипИДADO();
	
КонецПроцедуры

Процедура ОткрытьОтладчик(Кнопка)
	
	ВызватьИсключение ирНеглобальный.ПолучитьПриглашениеОткрытьОтладчикЛкс();

КонецПроцедуры


ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляОтбора);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляПорядка);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляВыбора);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляWMI);

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяФайла = "";
мИмяПути = "";
ТекущийКлассWMI = "Win32_Process";
мПлатформа = ирКэш.Получить();
ЭтаФорма.ЗагружатьЭлементов = 100000;
ЭлементыФормы.ЗагружатьЭлементов.СписокВыбора.Добавить(100);
ЭлементыФормы.ЗагружатьЭлементов.СписокВыбора.Добавить(1000);
ЭлементыФормы.ЗагружатьЭлементов.СписокВыбора.Добавить(10000);
ЭлементыФормы.ЗагружатьЭлементов.СписокВыбора.Добавить(100000);
ЭлементыФормы.ЗагружатьЭлементов.СписокВыбора.Добавить(500000);
//мРезультатЗапроса = Новый ТаблицаЗначений;

мЗаголовокФормы = Заголовок;
мТекущаяСтрока = НеОпределено;
//мИдетДобавление = Ложь;
мАктивизированаДобавляемаяЗапись = Ложь;
//мТаблицаЗагружена = Ложь;
//мСводнаяТаблицаЗагружена = Ложь;
мИзмененияМенеджераВременныхТаблиц = Новый Структура;
ЭлементыФормы.КлассыWMI.ОтборСтрок.Имя.Использование = Истина;
ЭлементыФормы.КлассыWMI.ОтборСтрок.Имя.ВидСравнения = ВидСравнения.Содержит;

мТаблицаКоординат = Новый ТаблицаЗначений;
мТаблицаКоординат.Колонки.Добавить("Правило");
мТаблицаКоординат.Колонки.Добавить("НачальнаяСтрока");
мТаблицаКоординат.Колонки.Добавить("НачальнаяКолонка");
мТаблицаКоординат.Колонки.Добавить("КонечнаяСтрока");
мТаблицаКоординат.Колонки.Добавить("КонечнаяКолонка");

//ЭлементОтбораДействие = ЭлементыФормы.СобытияСУБД.ОтборСтрок.Действие;
//ЭлементОтбораДействие.Использование = Истина;
//ЭлементОтбораДействие.ВидСравнения = ВидСравнения.НеРавно;
//ЭлементОтбораДействие.Значение = "getExecSQLStatistics";

ДеревоЗапросов.Колонки.Добавить("СтрокаДанных");
мРежимДереваЗапроса = Ложь;
мРежимСворачивания = Истина;
мРежимРедактирования = Ложь;
мЗапросЗагруженВКонсоль = Ложь;
мСлужебноеПолеТекстовогоДокумента = ирКэш.Получить().СлужебноеПолеТекстовогоДокумента;

мСписокПереключаемыхСтраниц = Новый Массив();
мСписокПереключаемыхСтраниц.Добавить(ЭлементыФормы.ПанельЗапроса.Страницы.Компоновка);
мСписокПереключаемыхСтраниц.Добавить(ЭлементыФормы.ПанельЗапроса.Страницы.Построитель);
мСписокПереключаемыхСтраниц.Добавить(ЭлементыФормы.ПанельЗапроса.Страницы.WQL);
мСписокПереключаемыхСтраниц.Добавить(ЭлементыФормы.ПанельЗапроса.Страницы.ADO);
мСхемаКомпоновки = Новый СхемаКомпоновкиДанных;
ИсточникДанных = ЛксДобавитьЛокальныйИсточникДанных(мСхемаКомпоновки);
мНаборДанных = ЛксДобавитьНаборДанныхЗапрос(мСхемаКомпоновки.НаборыДанных, ИсточникДанных);

мПлатформыADODB = ирНеглобальный.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("ПлатформыADODB"),,, Истина);
Для Каждого СтрокаПлатформы Из мПлатформыADODB Цикл
	ЭлементыФормы.ПлатформаADO.СписокВыбора.Добавить(СтрокаПлатформы.Код, СтрокаПлатформы.ИмяПолное);
КонецЦикла;

// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1009788#1009788
ОписаниеТипов = ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы();
ДополнительныеТипы = Новый Массив();
// Типы взяты из типа ОписаниеИсточникаДанных 
ДополнительныеТипы.Добавить(Тип("РезультатЗапроса"));
ДополнительныеТипы.Добавить(Тип("ОбластьЯчеекТабличногоДокумента"));
ДополнительныеТипы.Добавить(Тип("ВидТочкиМаршрутаБизнесПроцесса")); // В ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы нельзя добавить, т.к. для этого типа не поддерживается сериализация
ДополнительныеТипы.Добавить(Тип("ВидПериодаРегистраРасчета")); // В ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы нельзя добавить, т.к. для этого типа не поддерживается сериализация
ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ДополнительныеТипы);
//ОписаниеТипов = Новый ОписаниеТипов(); // Так делать нельзя, т.к. поле ввода не даст редактировать свой текст
Параметры.Колонки.Добавить("Значение", ОписаниеТипов);
мСтруктураВосстановления = ирНеглобальный.ПолучитьСтруктуруВосстановленияКонсолиЛкс("irQueryConsole");