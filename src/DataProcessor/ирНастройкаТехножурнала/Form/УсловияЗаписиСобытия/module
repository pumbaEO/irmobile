////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫЗЫВАЕМЫЕ ИЗ ОБРАБОТЧИКОВ ЭЛЕМЕНТОВ ФОРМЫ

// Закрыть форму с признаком "принять изменения"
//
Процедура КнопкаОКНажатие(Элемент)
	
	ЭтаФорма.Закрыть("ОК");
	
КонецПроцедуры

// Закрыть форму с признаком "оотменить изменения"
//
Процедура КнопкаОтменаНажатие(Элемент)
	
	ЭтаФорма.Закрыть("Отмена");
	
КонецПроцедуры

// Инициализация формы
//
Процедура ПриОткрытии()
	
	ЭлементыФормы.РедактированиеУсловийСобытия.Колонки.Свойство.ЭлементУправления.СписокВыбора = ПолучитьСписокСвойствСобытий();
	ЭлементыФормы.РедактированиеУсловийСобытия.Колонки.Сравнение.ЭлементУправления.СписокВыбора = ПолучитьСписокСравнения();
		ТабличноеПоле = ЭлементыФормы.РедактированиеУсловийСобытия;
		ТекущаяСтрока = ТабличноеПоле.Значение.Найти(ТекущееСвойство, "Свойство");
		Если ТекущаяСтрока <> Неопределено Тогда
			ТабличноеПоле.ТекущаяСтрока = ТекущаяСтрока;
			ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Значение;
		КонецЕсли; 
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура обработки события выбора
//
Процедура РедактированиеУсловийСобытияСвойствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СвойствоОбработкаВыбора(ЭлементыФормы.РедактированиеУсловийСобытия, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура обработки события показа строки
//
Процедура РедактированиеУсловийСобытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Процедура обработки события начала редактирования
//
Процедура РедактированиеУсловийСобытияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактирования(ЭлементыФормы.РедактированиеУсловийСобытия, Элемент, НоваяСтрока, Копирование);

КонецПроцедуры

// Процедура обработки события окончания ввода данных
//
Процедура РедактированиеУсловийСобытияЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Инд = РедактированиеУсловийСобытия.Индекс(ЭлементыФормы.РедактированиеУсловийСобытия.ТекущаяСтрока);
	Попытка
		РедактированиеУсловийСобытия.Получить(Инд).Значение = XMLСтрока(Число(Текст));
	Исключение
		РедактированиеУсловийСобытия.Получить(Инд).Значение = Текст;
	КонецПопытки;
	
КонецПроцедуры

// Процедура обработки события изменения данных
//
Процедура РедактированиеУсловийСобытияСвойствоПриИзменении(Элемент)
	
	ОбновитьОписаниеСвойства();
	РедактированиеЗначения(ЭлементыФормы.РедактированиеУсловийСобытия, Элемент);
	
КонецПроцедуры

// Процедура обработки события НачалоВыбора
//
Процедура РедактированиеУсловийСобытияЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЗначениеНачалоВыбора(ЭлементыФормы.РедактированиеУсловийСобытия, Элемент, СтандартнаяОбработка);

КонецПроцедуры

// Процедура обработки события ПриИзменении
//
Процедура РедактированиеУсловийСобытияСравнениеПриИзменении(Элемент)
	
	Если Элемент.Значение = "like" Тогда
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьОписаниеСвойства()
	
	СтрокаСвойства = Свойства.Найти(ЭлементыФормы.РедактированиеУсловийСобытия.ТекущаяСтрока.Свойство, "Имя");
	Если СтрокаСвойства <> Неопределено Тогда
		ОписаниеСвойства = СтрокаСвойства.Описание;
	Иначе
		ОписаниеСвойства = "Описание отсутствует";
	КонецЕсли; 

КонецПроцедуры

Процедура РедактированиеУсловийСобытияПриАктивизацииСтроки(Элемент)
	
	ОбновитьОписаниеСвойства();
	
КонецПроцедуры

Процедура РедактированиеУсловийСобытияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ОбработкаТабличнаяЧастьСтрока.ирНастройкаТехножурнала.Свойства") Тогда
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура РедактированиеУсловийСобытияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ОбработкаТабличнаяЧастьСтрока.ирНастройкаТехножурнала.Свойства") Тогда
		СтандартнаяОбработка = Ложь;
		ЭлементыФормы.РедактированиеУсловийСобытия.ДобавитьСтроку();
		ЭлементыФормы.РедактированиеУсловийСобытия.ТекущиеДанные.Свойство = ПараметрыПеретаскивания.Значение.НИмя;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанель1ВставитьШаблонДляВыбраннойТаблицы(Кнопка)
	
	Форма = ирНеглобальный.ПолучитьФормуВыбораОбъектаМетаданныхЛкс(,,,, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
	РезультатВыбора = Форма.ОткрытьМодально();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ТекущаяСтрока = ЭлементыФормы.РедактированиеУсловийСобытия.ТекущаяСтрока;
	ЛиИменаБД = Истина;
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ирНеглобальный.СтрокиРавныЛкс(ТекущаяСтрока.Свойство, "sdbl") Тогда
			ЛиИменаБД = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	ТаблицыСтруктурыБД = ирКэш.ПолучитьСтруктуруХраненияБДЛкс(ЛиИменаБД);
	СтрокаОбъектаМД = ТаблицыСтруктурыБД.Найти(РезультатВыбора.ПолноеИмяОбъекта, "ИмяТаблицы");
	Если СтрокаОбъектаМД = Неопределено Тогда
		Сообщить("Не удалось определить имя таблицы хранения для таблицы """ + РезультатВыбора.ПолноеИмяОбъекта + """");
		Возврат;
	КонецЕсли;
	ИмяТаблицы = СтрокаОбъектаМД.ИмяТаблицыХранения;
	Если ТекущаяСтрока = Неопределено Тогда
		ТекущаяСтрока = ЭлементыФормы.РедактированиеУсловийСобытия.ДобавитьСтроку();
	КонецЕсли; 
	ТекущаяСтрока.Сравнение = "like";
	ТекущаяСтрока.Значение = "%" + ИмяТаблицы + "%";
	
КонецПроцедуры

Если РедактированиеУсловийСобытия.Колонки.Найти("Значение") = Неопределено Тогда
	РедактированиеУсловийСобытия.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"), "Значение"); 
КонецЕсли;
