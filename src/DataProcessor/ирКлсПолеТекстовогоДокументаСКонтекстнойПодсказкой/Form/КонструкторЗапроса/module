// Устанавливаются снаружи
Перем мКонфигурация Экспорт;

Перем мСтараяСтраницаПанелиЧасти Экспорт;
Перем мСтараяСтраницаПанелиОсновная Экспорт;
Перем мСоответствиеЯзыков Экспорт;
Перем мТекущаяСтрокаСвязи;
Перем мТекущаяСтрокаУсловияСвязи;
Перем мТекущаяСтрокаПоляВыбора;
Перем мТекущаяСтрокаУсловия;
Перем мТекущаяСтрокаЧастиОбъединения;
Перем мТекущаяСтрокаЗапросыПакета;
Перем мТекущаяСтрокаВыбранныеТаблицы;
Перем мРежимРедактированияТекста Экспорт;

// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;
// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой

// @@@.КЛАСС.ПолеТекстоввогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	
	// Специальная обработка команд компоненты ДО
	ЭкземплярКомпоненты = ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка);
	Если ЭкземплярКомпоненты <> Неопределено Тогда
		Результат = ЭкземплярКомпоненты.Нажатие(Кнопка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущуюКомпонентуКонтекстнойПодсказки(Кнопка = Неопределено)

	Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
		ЭкземплярКомпоненты = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя];
	КонецЕсли;
	Возврат ЭкземплярКомпоненты;

КонецФункции

////////////////////////////

Процедура УстановитьДанные(НачальныйТокен = Неопределено) Экспорт
	
	ДоступныеТаблицы.Очистить();
	Состояние("Подготовка метаданных...");
	Если ТипЗнч(Конфигурация) = Тип("ОбъектМетаданныхКонфигурация") Тогда
		ЗаполнитьДоступныеТаблицы1С();
	Иначе
		ЗаполнитьДоступныеТаблицыADO();
	КонецЕсли;
	Состояние("Анализ дерева запроса...");
	ОчиститьДанные();
	Если НачальныйТокен = Неопределено Тогда
		ЗапросПакета = ДобавитьЗапросПакета();
		ДобавитьЧастьОбъединения(ЗапросПакета);
	Иначе
		ЗаполнитьПоТокену(НачальныйТокен);
	КонецЕсли;
	ЗапросыПакета.Сортировать("Порядок Убыв");
	Для Каждого ЗапросПакета Из ЗапросыПакета Цикл
		ОбновитьНаименованиеЗапроса(ЗапросПакета);
		Если Ложь
			Или ЗапросПакета.ТипЗапроса = 0
			Или ЗапросПакета.ТипЗапроса = 1
		Тогда
			ПерваяЧасть = ЗапросПакета.ЧастиОбъединения[0];
			Для Каждого ЧастьОбъединения Из ЗапросПакета.ЧастиОбъединения Цикл
				ОбновитьНаименованиеЧасти(ЧастьОбъединения);
				////Облагораживаем псевдонимы
				// Доделать обновление определений полей
				//Для Каждого СтрокаВыбраннойТаблицы Из ЧастьОбъединения.ВыбранныеТаблицы Цикл
				//	Если Не ЗначениеЗаполнено(СтрокаВыбраннойТаблицы.Имя) Тогда
				//		СтрокаВыбраннойТаблицы.Имя = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(ЧастьОбъединения.ВыбранныеТаблицы, СтрокаВыбраннойТаблицы.ИмяТаблицы, "Имя");
				//	КонецЕсли;
				//КонецЦикла;
				Индекс = 0;
				Пока Индекс < ЧастьОбъединения.ВыбранныеПоля.Количество() Цикл
					ВыбранноеПоле = ЧастьОбъединения.ВыбранныеПоля[Индекс];
					Если ПерваяЧасть = ЧастьОбъединения Тогда
						ИмяТаблицы = ЛксПолучитьПервыйФрагмент(ВыбранноеПоле.Определение);
						ИмяПоля = ЛксПолучитьПоследнийФрагмент(ВыбранноеПоле.Определение);
						Если ИмяПоля = "*" Тогда
							ЧастьОбъединения.ВыбранныеПоля.Удалить(Индекс);
							Индекс = Индекс - 1;
							Если ИмяТаблицы = ИмяПоля Тогда
								ИмяТаблицы = ЧастьОбъединения.ВыбранныеТаблицы[0].Имя;
							КонецЕсли; 
							ДоступныеПоляТаблицы = ПолучитьДоступныеПоляТаблицыПоИмени(ИмяТаблицы, ЧастьОбъединения);
							Для Каждого ДоступноеПолеТаблицы Из ДоступныеПоляТаблицы Цикл
								ДобавитьДоступноеПолеВВыбранныеПоля(ДоступноеПолеТаблицы, ЧастьОбъединения);
							КонецЦикла;
						Иначе
							Если Не ЗначениеЗаполнено(ВыбранноеПоле.Имя) Тогда
								ВыбранноеПоле.Имя = ПолучитьАвтоПсевдонимПоля(ВыбранноеПоле, ЧастьОбъединения);
							КонецЕсли; 
						КонецЕсли; 
					Иначе
						ВыбранноеПоле.Имя = ПерваяЧасть.ВыбранныеПоля[Индекс].Имя;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли; 
	КонецЦикла;
	ЭтаФорма.ЛиПакетныйЗапрос = ЗапросыПакета.Количество() > 1;
	ЛксИзменитьСвернутость(ЛиПакетныйЗапрос, ЭлементыФормы.ПанельПакета, ЭлементыФормы.вРазделительПанельПакета, Панель, "лево");
	Состояние();
	
КонецПроцедуры

Функция ПолучитьКомментарийИзТокенов(Токен1, Токен2 = Неопределено)
	
	Массив = Новый Массив();
	Если Токен1 <> Неопределено Тогда
		Массив.Добавить(Токен1);
	КонецЕсли; 
	Если Токен2 <> Неопределено Тогда
		Массив.Добавить(Токен2);
	КонецЕсли; 
	ТекстКомментария = "";
	МаркерКомментария = "//";
	Для Каждого Токен Из Массив Цикл
		ТекстТокена = ПолучитьТекстИзТокена(Токен);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(ТекстТокена);
		Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
			СтрокаТекста = ТекстовыйДокумент.ПолучитьСтроку(Счетчик);
			СтрокаТекста = Сред(СтрокаТекста, Найти(СтрокаТекста, МаркерКомментария) + СтрДлина(МаркерКомментария));
			Если ТекстКомментария <> "" Тогда
				ТекстКомментария = ТекстКомментария + Символы.ПС;
			КонецЕсли; 
			ТекстКомментария = ТекстКомментария + СтрокаТекста;
		КонецЦикла;
	КонецЦикла;
	Возврат ТекстКомментария;
	
КонецФункции

Функция ЗаполнитьПоТокену(Знач Токен, Стек = Неопределено, Знач ПсевдонимСверху = Неопределено, Знач ЗапросПакета = Неопределено,
	Знач СтруктураЧасти = Неопределено) Экспорт
	
	Данные = Токен.Data;
	Если Данные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если Стек = Неопределено Тогда
		Стек = Новый Массив();
	КонецЕсли;
	Результат = Неопределено;
	ИмяПравила = Данные.ParentRule.RuleNonterminal.Text;
	Стек.Вставить(0, ИмяПравила);
	Если Ложь
		Или ИмяПравила = "<SelectRoot>"
		Или ИмяПравила = "<CreateRoot>"
		Или ИмяПравила = "<SimpleRoot>"
	Тогда
		ЗапросПакета = ДобавитьЗапросПакета();
	ИначеЕсли ИмяПравила = "<ChooseTable>" Тогда
		ТекущийУзел = СтруктураЧасти.ВыбранныеТаблицы.Вставить(0);
		ТекущийУзел.Комментарий = ПолучитьКомментарийИзТокенов(Данные.Tokens(0), Данные.Tokens(Данные.TokenCount - 1));
	ИначеЕсли ИмяПравила = "<Where>" Тогда
		СтруктураЧасти.КомментарийОтбора = ПолучитьКомментарийИзТокенов(Данные.Tokens(1), Данные.Tokens(3));
	ИначеЕсли ИмяПравила = "<Param>" Тогда
		ВыбраннаяТаблица = СтруктураЧасти.ВыбранныеТаблицы[0];
		Если ВыбраннаяТаблица.Параметры = Неопределено Тогда
			ВыбраннаяТаблица.Параметры = Новый Массив();
		КонецЕсли; 
		ЗначениеПараметра = ПолучитьТекстИзТокена(Токен);
		ВыбраннаяТаблица.Параметры.Вставить(0, ЗначениеПараметра);
	ИначеЕсли Ложь
		Или ИмяПравила = "<CreateUnion>"
		Или ИмяПравила = "<SimpleUnion>"
		Или ИмяПравила = "<SelectUnion>"
	Тогда
		СтруктураЧасти = ДобавитьЧастьОбъединения(ЗапросПакета);
	ИначеЕсли Ложь
		Или ИмяПравила = "<UnionPart>"
	Тогда
		СтруктураЧасти = ДобавитьЧастьОбъединения(ЗапросПакета);
		СтруктураЧасти.БезДублей = Данные.Tokens(1).Data.TokenCount = 0;
	ИначеЕсли Ложь
		Или ИмяПравила = "<CreateQuery>"
		Или ИмяПравила = "<SelectQuery>"
		Или ИмяПравила = "<Query>"
	Тогда
		СтруктураЧасти.Комментарий = ПолучитьКомментарийИзТокенов(Данные.Tokens(0));
	ИначеЕсли ИмяПравила = "<SelectExpr>" Тогда
		ТекущийУзел = СтруктураЧасти.ВыбранныеПоля.Вставить(0);
		ТекущийУзел.Комментарий = ПолучитьКомментарийИзТокенов(Данные.Tokens(0), Данные.Tokens(Данные.TokenCount - 1));
		ТекущийУзел.ИД = Новый УникальныйИдентификатор();
	ИначеЕсли ИмяПравила = "<IndexExpr>" Тогда
		ТекущийУзел = ЗапросПакета.ПоляИндекса.Вставить(0);
		ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
	ИначеЕсли ИмяПравила = "<TotalsExpr>" Тогда
		ТекущийУзел = ЗапросПакета.ГруппирующиеПоляИтогов.Вставить(0);
		Если Данные.TokenCount > 1 Тогда
			ТекущийУзел.Имя = ПолучитьТекстИзТокена(Данные.Tokens(Данные.TokenCount - 1));
		КонецЕсли; 
	ИначеЕсли ИмяПравила = "<NamedExpr>" Тогда
		ТекущийУзел = ЗапросПакета.ГруппируемыеПоляИтогов.Вставить(0);
		//ТекущийУзел.Определение = ПолучитьТекстИзТокена(Данные.Tokens(1));
		ТекущийУзел.Комментарий = ПолучитьКомментарийИзТокенов(Данные.Tokens(0), Данные.Tokens(Данные.TokenCount - 1));
	ИначеЕсли ИмяПравила = "<OrderExpr>" Тогда
		ТекущийУзел = ЗапросПакета.ПоляПорядка.Вставить(0);
		Если Данные.TokenCount = 2 Тогда
			ИмяНаправления = Данные.Tokens(Данные.TokenCount - 1).Name;
			Если ИмяНаправления = "ASC" Тогда
				ТекущийУзел.Направление = НаправлениеСортировки.Возр;
			Иначе
				ТекущийУзел.Направление = НаправлениеСортировки.Убыв;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ИмяПравила = "<Parameter>" Тогда
		ИмяПараметра = Данные.Tokens(1).Data.Tokens(0).Data;
		ТекущийУзел = Параметры.Найти(НРег(ИмяПараметра), "НИмя");
		Если ТекущийУзел = Неопределено Тогда
			ТекущийУзел = Параметры.Вставить(0);
			ТекущийУзел.Имя = ИмяПараметра;
			ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ТекущийУзел);
		КонецЕсли; 
		ТекущийУзел.ЧислоОбращений = ТекущийУзел.ЧислоОбращений + 1;
	ИначеЕсли ИмяПравила = "<TableParameter>" Тогда
		ТекущийУзел = Параметры.Вставить(0);
		ТекущийУзел.Имя = Данные.Tokens(1).Data.Tokens(0).Data;
		ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ТекущийУзел);
		ТекущийУзел.Тип = "ТаблицаЗначений";
	ИначеЕсли ИмяПравила = "<Into>" Тогда
		ЗапросПакета.ТипЗапроса = 1;
		ЗапросПакета.ИмяВременнойТаблицы = ПолучитьТекстИзТокена(Данные.Tokens(1));
		ОбновитьНаименованиеЗапроса(ЗапросПакета);
	ИначеЕсли ИмяПравила = "<EmbededQuery>" Тогда
		ЗапросыВложенногоПакета = ЗапросыПакета.СкопироватьКолонки();
		ВложенныйЗапрос = ДобавитьЗапросПакета(ЗапросыВложенногоПакета);
		Если СтруктураЧасти.ВыбранныеТаблицы[0].Параметры = Неопределено Тогда
			СтруктураЧасти.ВыбранныеТаблицы[0].ВложенныйПакет = ЗапросыВложенногоПакета;
			ЗаполнитьПоТокену(Токен.Data.Tokens(1),,,ВложенныйЗапрос);
			Перейти ~Выход;
		КонецЕсли; 
	ИначеЕсли ИмяПравила = "<Join>" Тогда
		ТекущийУзел = СтруктураЧасти.СвязиТаблиц.Вставить(0);
		ТипСоединения = Данные.Tokens(1).Data.Tokens(0).Name; //"<JoinType>"
		Если Ложь
			Или ТипСоединения = "LEFT"
			Или ТипСоединения = "LEFT OUTER"
		Тогда
			ТекущийУзел.ВсеСтрокиЛевой = Истина;
		ИначеЕсли Ложь
			Или ТипСоединения = "RIGHT"
			Или ТипСоединения = "RIGHT OUTER"
		Тогда
			ТекущийУзел.ВсеСтрокиПравой = Истина;
		ИначеЕсли Ложь
			Или ТипСоединения = "OUTER"
			Или ТипСоединения = "FULL"
		Тогда
			ТекущийУзел.ВсеСтрокиЛевой = Истина;
			ТекущийУзел.ВсеСтрокиПравой = Истина;
		КонецЕсли;
		НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
		ТокенУсловия = Данные.Tokens(5);
		ПостроитьДеревоЛогическогоВыражения(НастройкиКомпоновки.Отбор, ТокенУсловия);
		ТекущийУзел.Условие = НастройкиКомпоновки;
		ЗаполнитьПоТокену(ТокенУсловия, Стек,, ЗапросПакета, СтруктураЧасти);
		ТекущийУзел.ЛеваяТаблица = ЗаполнитьПоТокену(Данные.Tokens(0).Data.Tokens(0), Стек,, ЗапросПакета, СтруктураЧасти); //<TableOrJoing>.<ChooseTable>
		ТекущийУзел.ПраваяТаблица = ЗаполнитьПоТокену(Данные.Tokens(3).Data.Tokens(0), Стек,, ЗапросПакета, СтруктураЧасти); //<TableOrJoing>.<ChooseTable>
		Перейти ~Выход;
	ИначеЕсли Истина
		И ИмяПравила = "<JoinType>" 
		И Стек[1] = "<Join>"
	Тогда
		//
	ИначеЕсли Истина
		И ИмяПравила = "<HierMode>" 
		//И Стек[1] = "<HierExpr>"
	Тогда
		ТекущийУзел = ЗапросПакета.ГруппирующиеПоляИтогов[0];
		Если Данные.TokenCount = 0 Тогда
			ТипИтогов = "Элементы";
		Иначе
			ПервыйТокен = Данные.Tokens(0);
			Если Истина
				И ПервыйТокен.Kind = 0 
			Тогда 
				ТипИтогов = "ЭлементыИИерархия";
			ИначеЕсли Истина
				И ПервыйТокен.Kind = 1 
				И ПервыйТокен.Name = "ONLY"
			Тогда 
				ТипИтогов = "Иерархия";
			//ИначеЕсли Истина
			//	И ПервыйТокен.Kind = 1 
			//	И ПервыйТокен.Name = "PERIODS"
			//Тогда 
			//	ТипИтогов = "Периодами";
			КонецЕсли; 
		КонецЕсли; 
		ТекущийУзел.ТипИтогов = ТипИтогов;
	ИначеЕсли ИмяПравила = "<Allowed>" Тогда
		ЗапросПакета.ОпцияРазрешенные = Истина;
	ИначеЕсли ИмяПравила = "<AutoOrder>" Тогда
		Если ПолучитьТекстИзТокена(Токен) <> "" Тогда
			ЗапросПакета.ОпцияАвтоупорядочивание = Истина;
		КонецЕсли; 
	ИначеЕсли ИмяПравила = "<Distinct>" Тогда
		СтруктураЧасти.ОпцияРазличные = Истина;
	ИначеЕсли ИмяПравила = "<Top>" Тогда
		ЗапросПакета.ОпцияПервые = Истина;
		ЗапросПакета.ПервыеКоличество = Число(Данные.Tokens(1).Data);
	ИначеЕсли ИмяПравила = "<MultiField>" Тогда
		ТекущийУзел = СтруктураЧасти.ВыбранныеПоля[0];
		ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
	ИначеЕсли Истина
		И ИмяПравила = "<Table>" 
		И Стек[1] = "<ChooseTable>"
	Тогда
		ТекстОпределенияТаблицы = ПолучитьТекстИзТокена(Токен);
		ТекущийУзел = СтруктураЧасти.ВыбранныеТаблицы[0];
		Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(ТекстОпределенияТаблицы);
		ПолноеИмя = "";
		Для Каждого Фрагмент Из Фрагменты Цикл
			Если ПолноеИмя <> "" Тогда
				ПолноеИмя = ПолноеИмя + ".";
			КонецЕсли; 
			ПолноеИмя = ПолноеИмя + ПолучитьИмяБезКвадратныхСкобок(Фрагмент);
		КонецЦикла;
		ТекущийУзел.ПолноеИмя = ЛксПолучитьПервыйФрагмент(ПолноеИмя, "(");
	ИначеЕсли Истина
		И ИмяПравила = "<TableAS>" 
		И (Ложь
			Или Стек[1] = "<ChooseTable>"
			Или Стек[1] = "<FromUnion>")
	Тогда
		ТекстОпределенияТаблицы = ПолучитьТекстИзТокена(Токен);
		ТекущийУзел = СтруктураЧасти.ВыбранныеТаблицы[0];
		ТекущийУзел.Имя = ПолучитьИмяБезКвадратныхСкобок(ТекстОпределенияТаблицы);
		ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ТекущийУзел);
		Результат = ТекущийУзел.Имя;
		Перейти ~Выход;
	ИначеЕсли Истина
		И (Ложь
			ИЛи ИмяПравила = "<FieldAS>" 
			Или ИмяПравила = "<FieldID>")
		И (Ложь
			Или Стек[1] = "<SelectExpr>"
			Или Стек[1] = "<NamedExpr>")
	Тогда
		Если Стек[1] = "<SelectExpr>" Тогда
			ТекущийУзел = СтруктураЧасти.ВыбранныеПоля[0];
		ИначеЕсли Стек[1] = "<NamedExpr>" Тогда
			ТекущийУзел = ЗапросПакета.ГруппируемыеПоляИтогов[0];
		КонецЕсли; 
		ТекстОпределения = ПолучитьТекстИзТокена(Токен);
		ТекущийУзел.Имя = ПолучитьИмяБезКвадратныхСкобок(ТекстОпределения);
		ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ТекущийУзел);
	ИначеЕсли ИмяПравила = "<Expr>" Тогда
		Если Стек.Количество() > 0 Тогда
			Если Стек[1] = "<SelectExpr>" Тогда
				ТекущийУзел = СтруктураЧасти.ВыбранныеПоля[0];
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
				//ТекущийУзел.Комментарий = ПолучитьКомментарийИзТокенов(Данные.Tokens(Данные.TokenCount - 1));
			ИначеЕсли Стек[1] = "<ExprHierarchy>" Тогда
				ТекущийУзел = ЗапросПакета.ПоляПорядка[0];
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
			ИначеЕсли Стек[1] = "<HierExpr>" Тогда
				ТекущийУзел = ЗапросПакета.ГруппирующиеПоляИтогов[0];
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
			ИначеЕсли Стек[1] = "<IndexBy>" Тогда
				ТекущийУзел = ЗапросПакета.ПоляИндекса.Вставить(0);
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
			ИначеЕсли Стек[1] = "<GroupExpr>" Тогда
				ТекущийУзел = СтруктураЧасти.Группировки.Вставить(0);
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
			ИначеЕсли Стек[1] = "<Where>" Тогда
				НастройкиКомпоновки = Новый НастройкиКомпоновкиДанных;
				ПостроитьДеревоЛогическогоВыражения(НастройкиКомпоновки.Отбор, Токен);
				СтруктураЧасти.Отбор = НастройкиКомпоновки;
			ИначеЕсли Стек[1] = "<GroupBy>" Тогда
				ТекущийУзел = СтруктураЧасти.Группировки.Вставить(0);
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
			ИначеЕсли Истина
				И Стек[1] = "<NamedExpr>"
			Тогда
				ТекущийУзел = ЗапросПакета.ГруппируемыеПоляИтогов[0];
				ТекущийУзел.Определение = ПолучитьТекстИзТокена(Токен);
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
	Для ИндексТокена = 0 По Данные.TokenCount - 1 Цикл
		ТокенВниз = Данные.Tokens(Данные.TokenCount - 1 - ИндексТокена);
		Если ТокенВниз.Kind = 0 Тогда
			// Не терминальный токен
			ПсевдонимСнизу = ЗаполнитьПоТокену(ТокенВниз, Стек, ПсевдонимСверху, ЗапросПакета, СтруктураЧасти);
			Если ПсевдонимСнизу <> Неопределено Тогда 
				Если ИмяПравила = "<ChooseTable>" Тогда 
					Результат = ПсевдонимСнизу;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
~Выход:
	Стек.Удалить(0);
	Возврат Результат;
	
КонецФункции

Функция ДобавитьЧастьОбъединения(ЗапросПакета)

	СтруктураЧасти = ЗапросПакета.ЧастиОбъединения.Добавить();
	СтруктураЧасти.Номер = ЗапросПакета.ЧастиОбъединения.Количество();
	СтруктураЧасти.ВыбранныеТаблицы = ВыбранныеТаблицы.СкопироватьКолонки();
	СтруктураЧасти.ВыбранныеПоля = ВыбранныеПоля.СкопироватьКолонки();
	СтруктураЧасти.СвязиТаблиц = СвязиТаблиц.СкопироватьКолонки();
	СтруктураЧасти.Группировки = Группировки.СкопироватьКолонки();
	СтруктураЧасти.Отбор = Новый НастройкиКомпоновкиДанных;
	СтруктураЧасти.ОпцияРазличные = Ложь;
	ОбновитьНаименованиеЧасти(СтруктураЧасти);
	Возврат СтруктураЧасти;

КонецФункции

Функция ДобавитьЗапросПакета(Пакет = Неопределено)

	Если Пакет = Неопределено Тогда
		Пакет = ЗапросыПакета;
	КонецЕсли; 
	ЗапросПакета = Пакет.Добавить();
	ЗапросПакета.ИД = Новый УникальныйИдентификатор();
	ЗапросПакета.Порядок = ЗапросыПакета.Количество();
	ЗапросПакета.ЧастиОбъединения = ЧастиОбъединения.СкопироватьКолонки();
	ЗапросПакета.ПсевдонимыПолей = ПсевдонимыПолей.СкопироватьКолонки();
	ЗапросПакета.ГруппирующиеПоляИтогов = ГруппирующиеПоляИтогов.СкопироватьКолонки();
	ЗапросПакета.ГруппируемыеПоляИтогов = ГруппируемыеПоляИтогов.СкопироватьКолонки();
	ЗапросПакета.ОпцияОбщиеИтоги = Ложь;
	ЗапросПакета.ОпцияПервые = Ложь;
	ЗапросПакета.ОпцияРазрешенные = Ложь;
	ЗапросПакета.ОпцияАвтоупорядочивание = Ложь;
	ЗапросПакета.ПервыеКоличество = 0;
	ЗапросПакета.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	ЗапросПакета.ПоляПорядка = ПоляПорядка.СкопироватьКолонки();
	ЗапросПакета.ПоляИндекса = ПоляИндекса.СкопироватьКолонки();
	ЗапросПакета.ТипЗапроса = 0;
	ОбновитьНаименованиеЗапроса(ЗапросПакета);
	Возврат ЗапросПакета;

КонецФункции

Функция _ДобавитьВыбраннуюТаблицу(ЧастьОбъединения, ПолноеИмя)
	
	ВыбраннаяТаблица = ЧастьОбъединения.ВыбранныеТаблицы.Добавить();
	ВыбраннаяТаблица.Параметры = ПараметрыТаблицы.СкопироватьКолонки();
	
КонецФункции

Функция ПолучитьИмяБезКвадратныхСкобок(Имя)
	
	Результат = Имя;
	Если Лев(Результат, 1) = "[" Тогда
		Результат = Сред(Результат, 2, СтрДлина(Результат) - 2);
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Функция ОпуститьсяДоПервогоЗначимогоПравила(Токен)

	Данные = Токен.Data;
	Если Данные.TokenCount > 1  Тогда
		Возврат Токен;
	КонецЕсли;
	ПервыйТокен = Данные.Tokens(0);
	Если ПервыйТокен.Kind <> 0 Тогда
		Возврат Токен;
	Иначе
		Возврат ОпуститьсяДоПервогоЗначимогоПравила(ПервыйТокен);
	КонецЕсли; 
	
КонецФункции

Процедура ПостроитьДеревоЛогическогоВыражения(ГруппаОтбора, Токен)

	#Если _ Тогда
	    ОтборКомпоновки1 = Новый НастройкиКомпоновкиДанных;
		ГруппаОтбора = ОтборКомпоновки1.Отбор;
	#КонецЕсли
	Данные = Токен.Data;
	Если Данные.TokenCount > 1 Тогда
		ИмяПравила = Данные.ParentRule.RuleNonterminal.Text;
		Если ИмяПравила = "<OrExpr1>" Тогда
			ГруппаИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ПостроитьДеревоЛогическогоВыражения(ГруппаИ, Данные.Tokens(0));
			ПостроитьДеревоЛогическогоВыражения(ГруппаИ, Данные.Tokens(2));
		ИначеЕсли ИмяПравила = "<AndExpr1>" Тогда
			Если Истина
				И ТипЗнч(ГруппаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
				И ГруппаОтбора.ТипГруппы <> ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе
			Тогда
				ГруппаИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			Иначе
				ГруппаИ = ГруппаОтбора;
			КонецЕсли; 
			ПостроитьДеревоЛогическогоВыражения(ГруппаИ, Данные.Tokens(0));
			ПостроитьДеревоЛогическогоВыражения(ГруппаИ, Данные.Tokens(2));
		ИначеЕсли ИмяПравила = "<NotExpr1>" Тогда
			ГруппаИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
			ПостроитьДеревоЛогическогоВыражения(ГруппаИ, Данные.Tokens(1))
		ИначеЕсли Ложь
			Или ИмяПравила = "<CompareExpr>"
			Или ИмяПравила = "<CheckLIKE>"
			Или ИмяПравила = "<CheckNULL>"
			Или ИмяПравила = "<CheckNotNULL>"
			Или ИмяПравила = "<CheckHierarchy>"
		Тогда
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЛевоеЗначение = ПолучитьТерминОтбораКомпоновкиИзДанныхТокена(Данные.Tokens(0).Data);
			Если ЛевоеЗначение = Неопределено Тогда
				ЭлементОтбора.Представление = ПолучитьТекстИзТокена(Токен);
			ИначеЕсли ИмяПравила = "<CheckNULL>" Тогда
				ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			ИначеЕсли ИмяПравила = "<CheckNotNULL>" Тогда
				ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			Иначе
				ПравоеЗначение = ПолучитьТерминОтбораКомпоновкиИзДанныхТокена(Данные.Tokens(2).Data);
				Если ПравоеЗначение = Неопределено Тогда
					ЭлементОтбора.Представление = ПолучитьТекстИзТокена(Токен);
				ИначеЕсли ИмяПравила = "<CompareExpr>" Тогда
					ОператорСравнения = Данные.Tokens(1).Data;
					Если ОператорСравнения = "=" Тогда
						лВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ИначеЕсли ОператорСравнения = "<>" Тогда
						лВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					ИначеЕсли ОператорСравнения = ">" Тогда
						лВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
					ИначеЕсли ОператорСравнения = "<" Тогда
						лВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
					ИначеЕсли ОператорСравнения = "<=" Тогда
						лВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
					ИначеЕсли ОператорСравнения = ">=" Тогда
						лВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
					Иначе
						ВызватьИсключение "Неизвестный вид сравнения """ + ОператорСравнения + """";
					КонецЕсли; 
					ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
					ЭлементОтбора.ВидСравнения = лВидСравнения;
					ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
				ИначеЕсли ИмяПравила = "<CheckLIKE>" Тогда
					ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
					ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
				ИначеЕсли ИмяПравила = "<CheckHierarchy>" Тогда
					ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
					ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
					ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ИмяПравила = "<Brackets>" Тогда
			Если Истина
				И ТипЗнч(ГруппаОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
				И ГруппаОтбора.ТипГруппы <> ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе
			Тогда
				ГруппаИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			Иначе
				ГруппаИ = ГруппаОтбора;
			КонецЕсли; 
			ПостроитьДеревоЛогическогоВыражения(ГруппаИ, Данные.Tokens(1));
		Иначе
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Представление = ПолучитьВыражениеЗапросаБезКрайнихСкобок(Токен);
		КонецЕсли; 
	Иначе
		ПостроитьДеревоЛогическогоВыражения(ГруппаОтбора, Данные.Tokens(0));
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьВыражениеЗапросаБезКрайнихСкобок(Токен)

	ЗначимыйТокен = ОпуститьсяДоПервогоЗначимогоПравила(Токен);
	Данные = ЗначимыйТокен.Data;
	Если Истина
		И Данные.TokenCount = 3
		И Данные.Tokens(0).Data = "("
		И Данные.Tokens(2).Data = ")"
	Тогда
		ЗначимыйТокен = Данные.Tokens(1);
	КонецЕсли; 
	ВыражениеБезСкобок = ПолучитьТекстИзТокена(ЗначимыйТокен);
	Возврат ВыражениеБезСкобок;

КонецФункции

Функция ПолучитьТекстИзТокена(Токен)

	Если Токен = Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	ДанныеТокена = Токен.Data;
	НачальныйТокен = ПолучитьГраничныйТерминалПравила(ДанныеТокена, 0);
	Если НачальныйТокен = Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	НачальнаяКолонка = НачальныйТокен.ColumnNumber;
	НачальнаяСтрока = НачальныйТокен.LineNumber;
	КонечныйТокен = ПолучитьГраничныйТерминалПравила(ДанныеТокена, 1);
	Если КонечныйТокен = Неопределено Тогда
		Возврат "";
	КонецЕсли; 
	КонечнаяКолонка = КонечныйТокен.ColumnNumber + СтрДлина(КонечныйТокен.Data);
	КонечнаяСтрока = КонечныйТокен.LineNumber + СтрЧислоСтрок(КонечныйТокен.Data) - 1;
	СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
	ТекстОпределения = СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст;
	ТекстОпределения = СокрЛП(ТекстОпределения);
	Возврат ТекстОпределения;

КонецФункции

Функция ПолучитьТерминОтбораКомпоновкиИзДанныхТокена(ДанныеТокена)
	
	//Результат = ПолучитьТекстИзТокена(ДанныеТокена);
	Токен = ДанныеТокена.Tokens(0);
	Если ДанныеТокена.TokenCount = 1 Тогда
		Если Токен.Kind = 0 Тогда
			ИмяПравила = Токен.Data.ParentRule.RuleNonterminal.Text;
			Если ИмяПравила = "<Field>" Тогда
				Результат = ПолучитьТекстИзТокена(Токен);
				Результат = Новый ПолеКомпоновкиДанных(Результат);
				Возврат Результат;
			ИначеЕсли ИмяПравила = "<Parameter>" Тогда
				Результат = Токен.Data.Tokens(1).Data.Tokens(0).Data;
				Результат = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Результат);
				Возврат Результат;
			КонецЕсли; 
		Иначе
			ИмяТокена = Токен.Name;
			Если ирНеглобальный.СтрокиРавныЛкс(ИмяТокена, "numLiteral") Тогда
				Результат = Вычислить(Токен.Data);
			ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(ИмяТокена, "strLiteral") Тогда
				Результат = Токен.Data;
				Результат = Сред(Результат, 2, СтрДлина(Результат) - 2);
			ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(ИмяТокена, "TRUE") Тогда
				Результат = Истина;
			ИначеЕсли ирНеглобальный.СтрокиРавныЛкс(ИмяТокена, "FALSE") Тогда
				Результат = Ложь;
			КонецЕсли; 
			Возврат Результат;
		КонецЕсли; 
	КонецЕсли;
	Если Токен.Kind = 0 Тогда
		Результат = ПолучитьТерминОтбораКомпоновкиИзДанныхТокена(Токен.Data);
	Иначе
		//Результат = Токен.Data;
		Результат = Неопределено;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

////////////////////////////

Процедура ОсновныеДействияФормыОК(Кнопка = Неопределено)
	
	Если мРежимРедактированияТекста Тогда
		ПереключитьРежимРедактированияТекста();
	КонецЕсли; 
	Если мРежимРедактированияТекста Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.Модифицированность = Ложь;
	СобратьТекстИзКонструктора();
	Закрыть(Истина);
	
КонецПроцедуры

Функция ПолучитьСловоЯзыкаЗапросов(Слово, пДиалектSQL = Неопределено, пАнглийский1С = Неопределено)

	Если пДиалектSQL = Неопределено Тогда
		пДиалектSQL = мДиалектSQL;
	КонецЕсли; 
	Если пАнглийский1С = Неопределено Тогда
		//пАнглийский1С = ирНеглобальный.СтрокиРавныЛкс(ТекущийЯзыкСистемы(), "en");
		пАнглийский1С = Истина; // Временно, пока не реализую поддержку русского варианта
	КонецЕсли; 
	Результат = Неопределено;
	Если ирНеглобальный.СтрокиРавныЛкс("AS", Слово) Тогда
		Если ирНеглобальный.СтрокиРавныЛкс("Oracle", пДиалектSQL) Тогда
			Результат = "";
		КонецЕсли;
	КонецЕсли; 
	Если Результат = Неопределено Тогда
		Если Истина
			И ирНеглобальный.СтрокиРавныЛкс("1С", пДиалектSQL)
			И Не пАнглийский1С
		Тогда
			Результат = мСоответствиеЯзыков[Слово];
		Иначе
			Результат = Слово;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОпределениеТаблицы(ЧастьОбъединения, Имя, Смещение = "", пДиалектSQL = Неопределено, пАнглийский1С = Неопределено)
	
	СтрокаВыбраннойТаблицы = ЧастьОбъединения.ВыбранныеТаблицы.Найти(Имя, "Имя");
	ЗначенияПараметров = СтрокаВыбраннойТаблицы.Параметры;
	Если ЗначенияПараметров = Неопределено Тогда
		СтрокаВыбраннойТаблицы.Параметры = Новый Массив();
	КонецЕсли; 
	Если ЗначениеЗаполнено(СтрокаВыбраннойТаблицы.ПолноеИмя) Тогда
		Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(СтрокаВыбраннойТаблицы.ПолноеИмя);
		Результат = "";
		Для Каждого Фрагмент Из Фрагменты Цикл
			Если Результат <> "" Тогда
				Результат = Результат + ".";
			КонецЕсли; 
			Если Не ЛксЛиИмяПеременной(Фрагмент) Тогда
				Фрагмент = "[" + Фрагмент + "]";
			КонецЕсли; 
			Результат = Результат + Фрагмент;
		КонецЦикла;
		ТекстПараметров = "";
		Для Индекс = 0 По СтрокаВыбраннойТаблицы.Параметры.Вграница() Цикл
			ЗначениеПараметра = СтрокаВыбраннойТаблицы.Параметры[Индекс];
			Если Индекс > 0 Тогда
				ТекстПараметров = ТекстПараметров + ", ";
			КонецЕсли; 
			ТекстПараметров = ТекстПараметров + ЗначениеПараметра;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстПараметров) Тогда
			Результат = Результат + "(" + ТекстПараметров + ")";
		КонецЕсли; 
	ИначеЕсли СтрокаВыбраннойТаблицы.ВложенныйПакет <> Неопределено Тогда
		лТекстПакета = СобратьТекстПакета(СтрокаВыбраннойТаблицы.ВложенныйПакет, Смещение, пДиалектSQL, пАнглийский1С);
		Результат = "(" + СокрЛ(лТекстПакета) + ")";
	Иначе
		ВызватьИсключение "У выбранной таблицы отсутствует определение"; 
	КонецЕсли; 
	КомментарийТаблицы = ПолучитьКомментарийДляВставки(СтрокаВыбраннойТаблицы.Комментарий, Смещение);
	Если ЗначениеЗаполнено(КомментарийТаблицы) Тогда
		Результат = Символы.ПС + Смещение + КомментарийТаблицы + Результат;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Функция СобратьТекстИзКонструктора(Смещение = "", пДиалектSQL = Неопределено, пАнглийский1С = Неопределено)
	
	ЗакончитьРедактированиеСвязанныхПолей();
	Текст = СобратьТекстПакета(ЗапросыПакета, Смещение, пДиалектSQL, пАнглийский1С);
	Возврат Текст;
	
КонецФункции

Функция СобратьТекстПакета(Пакет, Смещение, пДиалектSQL, пАнглийский1С)

	ТекстПакета = "";
	Для Каждого ЗапросПакета Из Пакет Цикл
		ТекстЗапроса = СобратьТекстЗапросаПакета(ЗапросПакета, Смещение, пДиалектSQL, пАнглийский1С);
		Если ТекстПакета <> "" Тогда
			ТекстПакета = ТекстПакета + "
			|;
			|";
			Если Лев(ТекстЗапроса, 2) <> "//" Тогда
				ТекстПакета = ТекстПакета + "////////////////////////////////
				|";
			КонецЕсли; 
		КонецЕсли; 
		ТекстПакета = ТекстПакета + ТекстЗапроса;
	КонецЦикла; 
	Возврат ТекстПакета;

КонецФункции

Функция СобратьТекстЗапросаПакета(ЗапросПакета, Смещение, пДиалектSQL, пАнглийский1С)

	Если ирНеглобальный.СтрокиРавныЛкс(ЗапросПакета.ТипЗапроса, 2) Тогда
		ТекстЗапроса = ПолучитьСловоЯзыкаЗапросов("DROP", пДиалектSQL) + " " + XMLСтрока(ЗапросПакета.ИмяВременнойТаблицы);
		Возврат ТекстЗапроса;
	КонецЕсли; 
	ТекстЗапроса = "";
	Для Каждого ЧастьОбъединения Из ЗапросПакета.ЧастиОбъединения Цикл
		ТекстЧасти = СобратьТекстЧастиОбъединения(ЗапросПакета, ЧастьОбъединения, Смещение, пДиалектSQL, пАнглийский1С);
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|" + ПолучитьСловоЯзыкаЗапросов("UNION", пДиалектSQL, пАнглийский1С);
			Если Не ЧастьОбъединения.БезДублей Тогда
				ТекстЗапроса = ТекстЗапроса + " " + ПолучитьСловоЯзыкаЗапросов("ALL", пДиалектSQL, пАнглийский1С);
			КонецЕсли; 
			ТекстЗапроса = ТекстЗапроса + Символы.ПС;
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + ТекстЧасти;
	КонецЦикла;
	
	// ORDER BY
	ТекстПорядок = "";
	Для Каждого ЭлементПорядка Из ЗапросПакета.ПоляПорядка Цикл
		Если ТекстПорядок <> "" Тогда
			ТекстПорядок = ТекстПорядок + "," + Символы.ПС + Смещение + Символы.Таб;
		КонецЕсли; 
		ТекстПорядок = ТекстПорядок + ЭлементПорядка.Определение;
		Если ЭлементПорядка.Направление = НаправлениеСортировки.Убыв Тогда
			ТекстПорядок = ТекстПорядок + " " + ПолучитьСловоЯзыкаЗапросов("DESC", пДиалектSQL, пАнглийский1С);
		КонецЕсли; 
	КонецЦикла;
	Если ТекстПорядок <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("ORDER BY", пДиалектSQL, пАнглийский1С) 
			+ Символы.ПС + Смещение + Символы.Таб + ТекстПорядок;
	КонецЕсли; 
	
	// INDEX BY
	ТекстИндекс = "";
	Для Каждого ЭлементИндекса Из ЗапросПакета.ПоляИндекса Цикл
		Если ТекстИндекс <> "" Тогда
			ТекстИндекс = ТекстИндекс + "," + Символы.ПС + Смещение + Символы.Таб;
		КонецЕсли; 
		ТекстИндекс = ТекстИндекс + ЭлементИндекса.Определение;
	КонецЦикла;
	Если ТекстИндекс <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("INDEX BY", пДиалектSQL, пАнглийский1С) 
			+ Символы.ПС + Смещение + Символы.Таб + ТекстИндекс;
	КонецЕсли; 
		
	// TOTALS
	ТекстГруппирующиеПоля = "";
	Если ЗапросПакета.ОпцияОбщиеИтоги Тогда
		ТекстГруппирующиеПоля = ТекстГруппирующиеПоля + ПолучитьСловоЯзыкаЗапросов("OVERALL", пДиалектSQL, пАнглийский1С);
	КонецЕсли; 
	Для Каждого СтрокаПоля Из ЗапросПакета.ГруппирующиеПоляИтогов Цикл
		Если ТекстГруппирующиеПоля <> "" Тогда
			ТекстГруппирующиеПоля = ТекстГруппирующиеПоля + "," + Символы.ПС + Смещение + Символы.Таб;
		КонецЕсли; 
		ТекстГруппирующиеПоля = ТекстГруппирующиеПоля + СтрокаПоля.Определение;
		Если ЗначениеЗаполнено(СтрокаПоля.Имя) Тогда
			ТекстГруппирующиеПоля = ТекстГруппирующиеПоля + " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С) + " " + СтрокаПоля.Имя;
		КонецЕсли; 
		Если ирНеглобальный.СтрокиРавныЛкс(СтрокаПоля.ТипИтогов, "Иерархия") Тогда
			ТекстГруппирующиеПоля = ТекстГруппирующиеПоля + " " + ПолучитьСловоЯзыкаЗапросов("HIERARCHY", пДиалектSQL, пАнглийский1С);
		КонецЕсли; 
	КонецЦикла;
	ТекстИтоговыеПоля = "";
	Для Каждого СтрокаПоля Из ЗапросПакета.ГруппируемыеПоляИтогов Цикл
		Если ТекстИтоговыеПоля <> "" Тогда
			ТекстИтоговыеПоля = ТекстИтоговыеПоля  + "," + Символы.ПС + Смещение + Символы.Таб;
		КонецЕсли; 
		ТекстИтоговыеПоля = ТекстИтоговыеПоля + ПолучитьКомментарийДляВставки(СтрокаПоля.Комментарий, Смещение + Символы.Таб);
		ТекстИтоговыеПоля = ТекстИтоговыеПоля + СтрокаПоля.Определение + " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С)
			+ " " + СтрокаПоля.Имя;
	КонецЦикла;
	Если Ложь
		Или ТекстГруппирующиеПоля <> ""
		Или ТекстИтоговыеПоля <> ""
	Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("TOTALS", пДиалектSQL, пАнглийский1С) 
			+ Символы.ПС + Смещение + Символы.Таб + ТекстИтоговыеПоля
			+ Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("BY", пДиалектSQL, пАнглийский1С) 
			+ Символы.ПС + Смещение + Символы.Таб + ТекстГруппирующиеПоля;
	КонецЕсли; 
		
	Если ЗапросПакета.ОпцияАвтоупорядочивание Тогда
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("AUTOORDER", пДиалектSQL, пАнглийский1С);
	КонецЕсли; 

	Возврат ТекстЗапроса;

КонецФункции

Функция ПолучитьКомментарийДляВставки(Комментарий, Смещение = "")
	
	Результат = "";
	Если Не ЗначениеЗаполнено(Комментарий) Тогда
		Возврат Результат;
	КонецЕсли; 
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(Комментарий);
	Для Счетчик = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Если Результат <> "" Тогда
			Результат = Результат + Смещение;
		КонецЕсли; 
		Результат = Результат + "//" + ТекстовыйДокумент.ПолучитьСтроку(Счетчик) + Символы.ПС;
	КонецЦикла;
	Результат = Результат + Смещение;
	Возврат Результат;
	
КонецФункции

Функция СобратьТекстЧастиОбъединения(ЗапросПакета, ЧастьОбъединения, Смещение = "", пДиалектSQL = Неопределено, пАнглийский1С = Неопределено)

	Результат = "";
	
	// SELECT
	Результат = Результат + ПолучитьКомментарийДляВставки(ЧастьОбъединения.Комментарий, Смещение);
	Результат = Результат + Смещение + ПолучитьСловоЯзыкаЗапросов("SELECT", пДиалектSQL, пАнглийский1С);
	Если ЧастьОбъединения = ЗапросПакета.ЧастиОбъединения[0] Тогда
		Если ЗапросПакета.ОпцияРазрешенные Тогда
			Результат = Результат + " " + ПолучитьСловоЯзыкаЗапросов("ALLOWED", пДиалектSQL, пАнглийский1С);
		КонецЕсли; 
		Если ЗапросПакета.ОпцияПервые Тогда
			Результат = Результат + " " + ПолучитьСловоЯзыкаЗапросов("TOP", пДиалектSQL) + " " + XMLСтрока(ЗапросПакета.ПервыеКоличество);
		КонецЕсли; 
	КонецЕсли; 
	Если ЧастьОбъединения.ОпцияРазличные Тогда
		Результат = Результат + " " + ПолучитьСловоЯзыкаЗапросов("DISTINCT", пДиалектSQL, пАнглийский1С);
	КонецЕсли; 
	ТекстПоляВыбора = "";
	Для Каждого ВыбранноеПоле Из ЧастьОбъединения.ВыбранныеПоля Цикл
		Если ТекстПоляВыбора <> "" Тогда
			ТекстПоляВыбора = ТекстПоляВыбора + "," + Символы.ПС + Смещение + Символы.Таб;
		КонецЕсли; 
		ТекстПоляВыбора = ТекстПоляВыбора + ПолучитьКомментарийДляВставки(ВыбранноеПоле.Комментарий, Смещение + Символы.Таб);
		ТекстПоляВыбора = ТекстПоляВыбора + ВыбранноеПоле.Определение;
		Если ЗначениеЗаполнено(ВыбранноеПоле.Имя) Тогда
			ТекстПоляВыбора = ТекстПоляВыбора + " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С) + " " + ВыбранноеПоле.Имя;
		КонецЕсли;
	КонецЦикла;
	Результат = Результат + Символы.ПС + Смещение + Символы.Таб + ТекстПоляВыбора;
	Если ЧастьОбъединения = ЗапросПакета.ЧастиОбъединения[0] Тогда
		Если ирНеглобальный.СтрокиРавныЛкс(ЗапросПакета.ТипЗапроса, 1) Тогда
			Результат = Результат + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("INTO", пДиалектSQL) + " " + XMLСтрока(ЗапросПакета.ИмяВременнойТаблицы);
		КонецЕсли; 
	КонецЕсли; 
	
	// FROM
	// Делаем все соединения не правыми
	Для Каждого СвязьТаблиц Из ЧастьОбъединения.СвязиТаблиц Цикл
		Если Истина
			И Не СвязьТаблиц.ВсеСтрокиЛевой 
			И СвязьТаблиц.ВсеСтрокиПравой
		Тогда
			ПоменятьМестамиТаблицыСвязи(СвязьТаблиц);
		КонецЕсли; 
		Если Истина
			И СвязьТаблиц.ВсеСтрокиЛевой = СвязьТаблиц.ВсеСтрокиПравой
			И СвязьТаблиц.ЛеваяТаблица > СвязьТаблиц.ПраваяТаблица
		Тогда
			ПоменятьМестамиТаблицыСвязи(СвязьТаблиц);
		КонецЕсли;
	КонецЦикла;
	ДобавленныеТаблицыСвязей = Новый Массив();
	КоличествоСдвигов = 0;
	КоличествоПарТаблиц = ЧастьОбъединения.СвязиТаблиц.Количество();
	ТекстТаблицы = "";
	Для Индекс = 0 По КоличествоПарТаблиц - 1 Цикл
		ПараТаблиц = ЧастьОбъединения.СвязиТаблиц[Индекс];
		ЛеваяТаблицаДобавлена = ДобавленныеТаблицыСвязей.Найти(ПараТаблиц.ЛеваяТаблица) = Неопределено;
		ПраваяТаблицаДобавлена = ДобавленныеТаблицыСвязей.Найти(ПараТаблиц.ПраваяТаблица) = Неопределено;
		Если Истина
			И Не ЛеваяТаблицаДобавлена 
			И ПраваяТаблицаДобавлена
		Тогда
			СоединяемаяТаблица = ПараТаблиц.ЛеваяТаблица;
		ИначеЕсли Истина
			И Не ПраваяТаблицаДобавлена 
			И ЛеваяТаблицаДобавлена
		Тогда
			СоединяемаяТаблица = ПараТаблиц.ПраваяТаблица;
		Иначе
			СоединяемаяТаблица = Неопределено;
		КонецЕсли; 
		ОбеТаблицыНедобавлены = Истина
				И ДобавленныеТаблицыСвязей.Количество() > 0
				И Не ЛеваяТаблицаДобавлена
				И Не ПраваяТаблицаДобавлена;
		Если Истина
			И ОбеТаблицыНедобавлены
			И Индекс < КоличествоПарТаблиц - 1 - КоличествоСдвигов
		Тогда
			// Сдвигаем в конец
			ЧастьОбъединения.СвязиТаблиц.Сдвинуть(ПараТаблиц, КоличествоПарТаблиц - Индекс - 1);
			КоличествоСдвигов = КоличествоСдвигов + 1;
		Иначе
			Если ОбеТаблицыНедобавлены Тогда
				ТекстТаблицы = ТекстТаблицы + "," + Символы.ПС + Смещение + Символы.Таб;
			КонецЕсли; 
			ДобавленныеТаблицыСвязей.Добавить(ПараТаблиц.ЛеваяТаблица);
			ДобавленныеТаблицыСвязей.Добавить(ПараТаблиц.ПраваяТаблица);
			Если ТекстТаблицы = "" Тогда
				ТекстТаблицы = ТекстТаблицы + ПолучитьОпределениеТаблицы(ЧастьОбъединения, ПараТаблиц.ЛеваяТаблица, Смещение + Символы.Таб, пДиалектSQL, пАнглийский1С) 
					+ " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С) + " " + ПараТаблиц.ЛеваяТаблица;
			КонецЕсли; 
			ТекстТаблицы = ТекстТаблицы + Символы.ПС + Смещение + Символы.Таб;
			ПерваяСвязьПары = ПараТаблиц;
			Если Истина
				И ПерваяСвязьПары.ВсеСтрокиПравой 
				И ПерваяСвязьПары.ВсеСтрокиЛевой
			Тогда
				ТекстТаблицы = ТекстТаблицы + ПолучитьСловоЯзыкаЗапросов("OUTER", пДиалектSQL, пАнглийский1С);
			ИначеЕсли ПерваяСвязьПары.ВсеСтрокиЛевой Тогда 
				ТекстТаблицы = ТекстТаблицы + ПолучитьСловоЯзыкаЗапросов("LEFT", пДиалектSQL, пАнглийский1С);
			Иначе
				ТекстТаблицы = ТекстТаблицы + ПолучитьСловоЯзыкаЗапросов("INNER", пДиалектSQL, пАнглийский1С);
			КонецЕсли; 
			ТекстТаблицы = ТекстТаблицы + " " + ПолучитьСловоЯзыкаЗапросов("JOIN", пДиалектSQL, пАнглийский1С) 
				+ " " + ПолучитьОпределениеТаблицы(ЧастьОбъединения, ПараТаблиц.ПраваяТаблица, Смещение + Символы.Таб, пДиалектSQL, пАнглийский1С) 
				+ " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С) + " " + ПараТаблиц.ПраваяТаблица;
			ТекстУсловия = ирНеглобальный.ПолучитьВыражениеОтбораКомпоновкиНаЯзыкеЛкс(ПараТаблиц.Условие.Отбор, пДиалектSQL, пАнглийский1С, Параметры);
			ТекстТаблицы = ТекстТаблицы + Символы.ПС + Смещение + Символы.Таб + ПолучитьСловоЯзыкаЗапросов("ON", пДиалектSQL, пАнглийский1С) 
				 + " " + ТекстУсловия;
			Индекс = Индекс + 1;
		КонецЕсли; 
	КонецЦикла;
	Для Каждого ВыбраннаяТаблица Из ЧастьОбъединения.ВыбранныеТаблицы Цикл
		Если ДобавленныеТаблицыСвязей.Найти(ВыбраннаяТаблица.Имя) = Неопределено Тогда
			Если ТекстТаблицы <> "" Тогда
				ТекстТаблицы = ТекстТаблицы + ",";
			КонецЕсли; 
			ТекстТаблицы = ТекстТаблицы + Символы.ПС + Смещение + Символы.Таб + ПолучитьОпределениеТаблицы(ЧастьОбъединения, ВыбраннаяТаблица.Имя, Смещение + Символы.Таб, пДиалектSQL, пАнглийский1С) 
				+ " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С) + " " + ВыбраннаяТаблица.Имя;
		КонецЕсли;
	КонецЦикла;
	Если ТекстТаблицы <> "" Тогда
		Результат = Результат + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("FROM", пДиалектSQL, пАнглийский1С) + " " + ТекстТаблицы;
	КонецЕсли; 
	
	// WHERE
	ТекстУсловия = ирНеглобальный.ПолучитьВыражениеОтбораКомпоновкиНаЯзыкеЛкс(ЧастьОбъединения.Отбор.Отбор, пДиалектSQL, пАнглийский1С, Параметры);
	Если ТекстУсловия <> "" Тогда
		Результат = Результат + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("WHERE", пДиалектSQL, пАнглийский1С);
		Результат = Результат + Символы.ПС + Смещение + Символы.Таб + ПолучитьКомментарийДляВставки(ЧастьОбъединения.КомментарийОтбора, Смещение + Символы.Таб);
		Результат = Результат + Символы.Таб + ТекстУсловия;
	КонецЕсли; 
	
	// GROUP BY
	ТекстГруппировки = "";
	Для Каждого Группировка Из ЧастьОбъединения.Группировки Цикл
		Если ТекстГруппировки <> "" Тогда
			ТекстГруппировки = ТекстГруппировки + "," + Символы.ПС + Смещение + Символы.Таб;
		КонецЕсли; 
		ТекстГруппировки = ТекстГруппировки + Группировка.Определение;
	КонецЦикла;
	Если ТекстГруппировки <> "" Тогда
		Результат = Результат + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("GROUP BY", пДиалектSQL, пАнглийский1С) + Символы.ПС + Смещение + Символы.Таб + " " + ТекстГруппировки;
	КонецЕсли; 
	
	// HAVING
	//ТекстУсловия = "";
	//Для Каждого Условие Из Условия Цикл
	//	Если ТекстУсловия <> "" Тогда
	//		ТекстУсловия = ТекстУсловия + "," + Символы.ПС + Смещение + Символы.Таб;
	//	КонецЕсли; 
	//	//ТекстУсловия = ТекстУсловия + Символы.Таб + Условие.Определение + " " + ПолучитьСловоЯзыкаЗапросов("AS", пДиалектSQL, пАнглийский1С) + " " + ВыбранноеПоле.Имя;
	//КонецЦикла;
	//Если ТекстУсловия <> "" Тогда
	//	Результат = Результат + Символы.ПС + Смещение + ПолучитьСловоЯзыкаЗапросов("WHERE", пДиалектSQL, пАнглийский1С) + ТекстУсловия;
	//КонецЕсли; 

	Возврат Результат;

КонецФункции

Функция ПоменятьМестамиТаблицыСвязи(СвязьТаблиц)

	// Меняем местами левую и правую стороны
	лЛеваяТаблица = СвязьТаблиц.ЛеваяТаблица;
	СвязьТаблиц.ЛеваяТаблица = СвязьТаблиц.ПраваяТаблица;
	СвязьТаблиц.ПраваяТаблица = лЛеваяТаблица;
	лВсеСтрокиЛевой = СвязьТаблиц.ВсеСтрокиЛевой;
	СвязьТаблиц.ВсеСтрокиЛевой = СвязьТаблиц.ВсеСтрокиПравой;
	СвязьТаблиц.ВсеСтрокиПравой = лВсеСтрокиЛевой;
	Возврат Неопределено;

КонецФункции

Функция ЗакончитьРедактированиеСвязанныхПолей()

	СохранитьЗапросПакета();
	Возврат Неопределено;

КонецФункции

Процедура ВыбранныеТаблицыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		Если Истина
			И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("ОбработкаТабличнаяЧастьСтрока.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.ДоступныеТаблицы") 
		Тогда
			СтандартнаяОбработка = Ложь;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеТаблицыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		Если Истина
			И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("ОбработкаТабличнаяЧастьСтрока.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.ДоступныеТаблицы") 
		Тогда
			СтандартнаяОбработка = Ложь;
			Для Каждого СтрокаПеретаскивания Из ЗначениеПеретаскивания Цикл
				ДобавитьДоступнуюТаблицуВВыбранные(СтрокаПеретаскивания);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДобавитьДоступнуюТаблицуВВыбранные(СтрокаДоступнойТаблицы)

	ВыбраннаяТаблица = ВыбранныеТаблицы.Добавить();
	//ОпределениеТаблицы = СтрокаДоступнойТаблицы.Имя;
	//Если ЗначениеЗаполнено(СтрокаДоступнойТаблицы.Схема) Тогда
	//	ОпределениеТаблицы = СтрокаДоступнойТаблицы.Схема + "." + ОпределениеТаблицы;
	//КонецЕсли; 
	//ВыбраннаяТаблица.Определение = ОпределениеТаблицы;
	ВыбраннаяТаблица.Имя = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(ВыбранныеТаблицы, СтрокаДоступнойТаблицы.Имя);
	ВыбраннаяТаблица.ПолноеИмя = СтрокаДоступнойТаблицы.ПолноеИмя;
	ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ВыбраннаяТаблица);
	ЭлементыФормы.ВыбранныеТаблицы.ТекущаяСтрока = ВыбраннаяТаблица;

КонецПроцедуры

Процедура ВыбранныеПоляПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		Если Ложь
			Или ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("ДоступноеПолеОтбораКомпоновкиДанных")
			Или (Истина
				И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаДереваЗначений")
				//И ПараметрыПеретаскивания.Значение.Владелец() = ДоступныеПоляВыбора // Так не работает
				И ЗначениеПеретаскивания[0].Владелец().Колонки.Найти("Имя") <> Неопределено)
		Тогда
			СтандартнаяОбработка = Ложь;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеПоляПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)

	ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		Если Ложь
			Или ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("ДоступноеПолеОтбораКомпоновкиДанных")
			Или (Истина
				И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("СтрокаДереваЗначений")
				//И ПараметрыПеретаскивания.Значение.Владелец() = ДоступныеПоляВыбора // Так не работает
				И ЗначениеПеретаскивания[0].Владелец().Колонки.Найти("Имя") <> Неопределено)
		Тогда
			СтандартнаяОбработка = Ложь;
			Для Каждого СтрокаПеретаскивания Из ЗначениеПеретаскивания Цикл
				ДобавитьДоступноеПолеСДочернимиВВыбранныеПоля(СтрокаПеретаскивания);
			КонецЦикла;  
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьДоступноеПолеСДочернимиВВыбранныеПоля(СтрокаДоступногоПоля)

	Если СтрокаДоступногоПоля.Родитель = Неопределено Тогда
		// Все дочерние поля
		Для Каждого лСтрокаДоступногоПоля Из СтрокаДоступногоПоля.Элементы Цикл
			ДобавитьДоступноеПолеВВыбранныеПоля(лСтрокаДоступногоПоля);
		КонецЦикла;
	Иначе
		// Одно поле
		ДобавитьДоступноеПолеВВыбранныеПоля(СтрокаДоступногоПоля);
	КонецЕсли; 
	Возврат Неопределено;

КонецФункции

Функция ДобавитьДоступноеПолеВВыбранныеПоля(СтрокаДоступногоПоля, ЧастьОбъединения = Неопределено)

	ОпределениеПоля = ПолучитьПолноеИмяДоступногоПоля(СтрокаДоступногоПоля);
	Если ЧастьОбъединения = Неопределено Тогда
		ЧастьОбъединения = ЭлементыФормы.ЧастиОбъединения.ТекущаяСтрока;
	КонецЕсли; 
	ТабличноеПоле = ЭлементыФормы.ВыбранныеПоля;
	СтрокаВыбранногоПоля = ЧастьОбъединения.ВыбранныеПоля.Добавить();
	СтрокаВыбранногоПоля.Определение = ОпределениеПоля;
	ИмяПоля = ПолучитьАвтоПсевдонимПоля(СтрокаВыбранногоПоля, ЧастьОбъединения);
	СтрокаВыбранногоПоля.Имя = ИмяПоля;
	СтрокаВыбранногоПоля.ИД = Новый УникальныйИдентификатор();
	СтрокаВыбранногоПоля.ТипЗначения = СтрокаДоступногоПоля.ТипЗначения;
	ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(СтрокаВыбранногоПоля);
	ЭлементыФормы.ВыбранныеПоля.ТекущаяСтрока = СтрокаВыбранногоПоля;
	ОбновитьПсевдонимыПолей();
	Возврат СтрокаВыбранногоПоля;

КонецФункции

Функция ПолучитьАвтоПсевдонимПоля(СтрокаВыбранногоПоля, ЧастьОбъединения = Неопределено)

	Если ЧастьОбъединения = Неопределено Тогда
		ЧастьОбъединения = ЭлементыФормы.ЧастиОбъединения.ТекущаяСтрока;
	КонецЕсли; 
	ПозицияТочки = Найти(СтрокаВыбранногоПоля.Определение, ".");
	ИмяПоля = Сред(СтрокаВыбранногоПоля.Определение, ПозицияТочки + 1);
	ИмяПоля = СтрЗаменить(ИмяПоля, ".", "");
	ИмяПоля = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(ЧастьОбъединения.ВыбранныеПоля, ИмяПоля);
	Возврат ИмяПоля;

КонецФункции

Процедура ПанельЧастиПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ПанельЧасти;
	КонецЕсли; 
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элемент.ТекущаяСтраница.Имя;
	КонецЕсли;  
	ЗакончитьРедактированиеСвязанныхПолей();
	Если Ложь
		Или мСтараяСтраницаПанелиЧасти = ЭлементыФормы.ПанельЧасти.Страницы.ВыбранныеТаблицы 
	Тогда
		ОбновитьИсточникДоступныхНастроекКомпоновки();
		СвязиТаблицПриАктивизацииСтроки();
	КонецЕсли; 
	лТекущаяСтраница = ЭлементыФормы.ПанельЧасти.Страницы[ТекущаяСтраница];
	Если лТекущаяСтраница = ЭлементыФормы.ПанельЧасти.Страницы.Группировки Тогда
		ДоступныеВыбранныеПоля = ВыбранныеПоля.Скопировать();
	ИначеЕсли лТекущаяСтраница = ЭлементыФормы.ПанельЧасти.Страницы.Текст Тогда
		ТекстЧасти = СобратьТекстЧастиОбъединения(ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока, ЭлементыФормы.ЧастиОбъединения.ТекущаяСтрока);
		ЭлементыФормы.ПолеТекстаЧасти.УстановитьТекст(ТекстЧасти);
	КонецЕсли; 
	ЭтаФорма.мСтараяСтраницаПанелиЧасти = Элемент.Страницы[ТекущаяСтраница];
	
КонецПроцедуры

Процедура ОбновитьИсточникДоступныхНастроекКомпоновки()
	
	ДоступныеПоляВыбора = Новый ДеревоЗначений;
	ДоступныеПоляВыбора.Колонки.Добавить("Имя");
	ДоступныеПоляВыбора.Колонки.Добавить("ТипЗначения");
	Для Каждого ВыбраннаяТаблица Из ВыбранныеТаблицы Цикл
		СтрокаТаблицыВДереве = ДоступныеПоляВыбора.Строки.Добавить();
		СтрокаТаблицыВДереве.Имя = ВыбраннаяТаблица.Имя;
		ДоступныеПоляТаблицы = ПолучитьДоступныеПоляТаблицыПоИмени(ВыбраннаяТаблица.Имя);
		Для Каждого ДоступноеПолеТаблицы Из ДоступныеПоляТаблицы Цикл
			СтрокаПоляВДереве = СтрокаТаблицыВДереве.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПоляВДереве, ДоступноеПолеТаблицы); 
		КонецЦикла;
	КонецЦикла;
	Если Параметры.Количество() > 0 Тогда
		СтрокаГруппыПараметраВДереве = ДоступныеПоляВыбора.Строки.Добавить();
		СтрокаГруппыПараметраВДереве.Имя = "<Параметры>";
		Для Каждого CтрокаПараметра Из Параметры Цикл
			СтрокаПараметраВДереве = СтрокаГруппыПараметраВДереве.Строки.Добавить();
			СтрокаПараметраВДереве.Имя = CтрокаПараметра.Имя;
			СтрокаПараметраВДереве.ТипЗначения = CтрокаПараметра.ТипЗначения;
		КонецЦикла;
	КонецЕсли; 
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.ТипИсточникаДанных = "Local";
	ИсточникДанных.Имя = "Local";
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	Для Каждого СтрокаДоступнойТаблицы Из ДоступныеПоляВыбора.Строки Цикл
		Если СтрокаДоступнойТаблицы.Имя = "<Параметры>" Тогда
			Продолжить;
		КонецЕсли; 
		ПапкаПолей = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
		ПапкаПолей.ПутьКДанным = СтрокаДоступнойТаблицы.Имя;
		ПапкаПолей.Заголовок = ПапкаПолей.ПутьКДанным;
		Для Каждого СтрокаДоступногоПоля Из СтрокаДоступнойТаблицы.Строки Цикл
			ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабора.Поле = СтрокаДоступногоПоля.Имя;
			ПолеНабора.ПутьКДанным = СтрокаДоступнойТаблицы.Имя + "." + ПолеНабора.Поле;
			ПолеНабора.Заголовок = ПолеНабора.ПутьКДанным;
			ПолеНабора.ТипЗначения = СтрокаДоступногоПоля.ТипЗначения;
		КонецЦикла;
	КонецЦикла;
	Для Каждого Параметр Из Параметры Цикл
		ПараметрСхемы = СхемаКомпоновки.Параметры.Добавить();
		ПараметрСхемы.Имя = Параметр.Имя;
		ПараметрСхемы.ТипЗначения = Параметр.ТипЗначения;
	КонецЦикла;
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	КомпоновщикЧасти.Инициализировать(ИсточникНастроек);
	КомпоновщикУсловияСвязи.Инициализировать(ИсточникНастроек);
	КомпоновщикЗапроса.Инициализировать(ИсточникНастроек);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭтаФорма.мСтараяСтраницаПанелиЧасти = ЭлементыФормы.ПанельЧасти.ТекущаяСтраница;
	ЭтаФорма.мСтараяСтраницаПанелиОсновная = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница;
	
	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
	
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ПолеВыраженияПоляВыбора, , 1,,,, Конфигурация);

	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи, , 1,,,, Конфигурация);

	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ПолеВыраженияЭлементаУсловия, , 1,,,, Конфигурация);
		
	Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ПолеТекстаЗапроса, , 1,,,, Конфигурация);
		
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
		
	ЛксОбновитьТекстПослеМаркераВСтроке(ЭтаФорма.Заголовок,, мДиалектSQL);
	Если ЗапросыПакета.Количество() = 0 Тогда
		УстановитьДанные();
	КонецЕсли; 

КонецПроцедуры

Процедура ОбновитьДоступныеВременныеТаблицы()
	
	СтрокиТаблиц = ДоступныеТаблицы.НайтиСтроки(Новый Структура("Тип", "ВременнаяТаблица"));
	ИндексТекущегоЗапроса = ЗапросыПакета.Индекс(ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока);
	Для Каждого СтрокаКУдалению Из СтрокиТаблиц Цикл
		Если ИндексТекущегоЗапроса <= ЗапросыПакета.Индекс(ЗапросыПакета.Найти(СтрокаКУдалению.ПородившийЗапрос, "ИД")) Тогда
			ДоступныеТаблицы.Удалить(СтрокаКУдалению);
		КонецЕсли; 
	КонецЦикла;
	СтруктураДобавленныхТаблиц = Новый Структура();
	Для Индекс = 0 По ИндексТекущегоЗапроса - 1 Цикл
		ЗапросПакета = ЗапросыПакета[Индекс];
		Если ЗапросПакета.ТипЗапроса = 1 Тогда
			Если ДоступныеТаблицы.Найти(НРег(ЗапросПакета.ИмяВременнойТаблицы), "НПолноеИмя") = Неопределено Тогда
				СтруктураДобавленныхТаблиц.Вставить(ЗапросПакета.ИмяВременнойТаблицы, ЗапросПакета.ИД);
			КонецЕсли; 
		ИначеЕсли ЗапросПакета.ТипЗапроса = 2 Тогда
			Если СтруктураДобавленныхТаблиц.Свойство(ЗапросПакета.ИмяВременнойТаблицы) Тогда
				СтруктураДобавленныхТаблиц.Удалить(ЗапросПакета.ИмяВременнойТаблицы);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Для Каждого КлючИЗначение Из СтруктураДобавленныхТаблиц Цикл
		ДобавитьДоступнуюТаблицу1С(КлючИЗначение.Ключ, "ВременнаяТаблица", КлючИЗначение.Значение);
	КонецЦикла;  
	
КонецПроцедуры

Функция ЗаполнитьДоступныеТаблицыADO()

	Фильтры = Новый Массив();
	Фильтры.Добавить(); // TABLE_CATALOG
	Фильтры.Добавить(); // TABLE_SCHEMA
	Фильтры.Добавить(); // TABLE_NAME
	Фильтры.Добавить("TABLE"); // TABLE_TYPE
	Фильтры = Новый COMSafeArray(Фильтры, "VT_VARIANT");
	ОписаниеТаблицRecordSet = Конфигурация.OpenSchema(20, Фильтры); //adSchemaTables // Может выполняться долго (oracle)
	ADOUtils = мПлатформа.ПолучитьADOUtils();
	Если ADOUtils <> Неопределено Тогда
		ОписаниеТаблицТЗ = ADOUtils.ADORecordsetToValueTable(ОписаниеТаблицRecordSet);
		ВидимостьКолонкиСхема = Ложь;
		ВидимостьКолонкиОписание = Ложь;
		Для Каждого СтрокаТЗ Из ОписаниеТаблицТЗ Цикл
			СтрокаТаблицы = ДоступныеТаблицы.Добавить();
			СтрокаТаблицы.Имя = СтрокаТЗ.TABLE_NAME;
			СтрокаТаблицы.Схема = СтрокаТЗ.TABLE_SCHEMA;
			СтрокаТаблицы.Тип = СтрокаТЗ.TABLE_TYPE;
			СтрокаТаблицы.Описание = СтрокаТЗ.DESCRIPTION;
			ПолноИмя = СтрокаТаблицы.Имя;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Схема) Тогда
				ПолноИмя = СтрокаТаблицы.Схема + "." + ПолноИмя;
			КонецЕсли;
			СтрокаТаблицы.ПолноеИмя = ПолноИмя;
			СтрокаТаблицы.НПолноеИмя = НРег(СтрокаТаблицы.ПолноеИмя);
			ВидимостьКолонкиСхема = ВидимостьКолонкиСхема Или ЗначениеЗаполнено(СтрокаТаблицы.Схема);
			ВидимостьКолонкиОписание = ВидимостьКолонкиСхема Или ЗначениеЗаполнено(СтрокаТаблицы.Описание);
		КонецЦикла;
		ЭлементыФормы.ДоступныеТаблицы.Колонки.Схема.Видимость = ВидимостьКолонкиСхема;
		ЭлементыФормы.ДоступныеТаблицы.Колонки.Описание.Видимость = ВидимостьКолонкиОписание;
	Иначе
		Индикатор = ЛксПолучитьИндикаторПроцесса(ОписаниеТаблицRecordSet.RecordCount, "Получаем метаданные");
		Пока Не ОписаниеТаблицRecordSet.EOF() Цикл
			ЛксОбработатьИндикатор(Индикатор);
			СтрокаТаблицы = ДоступныеТаблицы.Добавить();
			СтрокаТаблицы.Имя = ОписаниеТаблицRecordSet.Fields("TABLE_NAME").Value;
			СтрокаТаблицы.Схема = ОписаниеТаблицRecordSet.Fields("TABLE_SCHEMA").Value;
			СтрокаТаблицы.Тип = ОписаниеТаблицRecordSet.Fields("TABLE_TYPE").Value;
			СтрокаТаблицы.Описание = ОписаниеТаблицRecordSet.Fields("DESCRIPTION").Value;
			ПолноИмя = СтрокаТаблицы.Имя;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Схема) Тогда
				ПолноИмя = СтрокаТаблицы.Схема + "." + ПолноИмя;
			КонецЕсли;
			СтрокаТаблицы.ПолноеИмя = ПолноИмя;
			СтрокаТаблицы.НПолноеИмя = НРег(СтрокаТаблицы.ПолноеИмя);
			ОписаниеТаблицRecordSet.MoveNext();
		КонецЦикла;
		ЛксОсвободитьИндикаторПроцесса();
	КонецЕсли; 
	Состояние();
	//Const adSchemaProviderSpecific = -1
	//Const adSchemaAsserts = 0
	//Const adSchemaCatalogs = 1
	//Const adSchemaCharacterSets = 2
	//Const adSchemaCollations = 3
	//Const adSchemaColumns = 4
	//Const adSchemaCheckConstraints = 5
	//Const adSchemaConstraintColumnUsage = 6
	//Const adSchemaConstraintTableUsage = 7
	//Const adSchemaKeyColumnUsage = 8
	//Const adSchemaReferentialConstraints = 9
	//Const adSchemaTableConstraints = 10
	//Const adSchemaColumnsDomainUsage = 11
	//Const adSchemaIndexes = 12
	//Const adSchemaColumnPrivileges = 13
	//Const adSchemaTablePrivileges = 14
	//Const adSchemaUsagePrivileges = 15
	//Const adSchemaProcedures = 16
	//Const adSchemaSchemata = 17
	//Const adSchemaSQLLanguages = 18
	//Const adSchemaStatistics = 19
	//Const adSchemaTables = 20
	//Const adSchemaTranslations = 21
	//Const adSchemaProviderTypes = 22
	//Const adSchemaViews = 23
	//Const adSchemaViewColumnUsage = 24
	//Const adSchemaViewTableUsage = 25
	//Const adSchemaProcedureParameters = 26
	//Const adSchemaForeignKeys = 27
	//Const adSchemaPrimaryKeys = 28
	//Const adSchemaProcedureColumns = 29
	//Const adSchemaDBInfoKeywords = 30
	//Const adSchemaDBInfoLiterals = 31
	//Const adSchemaCubes = 32
	//Const adSchemaDimensions = 33
	//Const adSchemaHierarchies = 34
	//Const adSchemaLevels = 35
	//Const adSchemaMeasures = 36
	//Const adSchemaProperties = 37
	//Const adSchemaMembers = 38
	//Const adSchemaTrustees = 39
	//Const adSchemaFunctions = 40
	//Const adSchemaActions = 41
	//Const adSchemaCommands = 42
	//Const adSchemaSets = 43 

	Возврат Неопределено;

КонецФункции

Процедура ЗаполнитьДоступныеТаблицы1С()

	Если ЭтотОбъект.мДоступныеТаблицыКонфигурации <> Неопределено Тогда
		ДоступныеТаблицы.Загрузить(ЭтотОбъект.мДоступныеТаблицыКонфигурации);
		Возврат;
	КонецЕсли; 
	ТабличноеПолеДоступныхТаблиц = ЭлементыФормы.ДоступныеТаблицы;
	Если ТабличноеПолеДоступныхТаблиц.ТекущаяСтрока <> Неопределено Тогда
		КлючТекущейСтроки = ТабличноеПолеДоступныхТаблиц.ТекущаяСтрока.ПолноеИмяОбъекта;
	КонецЕсли; 
	КоллекцияКорневыхТипов = Новый Массив;
	СтрокиМетаОбъектов = ирКэш.Получить().ТаблицаТиповМетаОбъектов.НайтиСтроки(Новый Структура("Категория", 0));
	Для Каждого СтрокаТаблицыМетаОбъектов Из СтрокиМетаОбъектов Цикл
		Единственное = СтрокаТаблицыМетаОбъектов.Единственное;
		Если Ложь
			Или Единственное = "Последовательность"
			Или Единственное = "КритерийОтбора"
			Или Единственное = "ЖурналДокументов"
			Или ЛксЛиКорневойТипОбъектаБД(Единственное)
			Или ЛксЛиКорневойТипРегистраБД(Единственное)
		Тогда
			КоллекцияКорневыхТипов.Добавить(Единственное);
		КонецЕсли;
	КонецЦикла;
	Если ирКэш.Получить().ВерсияПлатформы >= 802014 Тогда
		Для Каждого МетаВнешнийИсточникДанных Из Метаданные.ВнешниеИсточникиДанных Цикл
			КоллекцияКорневыхТипов.Добавить(МетаВнешнийИсточникДанных);
		КонецЦикла; 
	КонецЕсли; 
	ДобавитьДоступнуюТаблицу1С("Константы");
	КоллекцияКорневыхТипов.Добавить("Константа");
	мСтрокаТипаВнешнегоИсточникаДанных = мПлатформа.ПолучитьСтрокуТипаМетаОбъектов("ВнешнийИсточникДанных", , 0);
	Для Каждого КорневойТип Из КоллекцияКорневыхТипов Цикл
		СтрокаКорневогоТипа = мПлатформа.ПолучитьСтрокуТипаМетаОбъектов(КорневойТип);
		Если СтрокаКорневогоТипа = Неопределено Тогда
			СтрокаКорневогоТипа = мСтрокаТипаВнешнегоИсточникаДанных;
			МножественноеКорневогоТипа = СтрокаКорневогоТипа.Множественное;
			КоллекцияМетаданных = Метаданные.ВнешниеИсточникиДанных[КорневойТип.Имя].Таблицы;
			ПредставлениеКатегории = КорневойТип.Представление();
		Иначе
			МножественноеКорневогоТипа = СтрокаКорневогоТипа.Множественное;
			КоллекцияМетаданных = Метаданные[МножественноеКорневогоТипа];
			ПредставлениеКатегории = ЛксПолучитьПредставлениеИзИдентификатора(МножественноеКорневогоТипа);
		КонецЕсли; 
		Если КоллекцияМетаданных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого МетаИсточник Из КоллекцияМетаданных Цикл
			ПолноеИмяМД = МетаИсточник.ПолноеИмя();
			//Если ДоступныеОбъектыТипа <> Неопределено Тогда
			//	Если ДоступныеОбъектыТипа[НРег(МетаИсточник.Имя)] = Неопределено Тогда
			//		Продолжить;
			//	КонецЕсли; 
			//КонецЕсли;
			//
			ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД, ЛксПолучитьПервыйФрагмент(ПолноеИмяМД));
			Если ЛксЛиКорневойТипОбъектаБД(КорневойТип) Тогда
				СтруктураТЧ = ирНеглобальный.ПолучитьТабличныеЧастиОбъектаЛкс(МетаИсточник);
				Для Каждого КлючИЗначение Из СтруктураТЧ Цикл
					ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + "." + КлючИЗначение.Ключ, "ТабличнаяЧасть");
				КонецЦикла;
			КонецЕсли; 
			Если ирНеглобальный.ЕстьТаблицаИзмененийОбъектаМетаданных(МетаИсточник)	Тогда
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".Изменения", "Изменения");
			КонецЕсли;
			Если КорневойТип = "РегистрСведений" Тогда 
				Если МетаИсточник.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".СрезПоследних", "ВиртуальнаяТаблица");
				КонецЕсли;
			ИначеЕсли КорневойТип = "РегистрНакопления" Тогда 
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".Обороты", "ВиртуальнаяТаблица");
				Если МетаИсточник.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
					ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".Остатки", "ВиртуальнаяТаблица");
					ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".ОстаткиИОбороты", "ВиртуальнаяТаблица");
				КонецЕсли;
			ИначеЕсли КорневойТип = "РегистрБухгалтерии" Тогда 
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".Обороты", "ВиртуальнаяТаблица");
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".ОборотыДтКт", "ВиртуальнаяТаблица");
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".ДвиженияССубконто", "ВиртуальнаяТаблица");
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".Остатки", "ВиртуальнаяТаблица");
				ДобавитьДоступнуюТаблицу1С(ПолноеИмяМД + ".ОстаткиИОбороты", "ВиртуальнаяТаблица");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	ТекущаяСтрокаУстановлена = Ложь;
	Если КлючТекущейСтроки <> Неопределено Тогда
		НоваяТекущаяСтрока = ДоступныеТаблицы.Найти(КлючТекущейСтроки, "ПолноеИмяОбъекта", Истина);
		Если НоваяТекущаяСтрока <> Неопределено Тогда
			ЭлементыФормы.ДоступныеТаблицы.ТекущаяСтрока = НоваяТекущаяСтрока;
			ТекущаяСтрокаУстановлена = Истина;
		КонецЕсли; 
	КонецЕсли;
	ДоступныеТаблицы.Сортировать("Имя, Схема, Тип");
	ЭтотОбъект.мДоступныеТаблицыКонфигурации = ДоступныеТаблицы.Выгрузить();
	
КонецПроцедуры

Функция ДобавитьДоступнуюТаблицу1С(ПолноеИмя, ТипТаблицы = "", ПородившийЗапрос = 0)
	
	Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(ПолноеИмя);
	Если Фрагменты.Количество() > 1 Тогда
		СхемаТаблицы = Фрагменты[0];
		Фрагменты.Удалить(0);
	КонецЕсли;
	СтрокаТаблицы = ДоступныеТаблицы.Добавить();
	СтрокаТаблицы.Схема = СхемаТаблицы;
	СтрокаТаблицы.ПолноеИмя = ПолноеИмя;
	СтрокаТаблицы.НПолноеИмя = НРег(СтрокаТаблицы.ПолноеИмя);
	СтрокаТаблицы.ПородившийЗапрос = ПородившийЗапрос;
	СтрокаТаблицы.Имя = ЛксПолучитьСтрокуСРазделителемИзМассива(Фрагменты, ".");
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		ТипТаблицы = ирНеглобальный.ПолучитьТипТаблицыБДЛкс(ПолноеИмя);
	КонецЕсли; 
	СтрокаТаблицы.Тип = ТипТаблицы;
	//СтрокаТаблицы.Описание = МетаИсточник.Представление();

КонецФункции

Функция ПолучитьДоступныеПоляТаблицыПоИмени(ИмяТаблицы, ЧастьОбъединения = Неопределено)
	
	Если ЧастьОбъединения = Неопределено Тогда
		ЧастьОбъединения = ЭлементыФормы.ЧастиОбъединения.ТекущаяСтрока;
	КонецЕсли; 
	ДоступныеПоляТаблицы = Новый ТаблицаЗначений;
	ДоступныеПоляТаблицы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДоступныеПоляТаблицы.Колонки.Добавить("Поле", Новый ОписаниеТипов("Строка"));
	ДоступныеПоляТаблицы.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	ВыбраннаяТаблица = ЧастьОбъединения.ВыбранныеТаблицы.Найти(НРег(ИмяТаблицы), "НИмя");
	Если ВыбраннаяТаблица = Неопределено Тогда
		ВызватьИсключение "Выбранная таблица """ + ИмяТаблицы + """ не найдена";
	КонецЕсли; 
	СтрокаДоступнойТаблицы = ДоступныеТаблицы.Найти(НРег(ВыбраннаяТаблица.ПолноеИмя), "НПолноеИмя");
	Если СтрокаДоступнойТаблицы <> Неопределено Тогда
		ПоляТаблицы = ПолучитьПоляТаблицыИзКонфигурации(СтрокаДоступнойТаблицы);
	ИначеЕсли ВыбраннаяТаблица.ВложенныйПакет <> Неопределено Тогда
		ПоляТаблицы = ВыбраннаяТаблица.ВложенныйПакет[0].ЧастиОбъединения[0].ВыбранныеПоля;
		//СтрокаПоля.ТипЗначения = ВыбранноеПоле.ТипЗначения; // Здесь еще надо тип вычислять
	КонецЕсли;
	Если ПоляТаблицы <> Неопределено Тогда
		Для Каждого СтрокаПоля Из ПоляТаблицы Цикл
			СтрокаДоступногоПоля = ДоступныеПоляТаблицы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДоступногоПоля, СтрокаПоля); 
			СтрокаДоступногоПоля.Поле = ИмяТаблицы + "." + СтрокаПоля.Имя;
		КонецЦикла;
	КонецЕсли; 
	Возврат ДоступныеПоляТаблицы;

КонецФункции

Функция ПолучитьПоляТаблицыИзКонфигурации(СтрокаДоступнойТаблицы)
	
	ПолноеИмяТаблицы = СтрокаДоступнойТаблицы.ПолноеИмя;
	ТаблицаПолей = Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ТаблицаПолей.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ОписаниеТипов"));
	Если СтрокаДоступнойТаблицы.Тип = "ВременнаяТаблица" Тогда
		ПородившийЗапрос = ЗапросыПакета.Найти(СтрокаДоступнойТаблицы.ПородившийЗапрос, "ИД");
		Для Каждого ВыбранноеПоле Из ПородившийЗапрос.ЧастиОбъединения[0].ВыбранныеПоля Цикл
			СтрокаПоля = ТаблицаПолей.Добавить();
			СтрокаПоля.Имя = ВыбранноеПоле.Имя;
			//СтрокаПоля.ТипЗначения = ВыбранноеПоле.ТипЗначения; // Здесь еще надо тип вычислять
		КонецЦикла;
	ИначеЕсли ТипЗнч(Конфигурация) = Тип("ОбъектМетаданныхКонфигурация") Тогда
		КомпоновщикТаблицы = ирКэш.ПолучитьКомпоновщикТаблицыМетаданныхЛкс(ПолноеИмяТаблицы);
		Для Каждого ДоступноеПоле Из КомпоновщикТаблицы.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Папка Тогда
				Продолжить;
			КонецЕсли; 
			СтрокаПоля = ТаблицаПолей.Добавить();
			СтрокаПоля.Имя = ДоступноеПоле.Поле;
			СтрокаПоля.ТипЗначения = ДоступноеПоле.ТипЗначения;
		КонецЦикла;
	Иначе
		СтрокаДоступнойТаблицы = ДоступныеТаблицы.Найти(НРег(ПолноеИмяТаблицы), "НПолноеИмя");
		Фильтры = Новый Массив();
		Фильтры.Добавить(); //TABLE_CATALOG
		Если ЗначениеЗаполнено(СтрокаДоступнойТаблицы.Схема) Тогда //TABLE_SCHEMA
			Фильтры.Добавить(СтрокаДоступнойТаблицы.Схема);
		Иначе
			Фильтры.Добавить(Неопределено);
		КонецЕсли; 
		Фильтры.Добавить(СтрокаДоступнойТаблицы.Имя); // TABLE_NAME
		Фильтры = Новый COMSafeArray(Фильтры, "VT_VARIANT");
		Состояние("Запрашиваем поля " + ПолноеИмяТаблицы + "...");
		ОписаниеПолейRecordSet = Конфигурация.OpenSchema(4, Фильтры); //adSchemaColumns
		ADOUtils = мПлатформа.ПолучитьADOUtils();
		Если ADOUtils <> Неопределено Тогда
			ОписаниеПолейТЗ = ADOUtils.ADORecordsetToValueTable(ОписаниеПолейRecordSet);
			Для Каждого СтрокаТЗ Из ОписаниеПолейТЗ Цикл
				СтрокаПоля = ТаблицаПолей.Добавить();
				СтрокаПоля.Имя = СтрокаТЗ.COLUMN_NAME;
				ЧисловаяРазрядность = СтрокаТЗ.NUMERIC_SCALE;
				ДлинаТипа = СтрокаТЗ.CHARACTER_MAXIMUM_LENGTH;
				ЧисловаяТочность = СтрокаТЗ.NUMERIC_PRECISION;
				НомерТипа = СтрокаТЗ.DATA_TYPE;
				FieldADO = ирНеглобальный.FieldADO(СтрокаПоля.Имя, НомерТипа, ДлинаТипа, ЧисловаяТочность, ЧисловаяРазрядность);
				СтрокаПоля.ТипЗначения = ирНеглобальный.FieldADO_ПолучитьТип1C(FieldADO);
			КонецЦикла;
		Иначе
			Пока Не ОписаниеПолейRecordSet.EOF() Цикл
				СтрокаПоля = ТаблицаПолей.Добавить();
				СтрокаПоля.Имя = ОписаниеПолейRecordSet.Fields("COLUMN_NAME").Value;
				ЧисловаяРазрядность = ОписаниеПолейRecordSet.Fields("NUMERIC_SCALE").Value;
				ДлинаТипа = ОписаниеПолейRecordSet.Fields("CHARACTER_MAXIMUM_LENGTH").Value;
				ЧисловаяТочность = ОписаниеПолейRecordSet.Fields("NUMERIC_PRECISION").Value;
				НомерТипа = ОписаниеПолейRecordSet.Fields("DATA_TYPE").Value;
				FieldADO = ирНеглобальный.FieldADO(СтрокаПоля.Имя, НомерТипа, ДлинаТипа, ЧисловаяТочность, ЧисловаяРазрядность);
				СтрокаПоля.ТипЗначения = ирНеглобальный.FieldADO_ПолучитьТип1C(FieldADO);
				ОписаниеПолейRecordSet.MoveNext();
			КонецЦикла;
		КонецЕсли; 
		Состояние();
	КонецЕсли; 
	Возврат ТаблицаПолей;
	
КонецФункции

Процедура ОбновлениеОтображения()
	
	ЛксОбновитьЗаголовкиСтраницПанелей(ЭтаФорма);
	ЭлементыФормы.ПанельЧасти.Страницы.СвязиТаблиц.Доступность = ВыбранныеТаблицы.Количество() > 1;
	ЭлементыФормы.ВыбранныеТаблицыПанельЭлемента.Доступность = ЭлементыФормы.ВыбранныеТаблицы.Значение.Количество() > 0;
	ЭлементыФормы.ВыбранныеПоляПанельЭлемента.Доступность = ЭлементыФормы.ВыбранныеПоля.Значение.Количество() > 0;
	ЭлементыФормы.СвязиТаблицПанельЭлемента.Доступность = ЭлементыФормы.СвязиТаблиц.Значение.Количество() > 0;
	ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи.Доступность = ЭлементыФормы.ДеревоУсловияСвязи.Значение.Элементы.Количество() > 0;
	ЭлементыФормы.РежимОбъединения.Доступность = ЧастиОбъединения.Количество() = 1;
	ЭлементыФормы.ЛиПакетныйЗапрос.Доступность = ЗапросыПакета.Количество() = 1;
	ЭлементыФормы.ПанельОсновная.Страницы.ПоляИндекса.Видимость = ТипЗапроса = 1;
	ЭлементыФормы.ИмяВременнойТаблицы.Доступность = Ложь
		Или ТипЗапроса = 1
		Или ТипЗапроса = 2;


КонецПроцедуры

Функция ПриВыводеСтрокиДоступныхТаблицСвязи(ОформлениеСтроки, ДанныеСтроки)

	ТаблицаДобавленаВСвязи = Ложь
		Или СвязиТаблиц.Найти(ДанныеСтроки.Имя, "ЛеваяТаблица") <> Неопределено 
		Или СвязиТаблиц.Найти(ДанныеСтроки.Имя, "ПраваяТаблица") <> Неопределено;
	Если ТаблицаДобавленаВСвязи Тогда
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ирЦветФонаОшибки;
	КонецЕсли; 
	Возврат Неопределено;

КонецФункции

Процедура СвязиТаблицПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если СвязиТаблиц.Количество() = 1 Тогда
			Элемент.ТекущиеДанные.ЛеваяТаблица = ВыбранныеТаблицы[0].Имя;
			Элемент.ТекущиеДанные.ПраваяТаблица = ВыбранныеТаблицы[1].Имя;
		Иначе
			Элемент.ТекущиеДанные.ЛеваяТаблица = СвязиТаблиц[0].ЛеваяТаблица;
			ДобавленныеТаблицыСвязей = СвязиТаблиц.ВыгрузитьКолонку("ЛеваяТаблица");
			Для Каждого ИмяТаблицы Из СвязиТаблиц.ВыгрузитьКолонку("ПраваяТаблица") Цикл
				ДобавленныеТаблицыСвязей.Добавить(ИмяТаблицы);
			КонецЦикла;
			Для Каждого ВыбраннаяТаблица Из ВыбранныеТаблицы Цикл
				Если ДобавленныеТаблицыСвязей.Найти(ВыбраннаяТаблица.Имя) = Неопределено Тогда
					Элемент.ТекущиеДанные.ПраваяТаблица = ВыбраннаяТаблица.Имя;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ПраваяТаблица) Тогда
				ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, СвязиТаблиц[СвязиТаблиц.Количество() - 2], "ПраваяТаблица, ВсеСтрокиЛевой, ВсеСтрокиПравой"); 
			КонецЕсли; 
		КонецЕсли; 
		//Элемент.ТекущиеДанные.ЛевоеПоле = ПолучитьПолноеИмяДоступногоПоля(ДоступныеПоляВыбора.Строки.Найти(Элемент.ТекущиеДанные.ЛеваяТаблица, "Имя").Строки[0]);
		//Элемент.ТекущиеДанные.ПравоеПоле = ПолучитьПолноеИмяДоступногоПоля(ДоступныеПоляВыбора.Строки.Найти(Элемент.ТекущиеДанные.ПраваяТаблица, "Имя").Строки[0]);
		ЗагрузитьСвязьТаблицы();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыборЛевойТаблицыСвязиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиДоступныхТаблицСвязи(ОформлениеСтроки, ДанныеСтроки);
	ВыбранныеТаблицыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ВыборПравойТаблицыСвязиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиДоступныхТаблицСвязи(ОформлениеСтроки, ДанныеСтроки);
	ВыбранныеТаблицыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура ВыбранныеТаблицыИмяПриИзменении(Элемент)
	
	Для Каждого СвязьТаблиц Из СвязиТаблиц Цикл
		//Пока  Цикл
		//КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоступныеПоляЛевогоПоляПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаУсловияСвязи = ЭлементыФормы.ДеревоУсловияСвязи.ТекущаяСтрока;
	Если Истина
		И ТекущаяСтрокаУсловияСвязи <> Неопределено
		И Не Элемент.ТекущаяСтрока.Папка
		И ТипЗнч(ТекущаяСтрокаУсловияСвязи) = Тип("ЭлементОтбораКомпоновкиДанных")
	Тогда
		ЭлементыФормы.ДеревоУсловияСвязи.ТекущаяСтрока.ЛевоеЗначение = Элемент.ТекущаяСтрока.Поле;
	КонецЕсли; 

КонецПроцедуры

Процедура ДоступныеПоляПравогоПоляПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаУсловияСвязи = ЭлементыФормы.ДеревоУсловияСвязи.ТекущаяСтрока;
	Если Истина
		И ТекущаяСтрокаУсловияСвязи <> Неопределено
		И Не Элемент.ТекущаяСтрока.Папка
		И ТипЗнч(ТекущаяСтрокаУсловияСвязи) = Тип("ЭлементОтбораКомпоновкиДанных")
	Тогда
		ЭлементыФормы.ДеревоУсловияСвязи.ТекущаяСтрока.ПравоеЗначение = Элемент.ТекущаяСтрока.Поле;
	КонецЕсли; 

КонецПроцедуры

Процедура ВыборЛевойТаблицыСвязиПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаСвязи = ЭлементыФормы.СвязиТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрокаСвязи <> Неопределено Тогда
		Если ЭлементыФормы.СвязиТаблиц.ТекущаяСтрока.ЛеваяТаблица <> Элемент.ТекущаяСтрока.Имя Тогда
			ЭлементыФормы.СвязиТаблиц.ТекущаяСтрока.ЛеваяТаблица = Элемент.ТекущаяСтрока.Имя;
			ПриУстановкеЛевойТаблицыСвязи();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПриУстановкеЛевойТаблицыСвязи()
	
	// Надо раскрыть ветвь ее доступных полей
	
КонецПроцедуры

Процедура ВыборПравойТаблицыСвязиПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрокаСвязи = ЭлементыФормы.СвязиТаблиц.ТекущаяСтрока;
	Если ТекущаяСтрокаСвязи <> Неопределено Тогда
		Если ЭлементыФормы.СвязиТаблиц.ТекущаяСтрока.ПраваяТаблица <> Элемент.ТекущаяСтрока.Имя Тогда
			ЭлементыФормы.СвязиТаблиц.ТекущаяСтрока.ПраваяТаблица = Элемент.ТекущаяСтрока.Имя;
			ПриУстановкеПравойТаблицыСвязи();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПриУстановкеПравойТаблицыСвязи()
	
	// Надо раскрыть ветвь ее доступных полей
	
КонецПроцедуры

Процедура СвязиТаблицПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Условие <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Условие.УстановитьТекст(ДанныеСтроки.Условие.Отбор);
	КонецЕсли; 
	ОформлениеСтроки.Ячейки.Номер.Значение = СвязиТаблиц.Индекс(ДанныеСтроки) + 1;
	ОформитьЯчейкуИмениТаблицы(Элемент, ОформлениеСтроки, ДанныеСтроки, "ЛеваяТаблица");
	ОформитьЯчейкуИмениТаблицы(Элемент, ОформлениеСтроки, ДанныеСтроки, "ПраваяТаблица");
	
КонецПроцедуры

Процедура СохранитьОпределениеПоляВыбора()
	
	Если мТекущаяСтрокаПоляВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ВыбранныеПоля.Индекс(мТекущаяСтрокаПоляВыбора) = -1 Тогда
		// Строка была удалена
		Возврат;
	КонецЕсли; 
	мТекущаяСтрокаПоляВыбора.Определение = ЭлементыФормы.ПолеВыраженияПоляВыбора.ПолучитьТекст();
	
КонецПроцедуры

Процедура СохранитьПроизвольноеУсловие()
	
	Если Ложь
		Или мТекущаяСтрокаУсловия = Неопределено
		Или ТипЗнч(мТекущаяСтрокаУсловия) = Тип("ОтборКомпоновкиДанных") 
	Тогда
		Возврат;
	КонецЕсли; 
	//Если КомпоновщикЧасти.Настройки.Отбор.ПолучитьОбъектПоИдентификатору(Индекс(мТекущаяСтрокаУсловия) = -1 Тогда
	//	// Строка была удалена
	//	Возврат;
	//КонецЕсли; 
	мТекущаяСтрокаУсловия.Представление = ЭлементыФормы.ПолеВыраженияЭлементаУсловия.ПолучитьТекст();
	
КонецПроцедуры

Процедура СохранитьВыражениеЭлементаУсловияСвязи()
	
	Если Ложь 
		Или мТекущаяСтрокаУсловияСвязи = Неопределено 
		Или ТипЗнч(мТекущаяСтрокаУсловияСвязи) = Тип("ОтборКомпоновкиДанных")
	Тогда
		Возврат;
	КонецЕсли; 
	Родитель = мТекущаяСтрокаУсловияСвязи.Родитель;
	Если Родитель = Неопределено Тогда
		Родитель = КомпоновщикУсловияСвязи.Настройки.Отбор;
	КонецЕсли;
	Если Родитель.Элементы.Индекс(мТекущаяСтрокаУсловияСвязи) = -1 Тогда
		// Строка была удалена
		Возврат;
	КонецЕсли; 
	Если Не ЭлементыФормы.УсловиеСвязиПанельЭлемента.Доступность Тогда
		Возврат;
	КонецЕсли; 
	мТекущаяСтрокаУсловияСвязи.Представление = ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи.ПолучитьТекст();
	
КонецПроцедуры

Процедура СохранитьВыражениеУсловия()
	
	Если Ложь 
		Или мТекущаяСтрокаУсловия = Неопределено 
		Или ТипЗнч(мТекущаяСтрокаУсловия) = Тип("ОтборКомпоновкиДанных")
	Тогда
		Возврат;
	КонецЕсли; 
	Родитель = мТекущаяСтрокаУсловия.Родитель;
	Если Родитель = Неопределено Тогда
		Родитель = КомпоновщикЧасти.Настройки.Отбор;
	КонецЕсли;
	Если Родитель.Элементы.Индекс(мТекущаяСтрокаУсловия) = -1 Тогда
		// Строка была удалена
		Возврат;
	КонецЕсли; 
	Если Не ЭлементыФормы.ПолеВыраженияЭлементаУсловия.Доступность Тогда
		Возврат;
	КонецЕсли;
	мТекущаяСтрокаУсловия.Представление = ЭлементыФормы.ПолеВыраженияЭлементаУсловия.ПолучитьТекст();
	
КонецПроцедуры

Процедура СохранитьУсловиеСвязи()
	
	Если мТекущаяСтрокаСвязи = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если СвязиТаблиц.Индекс(мТекущаяСтрокаСвязи) = -1 Тогда
		// Строка была удалена
		Возврат;
	КонецЕсли; 
	мТекущаяСтрокаСвязи.Условие = КомпоновщикУсловияСвязи.ПолучитьНастройки();
	
КонецПроцедуры

Процедура ДеревоУсловияСвязиПриАктивизацииСтроки(Элемент = Неопределено)
	
	СохранитьВыражениеЭлементаУсловияСвязи();
	мТекущаяСтрокаУсловияСвязи = Элемент.ТекущаяСтрока;
	Если ТипЗнч(мТекущаяСтрокаУсловияСвязи) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		Если ТипЗнч(мТекущаяСтрокаУсловияСвязи.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			СтрокаВыбораЛевогоПоля = КомпоновщикУсловияСвязи.Настройки.ДоступныеПоляОтбора.НайтиПоле(мТекущаяСтрокаУсловияСвязи.ЛевоеЗначение);
			Если СтрокаВыбораЛевогоПоля <> Неопределено Тогда
				ЭлементыФормы.ВыборЛевогоЗначенияЭлементаУсловияСвязи.ТекущаяСтрока = СтрокаВыбораЛевогоПоля;
			КонецЕсли; 
		КонецЕсли; 
		Если ТипЗнч(мТекущаяСтрокаУсловияСвязи.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			СтрокаВыбораПравогоПоля = КомпоновщикУсловияСвязи.Настройки.ДоступныеПоляОтбора.НайтиПоле(мТекущаяСтрокаУсловияСвязи.ПравоеЗначение);
			Если СтрокаВыбораПравогоПоля <> Неопределено Тогда
				ЭлементыФормы.ВыборПравогоЗначенияЭлементаУсловияСвязи.ТекущаяСтрока = СтрокаВыбораПравогоПоля;
			КонецЕсли; 
		КонецЕсли; 
		ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи.УстановитьТекст(мТекущаяСтрокаУсловияСвязи.Представление);
		ЭлементыФормы.УсловиеСвязиПанельЭлемента.Доступность = Истина;
		Если мТекущаяСтрокаУсловияСвязи.Представление = "" Тогда
			ЭлементыФормы.УсловиеСвязиПанельЭлемента.ТекущаяСтраница = ЭлементыФормы.УсловиеСвязиПанельЭлемента.Страницы.ВыборПолей;
		Иначе
			ЭлементыФормы.УсловиеСвязиПанельЭлемента.ТекущаяСтраница = ЭлементыФормы.УсловиеСвязиПанельЭлемента.Страницы.Выражение;
		КонецЕсли; 
	Иначе
		ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи.УстановитьТекст("");
		ЭлементыФормы.УсловиеСвязиПанельЭлемента.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура УсловияПриАктивизацииСтроки(Элемент)
	
	СохранитьПроизвольноеУсловие();
	мТекущаяСтрокаУсловия = Элемент.ТекущаяСтрока;
	Если мТекущаяСтрокаУсловия <> Неопределено Тогда
		ЭлементыФормы.ПолеВыраженияЭлементаУсловия.УстановитьТекст(мТекущаяСтрокаУсловия.Представление);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеТаблицыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.Имя = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(Элемент.Значение, Элемент.ТекущиеДанные,,, ПолучитьСловоЯзыкаЗапросов("Table"));
		ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(Элемент.ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеПоляПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.Имя = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(Элемент.Значение, Элемент.ТекущиеДанные,,,
			ПолучитьСловоЯзыкаЗапросов("Field"));
	КонецЕсли; 

КонецПроцедуры

Процедура ПодстрокаФильтраДоступныхТаблицОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = "";
	
КонецПроцедуры

Процедура ПодстрокаФильтраДоступныхТаблицПриИзменении(Элемент)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ПодстрокаФильтраДоступныхТаблицНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ДоступныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ДобавитьДоступнуюТаблицуВВыбранные(ВыбраннаяСтрока);
	
КонецПроцедуры

Процедура ДоступныеПоляВыбораВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДобавитьДоступноеПолеСДочернимиВВыбранныеПоля(ВыбраннаяСтрока);
	
КонецПроцедуры

Процедура ВыбранныеТаблицыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ВложенныйПакет = ОткрытьВложенныйПакет();
	Если ВложенныйПакет <> Неопределено Тогда
		ИмяТаблицы = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(ВыбранныеТаблицы, "ВложенныйЗапрос","ВложенныйПакет");
		ВыбраннаяТаблица = ВыбранныеТаблицы.Добавить();
		ВыбраннаяТаблица.ВложенныйПакет = ВложенныйПакет;
		ВыбраннаяТаблица.Имя = ИмяТаблицы;
		ирНеглобальный.ОбновитьКопиюСвойстваВНижнемРегистреЛкс(ВыбраннаяТаблица);
		Элемент.ТекущаяСтрока = ВыбраннаяТаблица;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеПоляПриАктивизацииСтроки(Элемент)
	
	СохранитьОпределениеПоляВыбора();
	мТекущаяСтрокаПоляВыбора = Элемент.ТекущаяСтрока;
	Если мТекущаяСтрокаПоляВыбора <> Неопределено Тогда
		ЭлементыФормы.ПолеВыраженияПоляВыбора.УстановитьТекст(мТекущаяСтрокаПоляВыбора.Определение);
	КонецЕсли; 

КонецПроцедуры

Процедура ВыбранныеПоляПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Группировка.ОтображатьФлажок = Истина;
	СтрокаГруппировки = Группировки.Найти(ДанныеСтроки.Определение, "Определение");
	Если СтрокаГруппировки <> Неопределено Тогда
		ОформлениеСтроки.Ячейки.Группировка.Флажок = Истина;
	КонецЕсли;
	
КонецПроцедуры

//Функция НайтиДоступноеПоле(Определение)
//	
//	Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(Определение);
//	ДоступноеПоле = ДоступныеПоляВыбора;
//	Для Счетчик = 1 По Фрагменты.Количество() Цикл
//		ДоступноеПоле = ДоступноеПоле.Строки.Найти(Фрагменты[Счетчик - 1], "Имя");
//		Если ДоступноеПоле = Неопределено Тогда
//			Прервать;
//		КонецЕсли; 
//	КонецЦикла;
//	Возврат ДоступноеПоле;
//	
//КонецФункции

Функция ПолучитьИндексКартинкиВыражения(ПолноеИмяПоля)
	
	ТипЗначения = ПолучитьТипЗначенияВыражения(ПолноеИмяПоля);
	ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаЛкс(ТипЗначения);
	Возврат ИндексКартинки;
	
КонецФункции

Функция ПолучитьТипЗначенияВыражения(ПолноеИмяПоля)

	ДоступноеПоле = КомпоновщикЧасти.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ПолноеИмяПоля));
	//ДоступноеПоле = НайтиДоступноеПоле(ПолноеИмяПоля);
	Если ДоступноеПоле <> Неопределено Тогда
		ТипЗначения = ДоступноеПоле.Тип;
	Иначе
		ТипЗначения = Неопределено;
	КонецЕсли; 
	Возврат ТипЗначения;

КонецФункции

Процедура ВыбранныеПоляПриИзмененииФлажка(Элемент, Колонка)
	
	Если ЭлементыФормы.ВыбранныеПоля.Колонки.Группировка = Колонка Тогда
		СтрокаГруппировки = Группировки.Найти(ЭлементыФормы.ВыбранныеПоля.ТекущаяСтрока.Определение, "Определение");
		Если СтрокаГруппировки <> Неопределено Тогда
			Группировки.Удалить(СтрокаГруппировки);
		Иначе
			СтрокаГруппировки = Группировки.Добавить();
			СтрокаГруппировки.Определение = ЭлементыФормы.ВыбранныеПоля.ТекущаяСтрока.Определение;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПараметрыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.Имя = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(Элемент.Значение, Элемент.ТекущиеДанные,,, ПолучитьСловоЯзыкаЗапросов("Parameter"));
	КонецЕсли; 
	
КонецПроцедуры

Процедура СвязиТаблицПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	

КонецПроцедуры

Процедура ДоступныеВыбранныеПоляГруппировокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОпределениеПоля = "" + ВыбраннаяСтрока.Поле;
	СтрокаГруппировки = Группировки.Найти(ОпределениеПоля, "Определение");
	Если СтрокаГруппировки = Неопределено Тогда
		СтрокаГруппировки = Группировки.Добавить();
		СтрокаГруппировки.Определение = ОпределениеПоля;
	КонецЕсли; 
	ЭлементыФормы.Группировки.ТекущаяСтрока = СтрокаГруппировки;
	
КонецПроцедуры

Процедура ДоступныеВыбранныеПоляПорядкаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтрокаПорядка = ПоляПорядка.Найти(ВыбраннаяСтрока.Имя, "Определение");
	Если СтрокаПорядка = Неопределено Тогда
		СтрокаПорядка = ПоляПорядка.Добавить();
		СтрокаПорядка.Определение = ВыбраннаяСтрока.Имя;
	КонецЕсли; 
	ЭлементыФормы.ПоляПорядка.ТекущаяСтрока = СтрокаПорядка;
	
КонецПроцедуры

Процедура ПорядокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ПоляПорядка.Колонки.Направление Тогда
		Если ВыбраннаяСтрока.Направление = НаправлениеСортировки.Убыв Тогда
			ВыбраннаяСтрока.Направление = НаправлениеСортировки.Возр;
		Иначе
			ВыбраннаяСтрока.Направление = НаправлениеСортировки.Убыв;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДоступныеПоляПорядкаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ПолноеИмяПоля = ПолучитьПолноеИмяДоступногоПоля(ВыбраннаяСтрока);
	//Если ПолноеИмяПоля = Неопределено Тогда
	//	Возврат;
	//КонецЕсли; 
	//СтрокаПорядка = ПоляПорядка.Найти(ПолноеИмяПоля, "Определение");
	//Если СтрокаПорядка = Неопределено Тогда
	//	СтрокаПорядка = ПоляПорядка.Добавить();
	//	СтрокаПорядка.Определение = ВыбраннаяСтрока.Имя;
	//КонецЕсли; 
	//ЭлементыФормы.ПоляПорядка.ТекущаяСтрока = СтрокаПорядка;
	
КонецПроцедуры

Функция ПолучитьПолноеИмяДоступногоПоля(ДоступноеПоле)
	
	Результат = "" + ДоступноеПоле.Поле;
	Возврат Результат;
	
КонецФункции

Процедура УсловияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Сравнение = "=";
		Элемент.ТекущиеДанные.ЛевоеВыражение = 1;
		Элемент.ТекущиеДанные.ПравоеВыражение = 1;
		//СвязиТаблицПриАктивизацииСтроки();
	КонецЕсли; 

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Ответ = Вопрос("Хотите сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОсновныеДействияФормыОК();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	Если Не Отказ Тогда
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ПанельЧастей, ЭлементыФормы.вРазделительПанельЧастей, Панель, "лево");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДоступныеТаблицыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ДоступныеТаблицы.ТекущаяСтрока;
	ПоляДоступнойТаблицы.Очистить();
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЛксЗагрузитьВТаблицуЗначений(ПолучитьПоляТаблицыИзКонфигурации(ТекущаяСтрока), ПоляДоступнойТаблицы);
	
КонецПроцедуры

Процедура ОткрытьОтладчик(Кнопка)
	
	ВызватьИсключение ирНеглобальный.ПолучитьПриглашениеОткрытьОтладчикЛкс();
	
КонецПроцедуры

Процедура ДеревоУсловияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиОтбора(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура ДеревоУсловияПриИзмененииФлажка(Элемент, Колонка)
	
	ПереключитьРежимПроизвольногоВыраженияОтбора(Элемент, Колонка);
	ЭлементыФормы.ПолеВыраженияЭлементаУсловия.УстановитьТекст(Элемент.ТекущаяСтрока.Представление);

КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ЛксПриПолученииДанныхДоступныхПолейКомпоновки(ОформленияСтрок);

КонецПроцедуры // ПриПолученииДанныхДоступныхПолей()

Процедура УсловияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияСтрокиОтбора(Элемент, НоваяСтрока, ОтменаРедактирования);
	Если Не ОтменаРедактирования Тогда
		ЭлементыФормы.ПолеВыраженияЭлементаУсловия.УстановитьТекст(мТекущаяСтрокаУсловия.Представление);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеПоляПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ЭлементыФормы.ПолеВыраженияПоляВыбора.УстановитьТекст(мТекущаяСтрокаПоляВыбора.Определение);
		Если НоваяСтрока Тогда
			мТекущаяСтрокаПоляВыбора.ИД = Новый УникальныйИдентификатор();
		КонецЕсли; 
		мТекущаяСтрокаПоляВыбора.ТипЗначения = ПолучитьТипЗначенияВыражения(мТекущаяСтрокаПоляВыбора.Определение);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОчиститьДанные() Экспорт
	
	ЗапросыПакета.Очистить();
	ЧастиОбъединения.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляПорядка.Очистить();
	Группировки.Очистить();
	СвязиТаблиц.Очистить();
	АгрегируемыеПоля.Очистить();
	Параметры.Очистить();
	ЭтаФорма.ОпцияПервые = Неопределено;
	ЭтаФорма.ОпцияРазличные = Неопределено;
	ЭтаФорма.ОпцияАвтоупорядочивание = Неопределено;
	ЭтаФорма.ОпцияРазрешенные = Неопределено;
	ЭтаФорма.РежимОбъединения = Ложь;
	ЭтаФорма.ЛиПакетныйЗапрос = Ложь;
	ЭтаФорма.ТипЗапроса = 0;
	КомпоновщикЧасти.Настройки.Отбор.Элементы.Очистить();
	
КонецПроцедуры

Процедура ПереключитьРежимРедактированияТекста()
	
	ЭтаФорма.мРежимРедактированияТекста = Не мРежимРедактированияТекста;
	ЭлементыФормы.КПТекст.Кнопки.Редактировать.Пометка = мРежимРедактированияТекста;
	ЭлементыФормы.ПолеТекстаЗапроса.ТолькоПросмотр = Не мРежимРедактированияТекста;
	Для Каждого Страница Из ЭлементыФормы.ПанельОсновная.Страницы Цикл
		Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница <> Страница Тогда
			Страница.Доступность = Не мРежимРедактированияТекста;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура КПТекстРедактировать(Кнопка)

	Если мРежимРедактированияТекста Тогда
		Компонента = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ЭлементыФормы.ПолеТекстаЗапроса.Имя];
		Если Компонента.РазобратьТекстВКонструктор() Тогда
			ПереключитьРежимРедактированияТекста();
		КонецЕсли; 
	Иначе
		ПереключитьРежимРедактированияТекста();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДиалектSQLОчистка(Элемент, СтандартнаяОбработка)
	
	ДиалектSQL = мДиалектSQL;
	
КонецПроцедуры

Процедура ДиалектSQLПриИзменении(Элемент)
	
	ПересобратьВременныйТекст();
	
КонецПроцедуры

Процедура ПересобратьВременныйТекст()
	
	Текст = СобратьТекстИзКонструктора(, ДиалектSQL, Английский1С);
	ЭлементыФормы.ПолеТекстаЗапроса.УстановитьТекст(Текст);

КонецПроцедуры

Процедура ПанельОсновнаяПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница =  Неопределено)
	
	Элемент = ЭлементыФормы.ПанельОсновная;
	ТекущаяСтраница = Элемент.Страницы.Индекс(Элемент.ТекущаяСтраница);
	ЗакончитьРедактированиеСвязанныхПолей();
	Если Ложь
		Или мСтараяСтраницаПанелиОсновная = ЭлементыФормы.ПанельОсновная.Страницы.Параметры
	Тогда
		ОбновитьИсточникДоступныхНастроекКомпоновки();
	КонецЕсли; 
	лТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы[ТекущаяСтраница];
	Если лТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.Текст Тогда
		Текст = СобратьТекстИзКонструктора();
		ЭлементыФормы.ПолеТекстаЗапроса.УстановитьТекст(Текст);
	//ИначеЕсли лТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.Итоги Тогда
	//	ЭтаФорма.ДоступныеПоляИтогов = ЧастиОбъединения[0].ВыбранныеПоля;
	ИначеЕсли лТекущаяСтраница = ЭлементыФормы.ПанельОсновная.Страницы.ПсевдонимыПолей Тогда
		ОбновитьПсевдонимыПолей();
	КонецЕсли; 
	ЭтаФорма.мСтараяСтраницаПанелиОсновная = Элемент.Страницы[ТекущаяСтраница];
	
КонецПроцедуры

Функция ОбновитьПсевдонимыПолей()

	ПсевдонимыПолей.Очистить();
	Пока ПсевдонимыПолей.Колонки.Количество() > 1 Цикл
		ПсевдонимыПолей.Колонки.Удалить(1);
	КонецЦикла;
	Пока ЭлементыФормы.ПсевдонимыПолей.Колонки.Количество() > 1 Цикл
		ЭлементыФормы.ПсевдонимыПолей.Колонки.Удалить(1);
	КонецЦикла;
	Для Каждого ЧастьОбъединения Из ЧастиОбъединения Цикл
		КолонкаЧастиИД = ПсевдонимыПолей.Колонки.Добавить("_" + ЧастьОбъединения.Номер);
		КолонкаЧастиОпределение = ПсевдонимыПолей.Колонки.Добавить("Определение" + ЧастьОбъединения.Номер);
		КолонкаТП = ЭлементыФормы.ПсевдонимыПолей.Колонки.Добавить("Определение" + ЧастьОбъединения.Номер);
		КолонкаТП.ТекстШапки = ЧастьОбъединения.Имя;
		КолонкаТП.Данные = КолонкаЧастиОпределение.Имя;
		КолонкаТП.КартинкиСтрок = БиблиотекаКартинок.ирТипыДоступныхПолейКомпоновки;
		КолонкаТП.ТолькоПросмотр = Истина;
		Для Каждого ВыбранноеПоле Из ЧастьОбъединения.ВыбранныеПоля Цикл
			СтрокаПсевдонимаПоля = ПсевдонимыПолей.Найти(ВыбранноеПоле.Имя, "Имя");
			Если СтрокаПсевдонимаПоля = Неопределено Тогда
				СтрокаПсевдонимаПоля = ПсевдонимыПолей.Добавить();
				СтрокаПсевдонимаПоля.Имя = ВыбранноеПоле.Имя;
			КонецЕсли; 
			СтрокаПсевдонимаПоля[КолонкаЧастиИД.Имя] = ВыбранноеПоле.ИД;
			СтрокаПсевдонимаПоля[КолонкаЧастиОпределение.Имя] = ВыбранноеПоле.Определение;
		КонецЦикла;
	КонецЦикла;
	Возврат Неопределено;

КонецФункции

Процедура СвязиТаблицПриАктивизацииСтроки(Элемент = Неопределено)
	
	СохранитьУсловиеСвязи();
	ЗагрузитьСвязьТаблицы();

КонецПроцедуры

Процедура ЗагрузитьСвязьТаблицы()
	
	Элемент = ЭлементыФормы.СвязиТаблиц;
	мТекущаяСтрокаСвязи = Элемент.ТекущаяСтрока;
	Если мТекущаяСтрокаСвязи <> Неопределено Тогда
		СтрокаВыбораЛевойТаблицы = ЭлементыФормы.ВыборЛевойТаблицыСвязи.Значение.Найти(мТекущаяСтрокаСвязи.ЛеваяТаблица, "ПолноеИмя");
		Если СтрокаВыбораЛевойТаблицы <> Неопределено Тогда
			ЭлементыФормы.ВыборЛевойТаблицыСвязи.ТекущаяСтрока = СтрокаВыбораЛевойТаблицы;
		КонецЕсли; 
		СтрокаВыбораПравойТаблицы = ЭлементыФормы.ВыборПравойТаблицыСвязи.Значение.Найти(мТекущаяСтрокаСвязи.ПраваяТаблица, "ПолноеИмя");
		Если СтрокаВыбораПравойТаблицы <> Неопределено Тогда
			ЭлементыФормы.ВыборПравойТаблицыСвязи.ТекущаяСтрока = СтрокаВыбораПравойТаблицы;
		КонецЕсли; 
		Если мТекущаяСтрокаСвязи.Условие <> Неопределено Тогда
			НоваяНастройкаКомпоновки = мТекущаяСтрокаСвязи.Условие; 
		Иначе
			НоваяНастройкаКомпоновки = Новый НастройкиКомпоновкиДанных;
		КонецЕсли; 
		КомпоновщикУсловияСвязи.ЗагрузитьНастройки(НоваяНастройкаКомпоновки);
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоУсловияПриАктивизацииСтроки(Элемент)
		
	СохранитьВыражениеУсловия();
	мТекущаяСтрокаУсловия = Элемент.ТекущаяСтрока;
	Если ТипЗнч(мТекущаяСтрокаУсловия) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		//СтрокаВыбораЛевогоПоля = КомпоновщикУсловияСвязи.Настройки.ДоступныеПоляОтбора.НайтиПоле(мТекущаяСтрокаУсловияСвязи.ЛевоеЗначение);
		//Если СтрокаВыбораЛевогоПоля <> Неопределено Тогда
		//	ЭлементыФормы.ВыборЛевогоЗначенияЭлементаУсловияСвязи.ТекущаяСтрока = СтрокаВыбораЛевогоПоля;
		//КонецЕсли; 
		//СтрокаВыбораПравогоПоля = КомпоновщикУсловияСвязи.Настройки.ДоступныеПоляОтбора.НайтиПоле(мТекущаяСтрокаУсловияСвязи.ПравоеЗначение);
		//Если СтрокаВыбораПравогоПоля <> Неопределено Тогда
		//	ЭлементыФормы.ВыборПравогоЗначенияЭлементаУсловияСвязи.ТекущаяСтрока = СтрокаВыбораПравогоПоля;
		//КонецЕсли; 
		ЭлементыФормы.ПолеВыраженияЭлементаУсловия.Доступность = Истина;
		ЭлементыФормы.ПолеВыраженияЭлементаУсловия.УстановитьТекст(мТекущаяСтрокаУсловия.Представление);
	Иначе
		ЭлементыФормы.ПолеВыраженияЭлементаУсловия.Доступность = Ложь;
		ЭлементыФормы.ПолеВыраженияЭлементаУсловия.УстановитьТекст("");
	КонецЕсли; 

КонецПроцедуры

Процедура ДеревоУсловияСвязиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриОкончанииРедактированияСтрокиОтбора(Элемент, НоваяСтрока, ОтменаРедактирования);
	Если Не ОтменаРедактирования Тогда
		ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи.УстановитьТекст(мТекущаяСтрокаУсловияСвязи.Представление);
	КонецЕсли; 

КонецПроцедуры

Процедура Английский1СПриИзменении(Элемент)
	
	ПересобратьВременныйТекст();

КонецПроцедуры

Процедура ОбъединениеПриИзменении(Элемент)
	
	ЛксИзменитьСвернутость(РежимОбъединения, ЭлементыФормы.ПанельЧастей, ЭлементыФормы.вРазделительПанельЧастей, Панель, "лево");
	
КонецПроцедуры

Процедура СохранитьЧастьОбъединения()
	
	Если мТекущаяСтрокаЧастиОбъединения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЧастиОбъединения.Индекс(мТекущаяСтрокаЧастиОбъединения) = -1 Тогда
		// Строка была удалена
		Возврат;
	КонецЕсли; 
	СохранитьВыбраннуюТаблицу();
	СохранитьПроизвольноеУсловие();
	СохранитьВыражениеЭлементаУсловияСвязи();
	//мТекущаяСтрокаЧастиОбъединения.ВыбранныеТаблицы = ВыбранныеТаблицы.Скопировать();
	//мТекущаяСтрокаЧастиОбъединения.СвязиТаблиц = СвязиТаблиц.Скопировать();
	//мТекущаяСтрокаЧастиОбъединения.ВыбранныеПоля = ВыбранныеПоля.Скопировать();
	//мТекущаяСтрокаЧастиОбъединения.Группировки = Группировки.Скопировать();
	мТекущаяСтрокаЧастиОбъединения.Отбор = КомпоновщикЧасти.ПолучитьНастройки();
	мТекущаяСтрокаЧастиОбъединения.ОпцияРазличные = ОпцияРазличные;
	мТекущаяСтрокаЧастиОбъединения.Комментарий = ЭлементыФормы.КомментарийЧасти.ПолучитьТекст();
	мТекущаяСтрокаЧастиОбъединения.КомментарийОтбора = ЭлементыФормы.КомментарийОтбора.ПолучитьТекст();
	ОбновитьНаименованиеЧасти(мТекущаяСтрокаЧастиОбъединения);
	
КонецПроцедуры

Процедура СохранитьЗапросПакета()
	
	Если мТекущаяСтрокаЗапросыПакета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗапросыПакета.Индекс(мТекущаяСтрокаЗапросыПакета) = -1 Тогда
		// Строка была удалена
		Возврат;
	КонецЕсли; 
	СохранитьЧастьОбъединения();
	мТекущаяСтрокаЗапросыПакета.ПоляПорядка = ПоляПорядка.Скопировать();
	мТекущаяСтрокаЗапросыПакета.ПоляИндекса = ПоляИндекса.Скопировать();
	мТекущаяСтрокаЗапросыПакета.ГруппирующиеПоляИтогов = ГруппирующиеПоляИтогов.Скопировать();
	мТекущаяСтрокаЗапросыПакета.ЧастиОбъединения = ЧастиОбъединения.Скопировать();
	мТекущаяСтрокаЗапросыПакета.ПсевдонимыПолей = ПсевдонимыПолей.Скопировать();
	мТекущаяСтрокаЗапросыПакета.ГруппируемыеПоляИтогов = ГруппируемыеПоляИтогов.Скопировать();
	мТекущаяСтрокаЗапросыПакета.ТипЗапроса = ТипЗапроса;
	мТекущаяСтрокаЗапросыПакета.ОпцияОбщиеИтоги = ОпцияОбщиеИтоги;
	мТекущаяСтрокаЗапросыПакета.ОпцияАвтоупорядочивание = ОпцияАвтоупорядочивание;
	мТекущаяСтрокаЗапросыПакета.ОпцияПервые = ОпцияПервые;
	мТекущаяСтрокаЗапросыПакета.ОпцияРазрешенные = ОпцияРазрешенные;
	мТекущаяСтрокаЗапросыПакета.ПервыеКоличество = ПервыеКоличество;
	мТекущаяСтрокаЗапросыПакета.ИмяВременнойТаблицы = ИмяВременнойТаблицы;
	мТекущаяСтрокаЗапросыПакета.ИмяВременнойТаблицы = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(ЗапросыПакета, мТекущаяСтрокаЗапросыПакета, "ИмяВременнойТаблицы");
	ОбновитьНаименованиеЗапроса(мТекущаяСтрокаЗапросыПакета);
	
КонецПроцедуры

Процедура ЧастиОбъединенияПриАктивизацииСтроки(Элемент = Неопределено)
	
	СохранитьЧастьОбъединения();
	ЗагрузитьЧастьОбъединения();
	
КонецПроцедуры

Процедура ЗагрузитьЧастьОбъединения()
	
	Элемент = ЭлементыФормы.ЧастиОбъединения;
	мТекущаяСтрокаЧастиОбъединения = Элемент.ТекущаяСтрока;
	Если мТекущаяСтрокаЧастиОбъединения <> Неопределено Тогда
		ОбновитьДоступныеВременныеТаблицы();
		ЭтаФорма.ВыбранныеТаблицы = мТекущаяСтрокаЧастиОбъединения.ВыбранныеТаблицы;
		ЭтаФорма.ВыбранныеПоля = мТекущаяСтрокаЧастиОбъединения.ВыбранныеПоля;
		ЭтаФорма.СвязиТаблиц = мТекущаяСтрокаЧастиОбъединения.СвязиТаблиц;
		ЭтаФорма.Группировки = мТекущаяСтрокаЧастиОбъединения.Группировки;
		ОбновитьИсточникДоступныхНастроекКомпоновки();
		КомпоновщикЧасти.ЗагрузитьНастройки(мТекущаяСтрокаЧастиОбъединения.Отбор);
		КомпоновщикУсловияСвязи.ЗагрузитьНастройки(Новый НастройкиКомпоновкиДанных);
		ЭтаФорма.ОпцияРазличные = мТекущаяСтрокаЧастиОбъединения.ОпцияРазличные;
		ЭлементыФормы.КомментарийЧасти.УстановитьТекст(мТекущаяСтрокаЧастиОбъединения.Комментарий);
		ЭлементыФормы.КомментарийОтбора.УстановитьТекст(мТекущаяСтрокаЧастиОбъединения.КомментарийОтбора);
		Для Каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
			ВыбранноеПоле.ТипЗначения = ПолучитьТипЗначенияВыражения(ВыбранноеПоле.Определение);
		КонецЦикла;
		ПанельЧастиПриСменеСтраницы();
	КонецЕсли; 

КонецПроцедуры

Процедура ЧастиОбъединенияПередУдалением(Элемент, Отказ)
	
	Если Элемент.Значение.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЧастиОбъединенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ЧастьОбъединения = ДобавитьЧастьОбъединения(ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока);
	ЗагрузитьЗапросПакета();
	Элемент.ТекущаяСтрока = ЧастьОбъединения;
	
КонецПроцедуры

Процедура ДоступныеПоляИтоговВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОпределениеПоля = "" + ВыбраннаяСтрока.Имя;
	СтрокаГруппирующегоПоля = ГруппирующиеПоляИтогов.Найти(ОпределениеПоля, "Определение");
	Если СтрокаГруппирующегоПоля = Неопределено Тогда
		СтрокаГруппирующегоПоля = ГруппирующиеПоляИтогов.Добавить();
		СтрокаГруппирующегоПоля.Определение = ОпределениеПоля;
		СтрокаГруппирующегоПоля.ТипИтогов = "Элементы";
	КонецЕсли; 
	ЭлементыФормы.ГруппирующиеПоляИтогов.ТекущаяСтрока = СтрокаГруппирующегоПоля;

КонецПроцедуры

Процедура ГруппирующиеПоляИтоговПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.Имя) Тогда
		ОформлениеСтроки.Ячейки.Имя.УстановитьТекст(ДанныеСтроки.Определение);
		ОформлениеСтроки.Ячейки.Имя.ЦветТекста = ЦветаСтиля.ЦветТекстаНедоступныхКолонок;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛиПакетныйЗапросПриИзменении(Элемент)
	
	ЛксИзменитьСвернутость(ЛиПакетныйЗапрос, ЭлементыФормы.ПанельПакета, ЭлементыФормы.вРазделительПанельПакета, Панель, "лево");

КонецПроцедуры

Процедура ЗапросыПакетаПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ЗапросПакета = ДобавитьЗапросПакета();
	Элемент.ТекущаяСтрока = ЗапросПакета;

КонецПроцедуры

Процедура ЗапросыПакетаПриАктивизацииСтроки(Элемент)
	
	СохранитьЗапросПакета();
	ЗагрузитьЗапросПакета();

КонецПроцедуры

Процедура ЗагрузитьЗапросПакета()
	
	Элемент = ЭлементыФормы.ЗапросыПакета;
	мТекущаяСтрокаЗапросыПакета = ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока;
	Если мТекущаяСтрокаЗапросыПакета <> Неопределено Тогда
		ЭтаФорма.ЧастиОбъединения = мТекущаяСтрокаЗапросыПакета.ЧастиОбъединения;
		Если ЭтаФорма.ЧастиОбъединения.Количество() = 0 Тогда
			ДобавитьЧастьОбъединения(мТекущаяСтрокаЗапросыПакета);
		КонецЕсли; 
		ЭтаФорма.ПоляПорядка = мТекущаяСтрокаЗапросыПакета.ПоляПорядка;
		ЭтаФорма.ПоляИндекса = мТекущаяСтрокаЗапросыПакета.ПоляИндекса;
		ЭтаФорма.ГруппируемыеПоляИтогов = мТекущаяСтрокаЗапросыПакета.ГруппируемыеПоляИтогов;
		ЭтаФорма.ГруппирующиеПоляИтогов = мТекущаяСтрокаЗапросыПакета.ГруппирующиеПоляИтогов;
		ЭтаФорма.ТипЗапроса = мТекущаяСтрокаЗапросыПакета.ТипЗапроса;
		ЭтаФорма.ОпцияРазрешенные = мТекущаяСтрокаЗапросыПакета.ОпцияРазрешенные;
		ЭтаФорма.ОпцияОбщиеИтоги = мТекущаяСтрокаЗапросыПакета.ОпцияОбщиеИтоги;
		ЭтаФорма.ОпцияПервые = мТекущаяСтрокаЗапросыПакета.ОпцияПервые;
		ЭтаФорма.ОпцияАвтоупорядочивание = мТекущаяСтрокаЗапросыПакета.ОпцияАвтоупорядочивание;
		ЭтаФорма.ИмяВременнойТаблицы = мТекущаяСтрокаЗапросыПакета.ИмяВременнойТаблицы;
		ЭтаФорма.ПервыеКоличество = мТекущаяСтрокаЗапросыПакета.ПервыеКоличество;
		ДоступныеПоляПсевдонима.Очистить();
		ПанельОсновнаяПриСменеСтраницы();
		Если ЭлементыФормы.ПанельОсновная.ТекущаяСтраница <> ЭлементыФормы.ПанельОсновная.Страницы.ПсевдонимыПолей Тогда
			ОбновитьПсевдонимыПолей();
		КонецЕсли;
		ЧастиОбъединенияПриАктивизацииСтроки();
		ЭтаФорма.РежимОбъединения = мТекущаяСтрокаЗапросыПакета.ЧастиОбъединения.Количество() > 1;
		ЛксИзменитьСвернутость(РежимОбъединения, ЭлементыФормы.ПанельЧастей, ЭлементыФормы.вРазделительПанельЧастей, Панель, "лево");
	КонецЕсли; 

КонецПроцедуры

Процедура ДоступныеТаблицыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Тип = ДанныеСтроки.Тип;
	ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(Тип);
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = ИндексКартинки;
	
КонецПроцедуры

Процедура ОформитьЯчейкуИмениТаблицы(Элемент, ОформлениеСтроки, ДанныеСтроки, ИмяЯчейкиТаблицы)
	
	ИндексКартинки = Неопределено;
	СтрокаВыбраннойТаблицы = ВыбранныеТаблицы.Найти(ДанныеСтроки[ИмяЯчейкиТаблицы], "Имя");
	Если СтрокаВыбраннойТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИндексКартинки = ПолучитьИндексКартинкиВыбраннойТаблицы(СтрокаВыбраннойТаблицы);
	ОформлениеСтроки.Ячейки[ИмяЯчейкиТаблицы].ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки[ИмяЯчейкиТаблицы].ИндексКартинки = ИндексКартинки;
	
КонецПроцедуры

Процедура ВыбранныеТаблицыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СтрокаДоступнойТаблицы = Неопределено;
	ИндексКартинки = ПолучитьИндексКартинкиВыбраннойТаблицы(ДанныеСтроки, СтрокаДоступнойТаблицы);
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = ИндексКартинки;
	Если Истина
		И ДанныеСтроки.ВложенныйПакет = Неопределено
		И СтрокаДоступнойТаблицы = Неопределено 
		И Найти(ДанныеСтроки.ПолноеИмя, ".") > 0
	Тогда
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ирЦветФонаОшибки;
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьИндексКартинкиВыбраннойТаблицы(ДанныеСтроки, выхСтрокаДоступнойТаблицы = Неопределено)

	ИндексКартинки = Неопределено;
	Если ДанныеСтроки.ВложенныйПакет <> Неопределено Тогда
		ИндексКартинки = 0;
	КонецЕсли; 
	Если ИндексКартинки = Неопределено Тогда
		выхСтрокаДоступнойТаблицы = ДоступныеТаблицы.Найти(НРег(ДанныеСтроки.ПолноеИмя), "НПолноеИмя");
		Если выхСтрокаДоступнойТаблицы <> Неопределено Тогда
			Тип = выхСтрокаДоступнойТаблицы.Тип;
		КонецЕсли; 
	КонецЕсли; 
	Если ИндексКартинки = Неопределено Тогда
		ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(Тип);
	КонецЕсли;
	Возврат ИндексКартинки;

КонецФункции

Процедура ТипЗапросаПриИзменении(Элемент)
	
	ОбновитьНаименованиеЗапроса(ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока);

КонецПроцедуры

Процедура ОбновитьНаименованиеЗапроса(ЗапросПакета)
	
	Если ЗапросПакета.ТипЗапроса = 0 Тогда
		ЗапросПакета.Имя = ЗапросПакета.Владелец().Индекс(ЗапросПакета);
	ИначеЕсли ЗапросПакета.ТипЗапроса = 1 Тогда
		ЗапросПакета.Имя = "+" + ЗапросПакета.ИмяВременнойТаблицы;
	ИначеЕсли ЗапросПакета.ТипЗапроса = 2 Тогда
		ЗапросПакета.Имя = "-" + ЗапросПакета.ИмяВременнойТаблицы;
	Иначе
		ЗапросПакета.Имя = ЗапросПакета.Владелец().Индекс(ЗапросПакета);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьНаименованиеЧасти(ЧастьОбъединения)
	
	Имя = "";
	Для Каждого СтрокаВыбраннойТаблицы Из ЧастьОбъединения.ВыбранныеТаблицы Цикл
		Если Имя <> "" Тогда
			Имя = Имя + "; ";
		КонецЕсли; 
		Имя = Имя + СтрокаВыбраннойТаблицы.Имя;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Имя = ЧастьОбъединения.Номер;
	КонецЕсли; 
	ЧастьОбъединения.Имя = Имя;
	
КонецПроцедуры

Процедура ВыбранныеТаблицыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.ВложенныйПакет <> Неопределено Тогда
		ОткрытьВложенныйПакет(ВыбраннаяСтрока.ВложенныйПакет);
	КонецЕсли; 
	
КонецПроцедуры

Функция ОткрытьВложенныйПакет(ВложенныйПакет = Неопределено)
	
	ФормаКонструктора = ПолучитьФорму("КонструкторЗапроса", ЭтаФорма);
	ФормаКонструктора.ЭтоВложенныйЗапрос = Истина;
	Если ВложенныйПакет <> Неопределено Тогда
		ФормаКонструктора.ЗапросыПакета = ВложенныйПакет.Скопировать();
	КонецЕсли; 
	РезультатФормы = ФормаКонструктора.ОткрытьМодально();
	Если РезультатФормы <> Неопределено Тогда
		ВложенныйПакет = ФормаКонструктора.ЗапросыПакета;
	КонецЕсли; 
	Возврат ВложенныйПакет;
	
КонецФункции

Процедура ИмяВременнойТаблицыПриИзменении(Элемент)

	ОбновитьНаименованиеЗапроса(ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ОбновитьНомераЗапросов()
	
	Для Каждого ЗапросПакета Из ЗапросыПакета Цикл
		ЗапросПакета.Номер = ЗапросыПакета.Индекс(ЗапросПакета) + 1; 
		ОбновитьНаименованиеЗапроса(ЗапросПакета);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапросыПакетаПослеУдаления(Элемент)
	
	ОбновитьНомераЗапросов();
	
КонецПроцедуры

Процедура СохранитьВыбраннуюТаблицу()
	
	Если мТекущаяСтрокаВыбранныеТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначенияПараметров = ПараметрыТаблицы.ВыгрузитьКолонку("Значение");
	мТекущаяСтрокаВыбранныеТаблицы.Параметры = ЗначенияПараметров;
	
КонецПроцедуры

Процедура ВыбранныеТаблицыПриАктивизацииСтроки(Элемент)
	
	Элемент = ЭлементыФормы.ВыбранныеТаблицы;
	СохранитьВыбраннуюТаблицу();
	мТекущаяСтрокаВыбранныеТаблицы = Элемент.ТекущаяСтрока;
	Если мТекущаяСтрокаВыбранныеТаблицы <> Неопределено Тогда
		ПараметрыТаблицы.Очистить();
		ЗначенияПараметров = мТекущаяСтрокаВыбранныеТаблицы.Параметры;
		ДоступнаяТаблица = ДоступныеТаблицы.Найти(НРег(мТекущаяСтрокаВыбранныеТаблицы.ПолноеИмя), "НПолноеИмя");
		Если Истина
			И ДоступнаяТаблица <> Неопределено 
			И ДоступнаяТаблица.Тип = "ВиртуальнаяТаблица" 
		Тогда
			//МассивЗащитыОтРекурсии.Очистить();
			ТаблицаСтруктурТиповКонтекста = ОпределитьТипЗначенияКонтекста(Элемент.ТекущаяСтрока.ПолноеИмя);
			Если ТаблицаСтруктурТиповКонтекста.Количество() > 0 Тогда
				СтруктураТипа = ТаблицаСтруктурТиповКонтекста[0];
				ИмяОбщегоТипа = СтруктураТипа.ИмяОбщегоТипа;
				ИмяВиртуальнойТаблицы = ЛксПолучитьПоследнийФрагмент(ИмяОбщегоТипа);
				ТипКонтекста = Лев(ИмяОбщегоТипа, СтрДлина(ИмяОбщегоТипа) - СтрДлина(ИмяВиртуальнойТаблицы) - 1);
				СтруктураКлюча = Новый Структура("ТипКонтекста, Слово, ЯзыкПрограммы", ТипКонтекста, ИмяВиртуальнойТаблицы, 1);
				НайденныеСтроки = мПлатформа.ТаблицаПараметров.НайтиСтроки(СтруктураКлюча);
				Если НайденныеСтроки.Количество() > 0 Тогда
					Для Каждого СтрокаОписанияПараметра Из НайденныеСтроки Цикл
						СтрокаПараметра = ПараметрыТаблицы.Добавить();
						СтрокаПараметра.Имя = СтрокаОписанияПараметра.Параметр;
						Если Истина
							И ЗначенияПараметров <> Неопределено 
							И ЗначенияПараметров.Количество() > ПараметрыТаблицы.Количество() -1
						Тогда
							СтрокаПараметра.Значение = ЗначенияПараметров[ПараметрыТаблицы.Количество() -1];
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если Истина
			И ЗначенияПараметров <> Неопределено 
			И ПараметрыТаблицы.Количество() = 0
		Тогда
			Для Каждого ЗначениеПараметра Из ЗначенияПараметров Цикл
				СтрокаПараметра = ПараметрыТаблицы.Добавить();
				СтрокаПараметра.Имя = "Неизвестный" + ПараметрыТаблицы.Количество();
				СтрокаПараметра.Значение = ЗначениеПараметра;
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПараметрыТаблицыПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ПараметрыТаблицы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		НовыйТекст = "";
	Иначе
		НовыйТекст = ТекущаяСтрока.Значение;
	КонецЕсли; 
	ЭлементыФормы.ЗначениеПараметраТаблицы.УстановитьТекст(НовыйТекст);
	
КонецПроцедуры

Процедура КППараметрыТаблицыПодсказатьПараметр(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ПараметрыТаблицы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЭтотОбъект.мНомерПараметра = ПараметрыТаблицы.Индекс(ТекущаяСтрока);
	ОткрытьПоискВСинтаксПомощнике(ЭлементыФормы.ВыбранныеТаблицы.ТекущаяСтрока.ПолноеИмя);
	
КонецПроцедуры

Процедура КПДоступныеТаблицыПерейтиКОпределению(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ДоступныеТаблицы.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТекущаяСтрока.Тип = "ВременнаяТаблица" Тогда
		ПородившаяСтрокаПакета = ЗапросыПакета.Найти(ТекущаяСтрока.ПородившийЗапрос, "ИД");
		Если ПородившаяСтрокаПакета <> Неопределено Тогда
			ЭлементыФормы.ЗапросыПакета.ТекущаяСтрока = ПородившаяСтрокаПакета;
		КонецЕсли; 
	Иначе
		ОткрытьПоискВСинтаксПомощнике(ТекущаяСтрока.ПолноеИмя);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КПВыбранныеТаблицыНайтиВСписке(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ВыбранныеТаблицы.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтрокаДоступнойТаблицы = ДоступныеТаблицы.Найти(НРег(ТекущаяСтрока.ПолноеИмя), "НПолноеИмя");
		Если СтрокаДоступнойТаблицы <> Неопределено Тогда
			ЭлементыФормы.ДоступныеТаблицы.ТекущаяСтрока = СтрокаДоступнойТаблицы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекущуюЧастьПсевдонима()
	
	ТекущаяКолонка = ЭлементыФормы.ПсевдонимыПолей.ТекущаяКолонка;
	Если ТекущаяКолонка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	ИмяКолонки = ТекущаяКолонка.Данные;
	Если ИмяКолонки = "Имя" Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Префикс = "Определение";
	Результат = ЧастиОбъединения.Найти(Число(Сред(ИмяКолонки, СтрДлина(Префикс) + 1)), "Номер");
	Возврат Результат;
	
КонецФункции

Процедура ПсевдонимыПолейПриАктивизацииКолонки(Элемент)
	
	ДоступныеПоляПсевдонима.Очистить();
	ВыбраннаяЧасть = ПолучитьТекущуюЧастьПсевдонима();
	Если ВыбраннаяЧасть = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаДоступногоПоля = ДоступныеПоляПсевдонима.Добавить();
	СтрокаДоступногоПоля.Определение = "<Неопределено>";
	Для Каждого ВыбранноеПоле Из ВыбраннаяЧасть.ВыбранныеПоля Цикл
		СтрокаДоступногоПоля = ДоступныеПоляПсевдонима.Добавить();
		СтрокаДоступногоПоля.ИД = ВыбранноеПоле.ИД;
		СтрокаДоступногоПоля.Определение = ВыбранноеПоле.Определение;
		СтрокаДоступногоПоля.Имя = ВыбранноеПоле.Имя;
	КонецЦикла;
	ПсевдонимыПолейПриАктивизацииСтроки();
	
КонецПроцедуры

Процедура ВыбранныеПоляЧастиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Истина
		И ДанныеСтроки.Имя = "" 
		И ДанныеСтроки.Определение <> "<Неопределено>"
	Тогда
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.ирЦветФонаОшибки;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДоступныеПоляПсевдонимаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтароеИмяПоля = Элемент.ТекущаяСтрока.Имя;
	ВыбраннаяЧасть = ПолучитьТекущуюЧастьПсевдонима();
	Если ВыбраннаяЧасть = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтараяСвязьПоля = ПсевдонимыПолей.Найти(СтароеИмяПоля, "Имя");
	Если СтараяСвязьПоля = ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли; 
	Если СтараяСвязьПоля <> Неопределено Тогда
		СтараяСвязьПоля["_" + ВыбраннаяЧасть.Номер] = Неопределено;
		СтараяСвязьПоля["Определение" + ВыбраннаяЧасть.Номер] = Неопределено; // <Неопределено>
		УдалитьСтаруюСтроку = Истина;
		Для Каждого ЧастьОбъединения Из ЧастиОбъединения Цикл
			Если ЗначениеЗаполнено(СтараяСвязьПоля["_" + ЧастьОбъединения.Номер]) Тогда
				УдалитьСтаруюСтроку = Ложь;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		Если УдалитьСтаруюСтроку Тогда
			ПсевдонимыПолей.Удалить(СтараяСвязьПоля);
		КонецЕсли; 
	КонецЕсли; 
	Если ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	НовоеИмя = ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока.Имя;
	СтрокаДляОтвязки = ДоступныеПоляПсевдонима.Найти(НовоеИмя, "Имя");
	Если СтрокаДляОтвязки <> Неопределено Тогда
		СтрокаНовогоПсевдонима = ПсевдонимыПолей.Добавить();
		АвтоПсевдонимОтвязанногоПоля = ПолучитьАвтоПсевдонимПоля(СтрокаДляОтвязки, ВыбраннаяЧасть);
		АвтоПсевдонимОтвязанногоПоля = ирНеглобальный.ПолучитьАвтоУникальноеИмяВКоллекцииСтрокЛкс(ПсевдонимыПолей, АвтоПсевдонимОтвязанногоПоля);
		СтрокаНовогоПсевдонима.Имя = АвтоПсевдонимОтвязанногоПоля;
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПсевдонима, ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока, "_" + ВыбраннаяЧасть.Номер + "," + "Определение" + ВыбраннаяЧасть.Номер); 
		СтрокаДляОтвязки.Имя = АвтоПсевдонимОтвязанногоПоля;
		ВыбраннаяЧасть.ВыбранныеПоля.Найти(СтрокаДляОтвязки.ИД, "ИД").Имя = АвтоПсевдонимОтвязанногоПоля;
	КонецЕсли; 
	Если Элемент.ТекущаяСтрока.Определение <> "<Неопределено>" Тогда
		Элемент.ТекущаяСтрока.Имя = НовоеИмя; 
	КонецЕсли; 
	СтрокаВыбранногоПоля = ВыбраннаяЧасть.ВыбранныеПоля.Найти(Элемент.ТекущаяСтрока.ИД, "ИД");
	Если СтрокаВыбранногоПоля <> Неопределено Тогда
		СтрокаВыбранногоПоля.Имя = НовоеИмя;
	КонецЕсли; 
	ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока["_" + ВыбраннаяЧасть.Номер] = Элемент.ТекущаяСтрока.ИД;
	ОпределениеПоля = Элемент.ТекущаяСтрока.Определение;
	Если ОпределениеПоля = "<Неопределено>" Тогда
		ОпределениеПоля = "";
	КонецЕсли; 
	ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока["Определение" + ВыбраннаяЧасть.Номер] = ОпределениеПоля;
	
КонецПроцедуры

Процедура ПсевдонимыПолейПриАктивизацииСтроки(Элемент = Неопределено)
	
	Элемент = ЭлементыФормы.ПсевдонимыПолей;
	ВыбраннаяЧасть = ПолучитьТекущуюЧастьПсевдонима();
	Если ВыбраннаяЧасть = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаДоступногоПоля = ДоступныеПоляПсевдонима.Найти(Элемент.ТекущаяСтрока.Имя, "Имя");
	ИД = Элемент.ТекущаяСтрока["_" + ВыбраннаяЧасть.Номер];
	Если СтрокаДоступногоПоля <> Неопределено Тогда
		Если СтрокаДоступногоПоля.ИД = ИД Тогда
			ЭлементыФормы.ДоступныеПоляПсевдонима.ТекущаяСтрока = СтрокаДоступногоПоля;
		КонецЕсли; 
	ИначеЕсли Истина
		И Не ЗначениеЗаполнено(ИД)
		И ДоступныеПоляПсевдонима.Количество() > 0 
	Тогда
		ЭлементыФормы.ДоступныеПоляПсевдонима.ТекущаяСтрока = ДоступныеПоляПсевдонима[0];
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПсевдонимыПолейИмяПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ПсевдонимыПолей.ТекущаяСтрока;
	Для Каждого ЧастьОбъединения Из ЧастиОбъединения Цикл
		ИД = ТекущаяСтрока["_" + ЧастьОбъединения.Номер];
		Если ЗначениеЗаполнено(ИД) Тогда
			СтрокаВыбранногоПоля = ЧастьОбъединения.ВыбранныеПоля.Найти(ИД, "ИД");
			СтрокаВыбранногоПоля.Имя = Элемент.Значение;
			//Если ЧастьОбъединения = ЭлементыФормы.ЧастиОбъединения.ТекущаяСтрока Тогда
			//	СтрокаВыбранногоПоля = ВыбранныеПоля.Найти(ИД, "ИД");
			//	СтрокаВыбранногоПоля.Имя = Элемент.Значение;
			//КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоступныеПоляИндексаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтрокаПоля = ПоляИндекса.Найти(ВыбраннаяСтрока.Имя, "Определение");
	Если СтрокаПоля = Неопределено Тогда
		СтрокаПоля = ПоляИндекса.Добавить();
		СтрокаПоля.Определение = ВыбраннаяСтрока.Имя;
	КонецЕсли; 
	ЭлементыФормы.ПоляИндекса.ТекущаяСтрока = СтрокаПоля;
	
КонецПроцедуры

Процедура ПсевдонимыПолейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Для Каждого ЧастьОбъединения Из ЧастиОбъединения Цикл
		ИмяКолонки = "Определение" + ЧастьОбъединения.Номер;
		ВыбранноеПоле = ЧастьОбъединения.ВыбранныеПоля.Найти(ДанныеСтроки["_" + ЧастьОбъединения.Номер], "ИД");
		ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаЛкс(ВыбранноеПоле.ТипЗначения);
		ОформлениеСтроки.Ячейки[ИмяКолонки].ИндексКартинки = ИндексКартинки;
		ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоУсловияСвязиПриИзмененииФлажка(Элемент, Колонка)
	
	ПереключитьРежимПроизвольногоВыраженияОтбора(Элемент, Колонка);
	ЭлементыФормы.ПолеВыраженияЭлементаУсловияСвязи.УстановитьТекст(Элемент.ТекущаяСтрока.Представление);

КонецПроцедуры

////////////
// Отбор

Процедура ПереключитьРежимПроизвольногоВыраженияОтбора(ТабличноеПоле, Колонка)

	Если ТабличноеПоле.Колонки.Произвольное = Колонка Тогда
		ТекущееЗначениеФлажка = ТабличноеПоле.ТекущаяСтрока.Представление <> "";
		Если ТекущееЗначениеФлажка Тогда
			ТабличноеПоле.ТекущаяСтрока.Представление = "";
		Иначе
			ТабличноеПоле.ТекущаяСтрока.Представление = ирНеглобальный.ПолучитьВыражениеЭлементаОтбораЛкс(ТабличноеПоле.ТекущаяСтрока, ДиалектSQL);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПриВыводеСтрокиОтбора(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки <> Элемент.Значение Тогда
		ЭтоПроизвольноеУсловие = ДанныеСтроки.Представление <> "";
		ОформлениеСтроки.Ячейки.Произвольное.ОтображатьФлажок = Не ЭтоПроизвольноеУсловие И ТипЗнч(ДанныеСтроки) = Тип("ЭлементОтбораКомпоновкиДанных");
		ОформлениеСтроки.Ячейки.Произвольное.Флажок = ЭтоПроизвольноеУсловие;
	КонецЕсли; 

КонецПроцедуры

Процедура ПриОкончанииРедактированияСтрокиОтбора(Элемент, НоваяСтрока, ОтменаРедактирования);

	Если Не ОтменаРедактирования Тогда
		Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			СтароеПравоеЗначение = Элемент.ТекущаяСтрока.ПравоеЗначение;
			ирНеглобальный.ПолучитьВыражениеЭлементаОтбораЛкс(Элемент.ТекущаяСтрока, ДиалектSQL, Параметры);
			Если СтароеПравоеЗначение <> Элемент.ТекущаяСтрока.ПравоеЗначение Тогда
				ОбновитьИсточникДоступныхНастроекКомпоновки(); // Тут дерево доступных полей сбрасывает все развернутости. Возможно лучше отключить
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура КПДоступныеТаблицыОтборБезЗначенияВТекущейКолонке(Кнопка)
	
	ирНеглобальный.ТабличноеПоле_ОтборБезЗначенияВТекущейКолонке_КнопкаЛкс(ЭлементыФормы.ДоступныеТаблицы);

КонецПроцедуры

ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ВыбранныеПоля);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ПоляДоступнойТаблицы);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляИтогов);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляУсловия);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляПорядка);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеВыбранныеПоляПорядка);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляИтогов);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляИндекса);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляВыбора);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеПоляГруппировок);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ДоступныеВыбранныеПоляГруппировок);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ВыборЛевогоЗначенияЭлементаУсловияСвязи);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.ВыборПравогоЗначенияЭлементаУсловияСвязи);
ЭлементыФормы.ДоступныеПоляУсловия.Колонки.Заголовок.КартинкиСтрок = БиблиотекаКартинок.ирТипыДоступныхПолейКомпоновки;

//ЭлементыФормы.ВыбранныеПоля.Колонки.Определение.КартинкиСтрок = БиблиотекаКартинок.ирТипыДоступныхПолейКомпоновки;
//ЭлементыФормы.ПоляДоступнойТаблицы.Колонки.Имя.КартинкиСтрок = БиблиотекаКартинок.ирТипыДоступныхПолейКомпоновки;
ЭлементыФормы.ДоступныеТаблицы.ОтборСтрок.Имя.ВидСравнения = ВидСравнения.Содержит;
ЭлементыФормы.ДоступныеТаблицы.ОтборСтрок.Имя.Использование = Истина;
ПоляПорядка.Колонки.Добавить("Направление", Новый ОписаниеТипов("НаправлениеСортировки"));
СвязиТаблиц.Колонки.Добавить("Условие");
ВыбранныеТаблицы.Колонки.Добавить("ВложенныйПакет");
ВыбранныеТаблицы.Колонки.Добавить("Параметры");
ВыбранныеТаблицы.Колонки.Добавить("НИмя");
Параметры.Колонки.Добавить("Значение");
ВыбранныеПоля.Колонки.Добавить("ИД");
ВыбранныеПоля.Колонки.Добавить("НИмя");
ГруппируемыеПоляИтогов.Колонки.Добавить("НИмя"); // Возможно не нужно
ДоступныеПоляПсевдонима.Колонки.Добавить("ИД");
ЧастиОбъединения.Колонки.Добавить("Структура");
ЧастиОбъединения.Колонки.Добавить("ВыбранныеТаблицы");
ЧастиОбъединения.Колонки.Добавить("ВыбранныеПоля");
ЧастиОбъединения.Колонки.Добавить("СвязиТаблиц");
ЧастиОбъединения.Колонки.Добавить("Группировки");
ЧастиОбъединения.Колонки.Добавить("Отбор");
ЧастиОбъединения.Колонки.Добавить("ОпцияРазличные", Новый ОписаниеТипов("Булево"));
ЗапросыПакета.Колонки.Добавить("ИД", Новый ОписаниеТипов("УникальныйИдентификатор"));
ЗапросыПакета.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
ЗапросыПакета.Колонки.Добавить("ЧастиОбъединения");
ЗапросыПакета.Колонки.Добавить("ПсевдонимыПолей");
ЗапросыПакета.Колонки.Добавить("ГруппирующиеПоляИтогов");
ЗапросыПакета.Колонки.Добавить("ГруппируемыеПоляИтогов");
ЗапросыПакета.Колонки.Добавить("ОбщиеИтоги");
ЗапросыПакета.Колонки.Добавить("ПоляПорядка");
ЗапросыПакета.Колонки.Добавить("ПоляИндекса");
ЗапросыПакета.Колонки.Добавить("ОпцияАвтоупорядочивание", Новый ОписаниеТипов("Булево"));
ЗапросыПакета.Колонки.Добавить("ОпцияОбщиеИтоги", Новый ОписаниеТипов("Булево"));
ЗапросыПакета.Колонки.Добавить("ОпцияПервые", Новый ОписаниеТипов("Булево"));
ЗапросыПакета.Колонки.Добавить("ОпцияРазрешенные", Новый ОписаниеТипов("Булево"));
ЗапросыПакета.Колонки.Добавить("ТипЗапроса", Новый ОписаниеТипов("Число"));
ЗапросыПакета.Колонки.Добавить("ПервыеКоличество", Новый ОписаниеТипов("Число"));
ЗапросыПакета.Колонки.Добавить("ИмяВременнойТаблицы", Новый ОписаниеТипов("Строка"));
ЭлементыФормы.ПоляПорядка.Колонки.Направление.Данные = "Направление";
ЭтаФорма.ПервыеКоличество = 1;
мРежимРедактированияТекста = Ложь;
ЭтаФорма.Английский1С = Истина;

СписокВыбораДиалектов = ЭлементыФормы.ДиалектSQL.СписокВыбора;
СписокВыбораДиалектов.Добавить("1С");
СписокВыбораДиалектов.Добавить("WQL");
СписокВыбораДиалектов.Добавить("Oracle");
СписокВыбораДиалектов.Добавить("MS SQL");
СписокВыбораДиалектов.Добавить("Microsoft Visual FoxPro");
СписокВыбораДиалектов.Добавить("MS Jet");
