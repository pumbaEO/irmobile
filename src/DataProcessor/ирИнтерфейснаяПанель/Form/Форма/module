//* Copyright (c) 2007-2008, Анатолий Бурнашев, Антон Гаврилов 
//*
//* Разрешается повторное распространение и использование как в виде исходника так и в
//* двоичной форме, с изменениями или без, при соблюдении следующих условий:
//*
//* При повторном распространении исходного кода должно оставаться указанное выше
//* уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
//* При повторном распространении двоичного кода должно сохраняться указанная выше
//* информация об авторском праве, этот список условий и последующий отказ от гарантий в
//* документации и/или в других материалах, поставляемых при распространении. 
//*
//* ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА БЕСПЛАТНО ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ
//* "КАК ОНА ЕСТЬ" БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ,
//* ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И
//* ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ, ЕСЛИ НЕ ТРЕБУЕТСЯ СООТВЕТСТВУЮЩИМ
//* ЗАКОНОМ, ИЛИ НЕ УСТАНОВЛЕНО В УСТНОЙ ФОРМЕ, НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО
//* ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО
//* СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ,
//* СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, В СЛЕДСТВИИ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ
//* ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ,
//* СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ
//* ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ
//* ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.



Перем ПредыдущаяСтрока; // Нужна для обработки ожидания при генерации контекстного меню

Перем КоличествоСтатическихКнопокКоманднойПанели;
// +++.ДОБАВЛЕНИЕ.12/04/21-12:17:42.<2iS>.СтарыхСА
Перем мСписокВыбораПодсистем;
// ---.ДОБАВЛЕНИЕ.12/04/21-12:17:42.<2iS>.СтарыхСА


///////////////////////////////////////////////////////////////////////////////
// ~~~~ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ~~~~
///////////////////////////////////////////////////////////////////////////////


// Открывает заданный отчет с заданной настройкой
//
// Параметры
//  ИмяОтчета
//  ИмяНастройки
//
// Возвращаемое значение:
//   Форма отчета, готовая к выполнению
//
Функция ОткрытьНастройкуОтчета(ИмяОтчета, ИмяНастройки)
	Отчет = Отчеты[ИмяОтчета].Создать();
	Объект = ?(ИмяОтчета = "УниверсальныйОтчет", Отчет, Отчет.УниверсальныйОтчет);
	ФормаОтчета = Отчет.ПолучитьФорму();
	
	глТекущийПользователь = (Вычислить("глЗначениеПеременной(""глТекущийПользователь""))"));
	Если НЕ ЗначениеЗаполнено(глТекущийПользователь) Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНач) Тогда
		
		Объект.ДатаНач = Вычислить("УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной(""глТекущийПользователь""), ""ОсновнаяДатаНачалаОтчетов"")");
		
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глТекущийПользователь);
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект."+ИмяОтчета);
	СтруктураНастройки.Вставить("НаименованиеНастройки", ИмяНастройки);
	
	Если Вычислить("УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки)")=Истина Тогда
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		Отчет.ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
		Объект.ВосстановитьПараметрыПечати(Объект, Отчет, ФормаОтчета, СтруктураНастройки.СохраненнаяНастройка);
		
	КонецЕсли;
	
	Объект.ВосстановитьДополнительныеНастройки(Объект, Отчет, ИмяОтчета);
	
	
	//Объект.ВосстановитьНастройки(Объект, Отчет, ФормаОтчета, ИмяОтчета);
	Объект.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	Возврат ФормаОтчета;
КонецФункции // ОткрытьНастройкуОтчета()

// Открывает консоль отчетов (из конфигурации или из макета) и открывает переданную настройку
//
// Параметры
//  ИмяФайлаНастроек - полное имя файла с настройками
//
// Возвращаемое значение:
//   Форма консоли отчетов
//
Функция ОткрытьНастройкуКонсолиОтчетовИлиЗапросов(ИмяФайлаНастроек)
	Расширение = ВРЕГ(Прав(ИмяФайлаНастроек,3));
	Если Расширение = "RCF" Тогда
		ИмяОбъекта = "КонсольОтчетов";
		ИмяОбъекта1 = "ирКонсольПостроителейОтчетов";
	ИначеЕсли Расширение = "SEL" Тогда
		ИмяОбъекта = "КонсольЗапросов";
		ИмяОбъекта1 = "ирКонсольЗапросов";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
		Форма = Обработки[ИмяОбъекта].ПолучитьФорму();
	ИначеЕсли Метаданные.Обработки.Найти(ИмяОбъекта1) <> Неопределено Тогда
		Форма = Обработки[ИмяОбъекта1].ПолучитьФорму();
	Иначе		
		// - АВВ [08.08.2012] {
		#Если НеМобильныйБлок Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьМакет(ИмяОбъекта);
			ДвоичныеДанные.Записать(ИмяФайла);
			Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
			Если Форма = Неопределено Тогда
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
		Исключение
			Предупреждение("Не удалось создать обработку для открытия данной настройки");
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки 
		#КонецЕсли
		// - АВВ [08.08.2012] }
		// + АВВ [30.06.2012] 
		Форма = ирМобильные.ПодключитьВнешнююОбработку(ИмяОбъекта).ПолучитьФорму();
	КонецЕсли;
	Если СтрДлина(ИмяФайлаНастроек)>4 Тогда
		Файл = Новый Файл(ИмяФайлаНастроек);
		Если Файл.Существует() Тогда
			СохранитьЗначение(ИмяОбъекта+"_ИмяФайла", ИмяФайлаНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Форма;
КонецФункции // ОткрытьНастройкуКонсолиОтчетов()

// Возвращает форму обработки, из элемента справочника внешних обработок, найденного по переданному коду
//
// Параметры
//  Код
// Возвращаемое значение:
//   Форма обработки, содержащейся в указанном элементе справочника
//
Функция ОткрытьОбработкуИзСправочникаВнешнихОбработок(Код)
	ВыбраннаяОбработка=Справочники.ВнешниеОбработки.НайтиПоКоду(Код);
	ИмяФайла=ПолучитьИмяВременногоФайла();
	ДвоичныеДанные=ВыбраннаяОбработка.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Форма=ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
	Если ТипЗнч(Форма)<>Тип("Форма") Тогда
		Форма=ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
	КонецЕсли;
	УдалитьФайлы(ИмяФайла);
	Возврат Форма;
КонецФункции // ОткрытьОбработкуИзСправочникаВнешнихОбработок()

// Добавляет кнопку действия на командную панель
//
// Параметры
// КП - кнопки командной панели
// Имя - имя кнопки
// Синоним - синоним объекта. текст кнопки
// Команда - команда, выполняемая кнопкой. Хранится в тексте подсказки
// Действие - обработчик кнопки. Для простоты будет один. Команда выполняется по содержимому подсказки
//
Процедура ДобавитьКнопку(КП, Имя, Синоним = "", Команда, Действие, Картинка = Неопределено)
	Кнопка = КП.Добавить(Имя, ТипКнопкиКоманднойПанели.Действие, ?(Синоним="",Имя,Синоним), Действие);
	Кнопка.Подсказка = Команда;
	Если Картинка <> Неопределено Тогда
		Кнопка.Картинка = Картинка;
	КонецЕсли; 
	
	Если КП.Количество()=КоличествоСтатическихКнопокКоманднойПанели+1 Тогда
		Кнопка.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
КонецПроцедуры // ДобавитьКнопку()

// В зависимости от выбранного объекта, генерирует команды контекстного меню
Процедура СгенерироватьКомандыКонтекстногоМеню()
	ТекущаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если ТекущаяСтрока = ПредыдущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	ПредыдущаяСтрока = ТекущаяСтрока; 
		
	УдалитьКонтекстныеКнопкиКоманднойПанели();
	КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
	
	Если ТекущаяСтрока.Вид = "" ИЛИ ТекущаяСтрока.Имя = "" Тогда
		Возврат;	
	КонецЕсли;
		
	ВидОбъекта = ТекущаяСтрока.Вид;
	ИмяОбъекта = ТекущаяСтрока.Имя;
	ДействиеОткрытиеФормы = Новый Действие("ОткрытиеФормы");
	Если ВидОбъекта = "ОбщиеФормы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Форма"));
	ИначеЕсли ВидОбъекта = "Интерфейсы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Переключить", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ИнвертироватьФлажки"));
	ИначеЕсли ВидОбъекта = "Внешние обработки" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Обработка"));
	ИначеЕсли ВерсияПлатфомы >= "8.1" И ВидОбъекта = "Внешние отчеты" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Отчет"));
	ИначеЕсли ВидОбъекта = "Табличные документы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ТабличныйДокумент"));
	ИначеЕсли ВидОбъекта = "Текстовые документы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("РедактироватьДокумент"));
	ИначеЕсли Найти(ВидОбъекта, "Настройки консоли") > 0 Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("СформироватьОтчет"));
	ИначеЕсли Истина
		И ЕстьУниверсальныйОтчет 
		И Есть_РС_СохраненныеНастройки 
		И Лев(ТекущаяСтрока.Вид,11) = "ОтчетОбъект" 
		И Метаданные.Отчеты.Найти(Сред(ТекущаяСтрока.Вид, Найти(ТекущаяСтрока.Вид, ".")+1)) <> Неопределено
	Тогда
		// Восстановление сохраненной настройки
		ДобавитьКнопку(КнопкиКоманднойПанели, "УниверсальныйОтчетПоРегиструНакопления", "Открыть", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Отчет"));
	ИначеЕсли ЕстьСправочникВнешнихОбработок И ВидОбъекта = "СправочникВнешниеОбработки" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", "Открыть", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Обработка"));
		ДобавитьКнопку(КнопкиКоманднойПанели, "НайтиВСправочникеВнешнихОбработок", "Найти в справочнике внешних обработок", , ДействиеОткрытиеФормы,
			ирПолучитьКартинкуЕслиЕсть("Поиск"));
	ИначеЕсли ЭтоУникальныйИдентификатор(ИмяОбъекта) Тогда	
		// Полнотекстовый поиск
		СсылкаОбъекта = ПолучитьСсылкуПоУИД(ВидОбъекта, ИмяОбъекта);
		Если СсылкаОбъекта <> Неопределено Тогда
			// В первую очередь нужны исследователь объектов  и редактор реквизитов - у них нет ограничений на открытие формы и тп
			ДобавитьКнопку(КнопкиКоманднойПанели, "ирРедакторОбъектаБД", "Редактор объекта БД", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("ирРедактироватьОбъектБД"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "ирИсследоватьОбъект", "Исследовать объект", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("ирИсследовать"));
			МДФормы = СсылкаОбъекта.Метаданные().Формы;
			Для каждого МДФорма Из МДФормы Цикл
				Попытка
					ДобавитьКнопку(КнопкиКоманднойПанели, МДФорма.Имя, МДФорма.Синоним, , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Форма"));
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
			
			// +++.ДОБАВЛЕНИЕ.12/04/21-10:34:31.<2iS>.СтарыхСА
			//// На страх и риск пользователя добавим кнопку интерактивного удаления
			//ДобавитьКнопку(КнопкиКоманднойПанели, "НепосредственноеУдаление", "Непосредственное удаление",
			//	"ирНепосредственноеУдаление( ПолучитьСсылкуПоУИД("""+ВидОбъекта+""","""+ИмяОбъекта+"""))", ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("УдалитьНепосредственно"));
			// ---.ДОБАВЛЕНИЕ.12/04/21-10:34:31.<2iS>.СтарыхСА
		КонецЕсли;
	ИначеЕсли ВидОбъекта = "Константы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "РедакторКонстант", "Редактор констант", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Константа"));
	ИначеЕсли ЗначениеЗаполнено(ВидОбъекта) И ЗначениеЗаполнено(ИмяОбъекта) Тогда
		// Объект ИБ или метаданные
		
		// +++.ДОБАВЛЕНИЕ.12/04/21-21:46:46.<2iS>.СтарыхСА
		//// В первую очередь нужен универсальный список - у него нет ограничений на открытие формы и тп
		//ДобавитьКнопку(КнопкиКоманднойПанели, "ирУниверсальныйСписок", "Универсальный список",
		//		"ирУниверсальныйСписок( """ + ВидОбъекта + """, """ + ИмяОбъекта + """)", ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирСписокЗначений"));
		// ---.ДОБАВЛЕНИЕ.12/04/21-21:46:46.<2iS>.СтарыхСА
		 
		Если ЕстьУниверсальныйОтчет И ВидОбъекта = "РегистрыНакопления" Тогда
			ДобавитьКнопку(КнопкиКоманднойПанели, "УниверсальныйОтчетПоРегиструНакопления", "Универсальный отчет", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("Отчет"));
		КонецЕсли;
		
		МД = ?(Найти(ВидОбъекта,".")>0, Метаданные.НайтиПоПолномуИмени(ВидОбъекта), Метаданные[ВидОбъекта]);
		МДОбъект = МД[ИмяОбъекта];
		МДФормы = МДОбъект.Формы;
		Если стНастройки.ПриАвтозапускеОткрыватьФормуСписка Тогда
			Попытка
				ИмяФормы = ?(МДОбъект.ОсновнаяФормаСписка=Неопределено, "ФормаСписка", МДОбъект.ОсновнаяФормаСписка.Имя);
				ДобавитьКнопку(КнопкиКоманднойПанели, ИмяФормы, "Форма списка", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирСписок"));
			Исключение
			КонецПопытки;
		КонецЕсли;
		Для каждого МДФорма Из МДФормы Цикл
			Попытка
				ОсновнаяФормаСписка = МДОбъект.ОсновнаяФормаСписка;
			Исключение
				ОсновнаяФормаСписка = Неопределено;
			КонецПопытки;
			Если стНастройки.ПриАвтозапускеОткрыватьФормуСписка И МДФорма = ОсновнаяФормаСписка Тогда
				// Повторно добавлять не нужно
				Продолжить;
			КонецЕсли;
			// +++.ДОБАВЛЕНИЕ.12/04/21-22:23:36.<2iS>.СтарыхСА
			Суффикс = "";
			Попытка
				ЭтоОсновнаяФорма = МДОбъект.ОсновнаяФорма = МДФорма;
			Исключение
				ЭтоОсновнаяФорма = Ложь;
			КонецПопытки;
			Если ЭтоОсновнаяФорма Тогда
				Суффикс = " (основная)";
			КонецЕсли; 
			Попытка
				ЭтоОсновнаяФормаСписка = МДОбъект.ОсновнаяФормаСписка = МДФорма;
			Исключение
				ЭтоОсновнаяФормаСписка = Ложь;
			КонецПопытки; 
			Если ЭтоОсновнаяФормаСписка Тогда
				Суффикс = " (основная списка)";
			КонецЕсли; 
			Попытка
				ДобавитьКнопку(КнопкиКоманднойПанели, МДФорма.Имя, МДФорма.Синоним + Суффикс, , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("Форма"));
			Исключение
				Возврат;
			КонецПопытки;
			// ---.ДОБАВЛЕНИЕ.12/04/21-22:23:36.<2iS>.СтарыхСА
		КонецЦикла;
		
		КорневойТип = ирГлобальный.ЛксПолучитьКорневойТипКонфигурации(МДОбъект);
		Если ирГлобальный.ЛксЛиКорневойТипТаблицыБД(КорневойТип) Тогда
			ДобавитьКнопку(КнопкиКоманднойПанели, "ДинамическийСписок", "Динамический список", , ДействиеОткрытиеФормы, 
				ирПолучитьКартинкуЕслиЕсть("ирСписокЗначений"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "КонсольЗапросов", "Консоль запросов", , ДействиеОткрытиеФормы, 
				ирПолучитьКартинкуЕслиЕсть("ирКонсольЗапросов"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "КонсольКомпоновки", "Консоль компоновки", , ДействиеОткрытиеФормы, 
				ирПолучитьКартинкуЕслиЕсть("ирКонсольКомпоновок"));
			ДобавитьКнопку(КнопкиКоманднойПанели, "ПодборИОбработкаОбъектов", "Подбор и обработка объектов", , ДействиеОткрытиеФормы,
				ирПолучитьКартинкуЕслиЕсть("ирОбработкаОбъектов"));
		КонецЕсли; 
		ДобавитьКнопку(КнопкиКоманднойПанели, "ЖурналРегистрации", "Журнал регистрации", , ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирЖурнал"));
		// + Анатолий Ясень [20.11.12] (Фильтрация дерева подсистем по указанному объекту) {
		ДобавитьКнопку(КнопкиКоманднойПанели, "Подсистемы", "Подсистемы объекта", 	
			,Новый Действие("ФильтрПодсистем_НачалоВыбора"), ЭлементыФормы.ПолеКартинкиПодсистемы.Картинка);
		// + Анатолий Ясень [20.11.12]}
	КонецЕсли;
	
КонецПроцедуры // СгенерироватьКомандыКонтекстногоМеню()

Процедура УдалитьКонтекстныеКнопкиКоманднойПанели()

	// Очистить динамические кнопки командной панели
	КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
	КоличествоКнопок = КнопкиКоманднойПанели.Количество();
	Для Сч = 1 По КоличествоКнопок - КоличествоСтатическихКнопокКоманднойПанели Цикл
		КнопкиКоманднойПанели.Удалить(КоличествоКнопок - Сч);
	КонецЦикла;

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ~~~~ ОБЩИЕ СОБЫТИЯ ФОРМЫ ~~~~
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если стНастройки.Свойство("флИскатьОтладочнуюВерсию") и стНастройки.флИскатьОтладочнуюВерсию Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Переоткрыть(Истина);
	Иначе
		стНастройки.Вставить("флИскатьОтладочнуюВерсию", Ложь);
	КонецЕсли;
	ЗаполнитьДеревоПодсистем();
	ЗаполнитьДеревоВсехОбъектов();
	
КонецПроцедуры // ПередОткрытием

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Отказ = Истина;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
Процедура ПриОткрытии()
	
	спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
	Для каждого Фильтр из стНастройки.ИсторияФильтраИмен цикл
		спФильтр.Добавить(Фильтр);
	КонецЦикла;
	
	ФильтрИмен = стНастройки.ФильтрИмен;
	
	// +++.ДОБАВЛЕНИЕ.12/06/04-16:23:43.<2iS>.СтарыхСА
	//ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	ПриИзмененииФильтраИмен();
	// ---.ДОБАВЛЕНИЕ.12/06/04-16:23:43.<2iS>.СтарыхСА

	// ВосстановитьРазвернутыеВетви(стНастройки.РазвернутыеСтроки);

	////ВосстановитьВыбраннуюСтроку(стНастройки.ВыбраннаяСтрока);
	
	//ПодключитьОбработчикОжидания("ОчисткаСтрокиФильтра",60);
	
	Автозапуск();

КонецПроцедуры // ПриОткрытии

///////////////////////////////////////////////////////////////////////////////
Процедура ПриЗакрытии()

	СохранитьНастройки(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии

// Вызывается регулярно для очистки фильра
//
//
Процедура ОчисткаСтрокиФильтра()
	
	ФильтрИмен = "";
	ФильтрИмен_ПриИзменении();
	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	// +++.ДОБАВЛЕНИЕ.12/04/21-21:05:04.<2iS>.СтарыхСА
	//ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = ДеревоИнтерфейса.Строки[0];
	// ---.ДОБАВЛЕНИЕ.12/04/21-21:05:04.<2iS>.СтарыхСА
	 
КонецПроцедуры // ОчисткаСтрокиФильтра()

Процедура КоманднаяПанельПроверитьВерсию(Кнопка)
	
	Сообщить("Запрос номеров версий...", СтатусСообщения.Информация);
	
	Попытка
		IE = Новый COMОбъект("InternetExplorer.Application");
	Исключение
	    Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	IE.Visible = 0;
	IE.Silent = -1;
	IE.Navigate("http://www.infostart.ru/public/15324/blog/");
	ПроверитьВерсию(IE);
	
КонецПроцедуры // КоманднаяПанельПроверитьВерсию()

Процедура ПроверитьВерсию(IE=Неопределено)
	
	Если IE = Неопределено Тогда
		IE = Новый COMОбъект("InternetExplorer.Application");
	КонецЕсли;
	Если IE.readyState < 4 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВерсию", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Описание = IE.Document.title;
	IE.Quit();
	IE = Неопределено;
	
	Описание = Сред(Описание, Найти(Описание, "(") + 1);
	Описание = Лев(Описание, Найти(Описание, ")") - 1);
	Сообщить("Текущая версия:   " + Метаданные().Комментарий);
	Сообщить("Последняя версия: " + Описание);
	
КонецПроцедуры // КоманднаяПанельПроверитьВерсию()


///////////////////////////////////////////////////////////////////////////////
// ~~~~ СОБЫТИЯ ФИЛЬТРА ПОДСИСТЕМ ~~~~
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
Процедура ПриИзмененииФильтраПодсистем()

	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	
КонецПроцедуры // ПриИзмененииФильтраПодсистем

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрПодсистем_НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// +++.ДОБАВЛЕНИЕ.12/04/21-12:28:21.<2iS>.СтарыхСА
	// - АВВ [08.08.2012] {
	#Если НеМобильныйБлок Тогда
	Если Метаданные.Обработки.Найти("ирПлатформа") <> Неопределено Тогда
		ФормаВыбора = ирНеглобальный.ПолучитьФормуЛкс("Обработка.ирПлатформа.Форма.ВыборПодсистемы", , Элемент);
		ФормаВыбора.РежимВыбора = Истина;
		// + Анатолий Ясень [20.11.12] (Фильтрация дерева подсистем по указанному объекту) {
		ЭтоФильтрПодсистемВыбранногоОбъекта = (ТипЗнч(Элемент) = Тип("КнопкаКоманднойПанели"));
		ТекущаяСтрокаОбъекта = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
		Если ЭтоФильтрПодсистемВыбранногоОбъекта и ЗначениеЗаполнено(ТекущаяСтрокаОбъекта) и ТипЗнч(ТекущаяСтрокаОбъекта) = Тип("СтрокаДереваЗначений") Тогда
			ФормаВыбора.МДОбъект = Метаданные[ТекущаяСтрокаОбъекта.Вид][ТекущаяСтрокаОбъекта.Имя];	
		КонецЕсли;
		// + Анатолий Ясень [20.11.12]}
		ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
	Иначе
		НачальнаяСтрока = дзВсеПодсистемы.Строки.Найти(Элемент.Значение, "ПолноеИмя", Истина);
		ВыбранноеЗначение = дзВсеПодсистемы.ВыбратьСтроку("Выберите подсистему", НачальнаяСтрока);
	КонецЕсли; 
	#КонецЕсли
	// - АВВ [08.08.2012] }
	
	// + АВВ [01.07.2012]{ 
	ФормаВыбора = ирКЭШ.Получить().ПолучитьФорму("ВыборПодсистемы", Элемент);
	ФормаВыбора.РежимВыбора = Истина;
	ЭтоФильтрПодсистемВыбранногоОбъекта = (ТипЗнч(Элемент) = Тип("КнопкаКоманднойПанели"));
	ТекущаяСтрокаОбъекта = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если ЭтоФильтрПодсистемВыбранногоОбъекта и ЗначениеЗаполнено(ТекущаяСтрокаОбъекта) и ТипЗнч(ТекущаяСтрокаОбъекта) = Тип("СтрокаДереваЗначений") Тогда
		ФормаВыбора.МДОбъект = Метаданные[ТекущаяСтрокаОбъекта.Вид][ТекущаяСтрокаОбъекта.Имя];	
	КонецЕсли;
	ВыбранноеЗначение = ФормаВыбора.ОткрытьМодально();
	// + АВВ [01.07.2012]}
		
	Если ВыбранноеЗначение <> Неопределено тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
			ЭлементыФормы.ФильтрПодсистем.Значение = ВыбранноеЗначение;
		Иначе
			ЭлементыФормы.ФильтрПодсистем.Значение = ВыбранноеЗначение.ПолноеИмя;
		КонецЕсли; 
		// + Анатолий Ясень [20.11.12] (Фильтрация дерева подсистем по указанному объекту. При вызове из контекстного меню, переопределяемый элемент форма ФильтрПодсистем следует установить напрямую) {
		ФильтрПодсистем_ПриИзменении(?(ЭтоФильтрПодсистемВыбранногоОбъекта, ЭлементыФормы.ФильтрПодсистем, Элемент));
		// + Анатолий Ясень [20.11.12]}
	КонецЕсли;
	// ---.ДОБАВЛЕНИЕ.12/04/21-12:28:21.<2iS>.СтарыхСА
	
КонецПроцедуры // ФильтрПодсистем_НачалоВыбораИзСписка

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрПодсистем_Очистка(Элемент, СтандартнаяОбработка)

	ФильтрПодсистем_ПриИзменении(Элемент);
	
КонецПроцедуры // ФильтрПодсистем_Очистка

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрПодсистем_ПриИзменении(Элемент)

	Если мСписокВыбораПодсистем.НайтиПоЗначению(ФильтрПодсистем) = Неопределено Тогда
		ФильтрПодсистем = "";
	КонецЕсли; 
	ПриИзмененииФильтраПодсистем();
	// +++.ДОБАВЛЕНИЕ.12/04/21-10:35:06.<2iS>.СтарыхСА
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	// ---.ДОБАВЛЕНИЕ.12/04/21-10:35:06.<2iS>.СтарыхСА
	
КонецПроцедуры // ФильтрПодсистем_ПриИзменении

///////////////////////////////////////////////////////////////////////////////
Процедура ДобавитьПодсистему(СтрокиДереваПодсистем, Подсистема, спПодсистемы)

	стрПодсистема = СтрокиДереваПодсистем.Добавить();
	// +++.ДОБАВЛЕНИЕ.12/04/21-12:42:00.<2iS>.СтарыхСА
	ПолноеИмяПодсистемы = СтрЗаменить(Подсистема.ПолноеИмя(), "Подсистема.", "");
	//МаркерКонфигурации = "Конфигурация.";
	//Если Найти(ПолноеИмяПодсистемы, МаркерКонфигурации) = 1 Тогда
	//	ИмяПодсистемы = Сред(ПолноеИмяПодсистемы, СтрДлина(МаркерКонфигурации) + 1);
	//КонецЕсли;
	стрПодсистема.ПолноеИмя = ПолноеИмяПодсистемы;
	// ---.ДОБАВЛЕНИЕ.12/04/21-12:42:00.<2iS>.СтарыхСА
	стрПодсистема.Имя 			= Подсистема.Имя;
	стрПодсистема.Представление = ?(ПустаяСтрока(Подсистема.Синоним), Подсистема.Имя, Подсистема.Синоним);
	стрПодсистема.МД			= Подсистема;
	
	спПодсистемы.Добавить(стрПодсистема.ПолноеИмя, стрПодсистема.Представление);
	
	Для каждого п из Подсистема.Подсистемы цикл
		ДобавитьПодсистему(стрПодсистема.Строки, п, спПодсистемы);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьПодсистему

///////////////////////////////////////////////////////////////////////////////
Процедура ЗаполнитьДеревоПодсистем() Экспорт
	
	дзВсеПодсистемы = Новый ДеревоЗначений;
	дзВсеПодсистемы.Колонки.Добавить("Имя");
	дзВсеПодсистемы.Колонки.Добавить("Представление");
	// +++.ДОБАВЛЕНИЕ.12/04/21-12:48:52.<2iS>.СтарыхСА
	дзВсеПодсистемы.Колонки.Добавить("ПолноеИмя");
	// ---.ДОБАВЛЕНИЕ.12/04/21-12:48:52.<2iS>.СтарыхСА
	дзВсеПодсистемы.Колонки.Добавить("МД");
	
	спПодсистемы = Новый СписокЗначений;
	ДобавитьПодсистему(дзВсеПодсистемы.Строки, Метаданные, спПодсистемы);
	
	мСписокВыбораПодсистем = спПодсистемы;
	
КонецПроцедуры // ЗаполнитьДеревоПодсистем

///////////////////////////////////////////////////////////////////////////////
// ~~~~ СОБЫТИЯ ФИЛЬТРА ИМЕН ~~~~
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
Процедура ПриИзмененииФильтраИмен(Знач ТекущийФильтрИмен = Неопределено)
	
	// +++.ДОБАВЛЕНИЕ.12/04/21-17:48:09.<2iS>.СтарыхСА
	Если ТекущийФильтрИмен <> Неопределено Тогда
		мВременныйФильтрИмен = ТекущийФильтрИмен;
	Иначе
		мВременныйФильтрИмен = ФильтрИмен;
	КонецЕсли;
	Если ТекущийФильтрИмен = Неопределено тогда
		мВременныйФильтрИмен = СокрЛП(мВременныйФильтрИмен);
		спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
		спФильтр.Вставить(0, мВременныйФильтрИмен);
		// Удалим записи, аналогичные текущему значению фильтра
		ПоискФильтра = НРег(ФильтрИмен);
		н = спФильтр.Количество() - 1;
		Пока н > 0 цикл
			Если НРег(спФильтр[н].Значение) = ПоискФильтра тогда
				спФильтр.Удалить(н);
			КонецЕсли;
			н = н - 1;
		КонецЦикла;
		
		// Удалим старые записи из истории, если история > ИсторияКоманд записей
		Если спФильтр.Количество() > стНастройки.ИсторияКоманд тогда
			н = спФильтр.Количество() - 1;
			Пока н >= стНастройки.ИсторияКоманд цикл
				спФильтр.Удалить(н);
				н = н - 1;
			КонецЦикла;
		КонецЕсли;
		ОбновитьФильтрУмногоПоиска(Истина);
	КонецЕсли;
	// ---.ДОБАВЛЕНИЕ.12/04/21-17:48:09.<2iS>.СтарыхСА

	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	
	//Если НЕ ПустаяСтрока(ФильтрИмен) тогда
	//	Для каждого СтрокаДерева из ДеревоИнтерфейса.Строки цикл
	//		//ЭлементыФормы.ДеревоИнтерфейса.Развернуть(СтрокаДерева, Истина);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФильтраИмен

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрИмен_ПриИзменении(Элемент="")

	ПриИзмененииФильтраИмен();
	
КонецПроцедуры // ФильтрИмен_ПриИзменении

Процедура ФильтрИменОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПриИзмененииФильтраИмен();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//Процедура ФильтрИмен_Очистка(Элемент, СтандартнаяОбработка)

//	ПриИзмененииФильтраИмен();
//	
//КонецПроцедуры // ФильтрИмен_Очистка

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрИмен_АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	// +++.ДОБАВЛЕНИЕ.12/04/21-11:00:55.<2iS>.СтарыхСА
	//ПоискФильтра = СокрЛП(Нрег(Текст));
	ПриИзмененииФильтраИмен(Текст); // Автоприменение фильтра
	//ПоискФильтра = СокрЛ(Нрег(Текст));
	//ДлинаФильтра = СтрДлина(ПоискФильтра);
	//спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
	//Для каждого зн из спФильтр цикл
	//	Если НРег(Лев(зн.Значение, ДлинаФильтра)) = ПоискФильтра тогда
	//		ТекстАвтоПодбора = Текст + Сред(зн.Значение, ДлинаФильтра + 1);
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	// ---.ДОБАВЛЕНИЕ.12/04/21-11:00:55.<2iS>.СтарыхСА
	
	
КонецПроцедуры // ФильтрИмен_АвтоПодборТекста

///////////////////////////////////////////////////////////////////////////////
// ~~~~ СОБЫТИЯ ДЕРЕВА ИНТЕРФЕЙСА ~~~~
///////////////////////////////////////////////////////////////////////////////

// Предлагает выбор формы и открывает ее для текущей строки дерева
//
// Параметры
//  Команда - строка команды. Если указана, то выбор формы не предлагается, а сразу открывается форма по умолчанию
//
Процедура ОткрытиеФормы(Команда = "")
	
	НоваяФорма = Неопределено;
	Если ТипЗнч(Команда) = Тип("КнопкаКоманднойПанели") Тогда
		Кнопка = Команда;
		ТекущаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
		ВидОбъекта = ТекущаяСтрока.Вид;
		ИмяОбъекта = ТекущаяСтрока.Имя;
		Попытка
			Если ВидОбъекта = "ОбщиеФормы" Тогда
				НоваяФорма = ПолучитьОбщуюФорму(ИмяОбъекта);
			ИначеЕсли ВидОбъекта = "Интерфейсы" Тогда
				ГлавныйИнтерфейс.ПереключитьИнтерфейс(ИмяОбъекта);
			ИначеЕсли ВидОбъекта = "Внешние обработки" Тогда
				лОбработка = ВнешниеОбработки.Создать(ИмяОбъекта);
				Если лОбработка.Метаданные().ОсновнаяФорма = Неопределено Тогда
					ВызватьИсключение "У внешней обработки не назначена основная форма";
				КонецЕсли; 
				НоваяФорма = лОбработка.ПолучитьФорму();
			ИначеЕсли ВерсияПлатфомы >= "8.1" И ВидОбъекта = "Внешние отчеты" Тогда
				НоваяФорма = ВнешниеОтчеты.Создать(ИмяОбъекта).ПолучитьФорму();
			ИначеЕсли ВидОбъекта = "Табличные документы" Тогда
				НоваяФорма = ПолучитьФорму("ФормаПросмотра"); 
				НоваяФорма.ЭлементыФормы.ТабДок.Прочитать(ИмяОбъекта); 
				НоваяФорма.ЭлементыФормы.ТабДок.Видимость = Истина;
				НоваяФорма.Заголовок = ИмяОбъекта;
			ИначеЕсли ВидОбъекта = "Текстовые документы" Тогда
				//НоваяФорма = ПолучитьФорму("ФормаПросмотра"); 
				//НоваяФорма.ЭлементыФормы.ТекстДок.Прочитать(ИмяОбъекта);
				//НоваяФорма.ЭлементыФормы.ТекстДок.Видимость = Истина;
				//НоваяФорма.Заголовок = ИмяОбъекта;
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(ИмяОбъекта);
				ирНеглобальный.ОткрытьТекстЛкс(ТекстовыйДокумент.ПолучитьТекст(), ИмяОбъекта, "Обычный", Истина);
			ИначеЕсли Найти(ВидОбъекта, "Настройки консоли") > 0 Тогда
				НоваяФорма = ОткрытьНастройкуКонсолиОтчетовИлиЗапросов(ИмяОбъекта);
			ИначеЕсли Истина
				И ЕстьУниверсальныйОтчет 
				И Есть_РС_СохраненныеНастройки
				И Лев(ТекущаяСтрока.Вид,11) = "ОтчетОбъект" 
				И Метаданные.Отчеты.Найти(Сред(ТекущаяСтрока.Вид, Найти(ТекущаяСтрока.Вид, ".")+1)) <> Неопределено
			Тогда
				// Восстановление сохраненной настройки
				НоваяФорма = ОткрытьНастройкуОтчета(ВидОбъекта, ИмяОбъекта);
			ИначеЕсли ЕстьСправочникВнешнихОбработок И ВидОбъекта = "СправочникВнешниеОбработки" Тогда
				Если Кнопка.Имя = "Открыть" Тогда
					НоваяФорма = ОткрытьОбработкуИзСправочникаВнешнихОбработок(ИмяОбъекта);
				Иначе //НайтиВСправочникеВнешнихОбработок
					ИДВнешнейОбработки = Справочники.ВнешниеОбработки.НайтиПоКоду(ИмяОбъекта).УникальныйИдентификатор();
					НоваяФорма = ПолучитьСсылкуПоУИД("Справочник.ВнешниеОбработки", ИДВнешнейОбработки).ПолучитьФорму();
				КонецЕсли; 
			ИначеЕсли ЭтоУникальныйИдентификатор(ИмяОбъекта) Тогда
				// Полнотекстовый поиск
				СсылкаОбъекта = ПолучитьСсылкуПоУИД(ВидОбъекта, ИмяОбъекта);
				Если СсылкаОбъекта <> Неопределено Тогда
					// В первую очередь нужны исследователь объектов  и редактор реквизитов - у них нет ограничений на открытие формы и тп
					Если Кнопка.Имя = "ирРедакторОбъектаБД" Тогда
						НоваяФорма = ирРедакторОбъектаБД(ПолучитьСсылкуПоУИД(ВидОбъекта, ИмяОбъекта));
					ИначеЕсли Кнопка.Имя = "ирИсследоватьОбъект" Тогда
						НоваяФорма = ирИсследоватьОбъект(ПолучитьСсылкуПоУИД(ВидОбъекта, ИмяОбъекта));
					Иначе
						НоваяФорма = ПолучитьСсылкуПоУИД(ВидОбъекта, ИмяОбъекта).ПолучитьФорму(Кнопка.Имя);
					КонецЕсли; 
					// +++.ДОБАВЛЕНИЕ.12/04/21-10:34:31.<2iS>.СтарыхСА
					//// На страх и риск пользователя добавим кнопку интерактивного удаления
					//ДобавитьКнопку(КнопкиКоманднойПанели, "НепосредственноеУдаление", "Непосредственное удаление",
					//	"ирНепосредственноеУдаление( ПолучитьСсылкуПоУИД("""+ВидОбъекта+""","""+ИмяОбъекта+"""))", ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("УдалитьНепосредственно"));
					// ---.ДОБАВЛЕНИЕ.12/04/21-10:34:31.<2iS>.СтарыхСА
				КонецЕсли;
			ИначеЕсли ВидОбъекта = "Константы" Тогда
				НоваяФорма = ирРедакторКонстант();
			ИначеЕсли Истина
				И ЗначениеЗаполнено(ВидОбъекта) 
				И ЗначениеЗаполнено(ИмяОбъекта) 
			Тогда
				МД = ?(Найти(ВидОбъекта,".")>0, Метаданные.НайтиПоПолномуИмени(ВидОбъекта), Метаданные[ВидОбъекта]);
				МДОбъект = МД[ИмяОбъекта];
				// Объект ИБ или метаданные
				// +++.ДОБАВЛЕНИЕ.12/04/21-21:46:46.<2iS>.СтарыхСА
				//// В первую очередь нужен универсальный список - у него нет ограничений на открытие формы и тп
				//ДобавитьКнопку(КнопкиКоманднойПанели, "ирУниверсальныйСписок", "Универсальный список",
				//		"ирУниверсальныйСписок( """ + ВидОбъекта + """, """ + ИмяОбъекта + """)", ДействиеОткрытиеФормы, ирПолучитьКартинкуЕслиЕсть("ирСписокЗначений"));
				// ---.ДОБАВЛЕНИЕ.12/04/21-21:46:46.<2iS>.СтарыхСА
				СтрокаПолногоИмени = МДОбъект.ПолноеИмя();
				Если Кнопка.Имя = "УниверсальныйОтчетПоРегиструНакопления" Тогда
					НоваяФорма = УниверсальныйОтчетПоРегиструНакопления(ИмяОбъекта);
				ИначеЕсли Кнопка.Имя = "ДинамическийСписок" Тогда
					// -+ АВВ [09.11.2012] НоваяФорма = Обработки.ирДинамическийСписок.ПолучитьФорму(,, СтрокаПолногоИмени);
					НоваяФорма = ирМобильные.ПодключитьВнешнююОбработку("ирДинамическийСписок").ПолучитьФорму(,, СтрокаПолногоИмени);
				ИначеЕсли Кнопка.Имя = "КонсольЗапросов" Тогда
					// -+ АВВ [09.11.2012] НоваяФорма = Обработки.ирКонсольЗапросов.Создать().ОткрытьПоОбъектуМетаданных(МДОбъект.ПолноеИмя());
					НоваяФорма = ирМобильные.ПодключитьВнешнююОбработку("ирКонсольЗапросов").ОткрытьПоОбъектуМетаданных(МДОбъект.ПолноеИмя());
				ИначеЕсли Кнопка.Имя = "КонсольКомпоновки" Тогда
					// -+ АВВ [09.11.2012] НоваяФорма = Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоОбъектуМетаданных(МДОбъект.ПолноеИмя());
					НоваяФорма = ирМобильные.ПодключитьВнешнийОтчет("ирКонсольКомпоновокДанных").ОткрытьПоОбъектуМетаданных(МДОбъект.ПолноеИмя());
				ИначеЕсли Кнопка.Имя = "ПодборИОбработкаОбъектов" Тогда
					// -+ АВВ [09.11.2012] НоваяФорма = Обработки.ирПодборИОбработкаОбъектов.ПолучитьФорму(,, МДОбъект.ПолноеИмя());
					НоваяФорма = ирМобильные.ПодключитьВнешнююОбработку("ирПодборИОбработкаОбъектов").ПолучитьФорму(,, МДОбъект.ПолноеИмя());
				ИначеЕсли Кнопка.Имя = "ЖурналРегистрации" Тогда
					// -+ АВВ [09.11.2012] НоваяФорма = Обработки.ирАнализЖурналаРегистрации.Создать().ОткрытьСПараметром("Метаданные", СтрокаПолногоИмени);
					НоваяФорма = ирМобильные.ПодключитьВнешнююОбработку("ирАнализЖурналаРегистрации").ОткрытьСПараметром("Метаданные", СтрокаПолногоИмени);
				Иначе
					НоваяФорма = ирНеглобальный.ПолучитьФормуЛкс(МДОбъект.ПолноеИмя() + ".Форма." + Кнопка.Имя);
				КонецЕсли; 
			КонецЕсли;
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;
	ИначеЕсли Команда = "" Тогда
		// Вызов первой из доступных команд
		СгенерироватьКомандыКонтекстногоМеню();
		КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
		Если КнопкиКоманднойПанели.Количество() > КоличествоСтатическихКнопокКоманднойПанели Тогда
			ОткрытиеФормы(КнопкиКоманднойПанели[КоличествоСтатическихКнопокКоманднойПанели]);
		КонецЕсли;
		Возврат;
	Иначе
		Попытка
			НоваяФорма = ирНеглобальный.ПолучитьФормуЛкс(Команда);
		Исключение
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	Если НоваяФорма = Неопределено тогда
		Возврат;
	// +++.Изменение.12/04/21-01:59:29.<2iS>.СтарыхСА
	// закомментировал для Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1032819#1032819
	//ИначеЕсли НоваяФорма.Открыта() тогда
	//	НоваяФорма.Активизировать();
	// ---.Изменение.12/04/21-01:59:29.<2iS>.СтарыхСА
	Иначе
		НоваяФорма.Открыть();
	КонецЕсли;
	ОбновитьСтатистикуИспользования(ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока, ЭтаФорма);
	
КонецПроцедуры // ОткрытиеФормы()


///////////////////////////////////////////////////////////////////////////////
Процедура ДеревоИнтерфейса_Выбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если (ВыбраннаяСтрока = Неопределено) или (ПустаяСтрока(ВыбраннаяСтрока.Имя)) тогда
		Возврат;
	КонецЕсли;
	
	ВидОбъекта = ВыбраннаяСтрока.Вид;
	ИмяОбъекта = ВыбраннаяСтрока.Имя;
			
	Если ВидОбъекта = "Справочники" ИЛИ
		ВидОбъекта = "Документы" ИЛИ
		ВидОбъекта = "ПланыВидовХарактеристик" ИЛИ 
		ВидОбъекта = "РегистрыСведений" ИЛИ 
		ВидОбъекта = "РегистрыНакопления" ИЛИ 
		ВидОбъекта = "ПланыСчетов" ИЛИ 
		ВидОбъекта = "ПланыВидовРасчета" ИЛИ 
		ВидОбъекта = "РегистрыБухгалтерии" ИЛИ 
		ВидОбъекта = "РегистрыРасчета"  ИЛИ 
		ВидОбъекта = "БизнесПроцессы"  ИЛИ 
		ВидОбъекта = "Задачи"  ИЛИ 
		ВидОбъекта = "ПланыОбмена"
	Тогда
		МД = ?(Найти(ВидОбъекта,".")>0, Метаданные.НайтиПоПолномуИмени(ВидОбъекта), Метаданные[ВидОбъекта]);
		МДОбъект = МД[ИмяОбъекта];
		ОткрытиеФормы(МДОбъект.ПолноеИмя() + ".ФормаСписка");
	ИначеЕсли ВидОбъекта = "ЖурналыДокументов" ИЛИ ВидОбъекта = "Обработки" ИЛИ ВидОбъекта = "Отчеты" тогда
		МД = ?(Найти(ВидОбъекта,".")>0, Метаданные.НайтиПоПолномуИмени(ВидОбъекта), Метаданные[ВидОбъекта]);
		МДОбъект = МД[ИмяОбъекта];
		ОткрытиеФормы(МДОбъект.ПолноеИмя() + ".Форма");
	Иначе
		ОткрытиеФормы();
		//ВызватьИсключение "ДеревоИнтерфейса_Выбор: неподдерживаемое значение вида объекта (""" + ВидОбъекта + """)";
	КонецЕсли;
			
КонецПроцедуры // ДеревоИнтерфейса_Выбор

///////////////////////////////////////////////////////////////////////////////
Процедура ДеревоИнтерфейса_ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	////Если (ДанныеСтроки = стрЧастоИспользуемые)
	////	или (ДанныеСтроки = стрПоследниеИспользованные)
	////	или (ДанныеСтроки.Родитель = стрЧастоИспользуемые)
	////	или (ДанныеСтроки.Родитель = стрПоследниеИспользованные) 
	////тогда
	////	ОформлениеСтроки.Шрифт = ЖирныйШрифт;
	////КонецЕсли;
	
	// +++.ДОБАВЛЕНИЕ.12/04/21-11:18:46.<2iS>.СтарыхСА
	ирНеглобальный.ТабличноеПоле_ОформитьЯчейкиИмяСинонимЛкс(Элемент, ОформлениеСтроки);
	// ---.ДОБАВЛЕНИЕ.12/04/21-11:18:46.<2iS>.СтарыхСА
	
КонецПроцедуры // ДеревоИнтерфейса_ПриВыводеСтроки

Процедура ДеревоИнтерфейсаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		УдалитьКонтекстныеКнопкиКоманднойПанели();
		Возврат;
	КонецЕсли; 
	СтрокаКорня = Элемент.ТекущаяСтрока.Родитель;
	Если СтрокаКорня = Неопределено ИЛИ СтрокаКорня.Имя = "Избранное" Тогда
		ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ДобавитьВИзбранное.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ДобавитьВИзбранное.Доступность = Истина;
	КонецЕсли;
	
	СгенерироватьКомандыКонтекстногоМеню();
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	СтрокаДляУдаления = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	СтрокаКорня = СтрокаДляУдаления.Родитель;
	Если НЕ СтатическиеВетки[СтрокаКорня] = Неопределено Тогда
		// Сброс статистик
		СтрокаСтатистики = стНастройки.СтатистикаИспользования.НайтиСтроки(Новый Структура("Вид,Имя",СтрокаДляУдаления.Вид,СтрокаДляУдаления.Имя));
		Если СтрокаСтатистики.Количество()>0 Тогда
			стНастройки.СтатистикаИспользования.Удалить(СтрокаСтатистики[0]);
		КонецЕсли;
		СтрокаКорня.Строки.Удалить(СтрокаДляУдаления);
		// +++.ДОБАВЛЕНИЕ.12/04/21-10:46:30.<2iS>.СтарыхСА
		Возврат;
		// ---.ДОБАВЛЕНИЕ.12/04/21-10:46:30.<2iS>.СтарыхСА
	КонецЕсли;
	
	// Удаление подкаталога
	ПутьКаталога = (СтрокаДляУдаления.Представление);
	Файл = Новый Файл(ПутьКаталога);
	СтрокаКорня = ?(СтрокаДляУдаления.Родитель = Неопределено, ДеревоИнтерфейса, СтрокаДляУдаления.Родитель);;
	Если Файл.Существует() Тогда
		СтрокаКорня.Строки.Удалить(СтрокаДляУдаления);
		стНастройки.Каталоги.Удалить(ПутьКаталога);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип ("СтрокаДереваЗначений") И  ПараметрыПеретаскивания.Значение.Родитель = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Функция ПодготовитьЗначениеПеретаскивания(ЗначениеПеретаскивания, ПолучатьПредставление = Истина)
	
	// +++.ДОБАВЛЕНИЕ.12/04/21-12:09:08.<2iS>.СтарыхСА
	Результат = ЗначениеПеретаскивания;
	Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") Тогда
		Если ЗначениеПеретаскивания.Количество() > 0 Тогда
			ЗначениеПеретаскивания = ЗначениеПеретаскивания[0];
			ХмлТип = XMLТипЗнч(ЗначениеПеретаскивания);
			Если ХмлТип <> Неопределено Тогда
				Если Найти(ХмлТип.ИмяТипа, "Ref.") > 0 Тогда
					Результат = Новый Структура();
					Результат.Вставить("Вид", ЗначениеПеретаскивания.Метаданные().ПолноеИмя());
					Результат.Вставить("Имя", ЗначениеПеретаскивания.УникальныйИдентификатор());
					Если ПолучатьПредставление Тогда
						Результат.Вставить("Представление", "" + ЗначениеПеретаскивания);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	Возврат Результат;
	// ---.ДОБАВЛЕНИЕ.12/04/21-12:09:08.<2iS>.СтарыхСА

КонецФункции

Процедура ДеревоИнтерфейсаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	// +++.ДОБАВЛЕНИЕ.12/04/21-12:07:15.<2iS>.СтарыхСА
	ЗначениеПеретаскивания = ПодготовитьЗначениеПеретаскивания(ПараметрыПеретаскивания.Значение);
	ДобавитьСтрокуВСтатическуюВетку(ЗначениеПеретаскивания, ?(Строка.Родитель = Неопределено, Строка.Имя, Строка.Родитель.Имя));
	ЗаполнитьСтатическиеВеткиДереваИнтерфейса(ЭтаФорма);
	// ---.ДОБАВЛЕНИЕ.12/04/21-12:07:15.<2iS>.СтарыхСА
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Если Строка = Неопределено Тогда
		// Выход за область ячеек табличного поля
		Возврат;
	КонецЕсли;
	СтруктураСтатическойВетки = ?(Строка.Родитель = Неопределено, СтатическиеВетки[Строка], СтатическиеВетки[Строка.Родитель]);
	Если СтруктураСтатическойВетки = Неопределено ИЛИ НЕ СтруктураСтатическойВетки.РазрешитьПеретаскивание Тогда
		Возврат;	
	КонецЕсли;
	тзСтатистикаИспользования = стНастройки.СтатистикаИспользования;
	КлючПоиска = Новый Структура(?(Строка.Родитель = Неопределено, Строка.Имя, Строка.Родитель.Имя)+", Вид, Имя", 1);
	// +++.ДОБАВЛЕНИЕ.12/04/21-11:58:56.<2iS>.СтарыхСА
	ЗначениеПеретаскивания = ПодготовитьЗначениеПеретаскивания(ПараметрыПеретаскивания.Значение);
	ЗаполнитьЗначенияСвойств(КлючПоиска, ЗначениеПеретаскивания);
	// ---.ДОБАВЛЕНИЕ.12/04/21-11:58:56.<2iS>.СтарыхСА
	НайденныеСтроки = тзСтатистикаИспользования.НайтиСтроки(КлючПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
КонецПроцедуры



///////////////////////////////////////////////////////////////////
// Статические кнопки командной панели

Процедура КоманднаяПанельДереваИнтерфейсаДобавитьВИзбранное(Кнопка)
	ДобавитьСтрокуВСтатическуюВетку(ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока, "Избранное");
	ЗаполнитьСтатическиеВеткиДереваИнтерфейса(ЭтаФорма);
КонецПроцедуры

Процедура КоманднаяПанельДереваИнтерфейсаДобавитьПапку(Кнопка)
	
	ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если ВыборКаталога.Выбрать() Тогда
		ПредставлениеКаталога = ВыборКаталога.Каталог;
		ВвестиСтроку(ПредставлениеКаталога, "Представление каталога");
		стНастройки.Каталоги.Вставить(ВыборКаталога.Каталог, ПредставлениеКаталога);
		ЗаполнитьДеревоВсехОбъектов();
		ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДереваИнтерфейсаОткрыть(Кнопка)
	
	ОткрытиеФормы();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Фоновые команды

////////////////////////////////////////////////////////////////////
// Команды, специфические для статических веток

// Выполняет все команды, сохраненные в ветке "Автозапуск"
// Вызывается при открытии данной формы
//
Процедура Автозапуск() Экспорт
	Для каждого СтрокаДерева Из ДеревоИнтерфейса.Строки Цикл
		СтруктураНастроекСтатическойВетки = СтатическиеВетки[СтрокаДерева];
		Если СтруктураНастроекСтатическойВетки = Неопределено ИЛИ НЕ СтруктураНастроекСтатическойВетки.Автозапуск Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество()>0 Тогда
			Для каждого СтрокаАвтозапуска Из СтрокаДерева.Строки Цикл
				ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = СтрокаАвтозапуска;
				ОткрытиеФормы();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // Автозапуск()



Процедура ФоновыйПоиск() Экспорт

	
	ВыполнитьФоновыйПоиск();
	
	//ОтключитьОбработчикОжидания("ФоновыйПоиск");

КонецПроцедуры

Процедура кнНастройкаНажатие(Элемент)
	ПолучитьФорму("Настройка").ОткрытьМодально();
КонецПроцедуры

Процедура кнПрятатьНажатие(Элемент)
	Если СостояниеОкна = ВариантСостоянияОкна.Прячущееся Тогда
		_СостояниеОкна = ВариантСостоянияОкна.Прикрепленное
	Иначе
		_СостояниеОкна = ВариантСостоянияОкна.Прячущееся 
	КонецЕсли;
	стНастройки.Вставить("СостояниеОкна", _СостояниеОкна);
	Переоткрыть();
КонецПроцедуры

// Переоткрывает форму. Бывает нужно при смене отображения окна и при запуске отладочной версии
//
Процедура Переоткрыть(ИскатьОтладочнуюВерсию=Неопределено)
	
	Если НЕ Метаданные.Обработки.Найти(ЭтотОбъект.Метаданные().Имя) = Неопределено Тогда 
		Если ИскатьОтладочнуюВерсию=Истина Тогда
			ФайлОбработки = Новый Файл(КаталогВременныхФайлов()+"\ip8.epf");
			Если ФайлОбработки.Существует() Тогда
				Попытка
					Обработка = ВнешниеОбработки.Создать(ФайлОбработки);
				Исключение
					Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
					Возврат
				КонецПопытки;
			Иначе
				// Поиск в справочнике внешних обработок
				Обработка = НайтиИнтерфейснуюПанельВСправочникеВнешнихОбработок();
			КонецЕсли;
			
			Если Обработка = Неопределено Тогда
				Возврат
			Иначе
				ЗаполнитьЗначенияСвойств(Обработка, ЭтотОбъект);
				Форма = Обработка.ПолучитьФорму();
				ЗаполнитьЗначенияСвойств(Форма, ЭтаФорма,,"СостояниеОкна");					
			КонецЕсли;
		Иначе	
			Форма = Обработки[Метаданные().Имя].Создать().ПолучитьФорму();
		КонецЕсли;
		
	Иначе
		_ИмяФайла_ = "";
		Выполнить("_ИмяФайла_ = ИспользуемоеИмяФайла");
		Если ЗначениеЗаполнено(_ИмяФайла_) Тогда
			ФайлОбработки = Новый Файл(_ИмяФайла_);
			Если ФайлОбработки.Существует() Тогда
				Форма = ВнешниеОбработки.ПолучитьФорму(_ИмяФайла_);
			Иначе 
				Возврат;
			КонецЕсли;
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Форма = Неопределено Тогда
		Закрыть();
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры // Переоткрыть()

// Ищет интерфейсную панель по названию
Функция НайтиИнтерфейснуюПанельВСправочникеВнешнихОбработок()
	
	Если ЕстьСправочникВнешнихОбработок Тогда
		НайденныйЭлементСправочникаВнешнихОбработок = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Интерфейсная панель");
		Если НЕ НайденныйЭлементСправочникаВнешнихОбработок.Пустая() И НайденныйЭлементСправочникаВнешнихОбработок.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
			Попытка
				
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ДвоичныеДанные = НайденныйЭлементСправочникаВнешнихОбработок.ХранилищеВнешнейОбработки.Получить();
				ДвоичныеДанные.Записать(ИмяФайла);
				Возврат  ВнешниеОбработки.Создать(ИмяФайла);
				
			Исключение
				
				Сообщить("Выбранный файл не является внешней обработкой.
				|Либо, данная обработка не предназначена для
				|запуска в этой конфигурации.");
				Возврат Неопределено;
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции // НайтиИнтерфейснуюПанельВСправочникеВнешнихОбработок()

Процедура КомандыПанели_кнКонсоль(Кнопка)
	Форма = ОткрытьНастройкуКонсолиОтчетовИлиЗапросов(?(Кнопка.Имя = "кнКонсольОтчетов","rcf", "sel"));
	Если НЕ Форма = Неопределено Тогда
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура КомандыПанелиПечать(Кнопка)
	ВывестиТЗвТД(ДеревоИнтерфейса, Истина, ФильтрПодсистем + ?(ЗначениеЗаполнено(ФильтрИмен), ФильтрИмен, ""));
	
	// Yasen Для эксперимента выведем дерево в коллекцию
	// -+ АВВ [08.08.2012] Обработки.ирИсследовательОбъектов.Создать().ИсследоватьКоллекцию(ДеревоИнтерфейса.Строки);
	ирМобильные.ПодключитьВнешнююОбработку("ирИсследовательОбъектов").ИсследоватьКоллекцию(ДеревоИнтерфейса.Строки);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ~~~~ ИНТЕГРАЦИЯ С ПОДСИСТЕМОЙ ИНСТРУМЕНТЫ РАЗРАБОТЧИКА ~~~~
///////////////////////////////////////////////////////////////////////////////

// Открывает универсальный отчет по данному регистру
//
// Параметры
//  ИмяРегистра - строковый идентификатор регистра
//
// Возвращаемое значение:
//   Форма универсального отчета, заполненная настройками и готовая к формированию
//
Функция УниверсальныйОтчетПоРегиструНакопления(ИмяРегистра)
	Если НЕ ЕстьУниверсальныйОтчет Тогда
		Возврат РегистрыНакопления[ИмяРегистра].ПолучитьФормуСписка();
	КонецЕсли;
	УниверсальныйОтчет = Отчеты.УниверсальныйОтчет.Создать();
	ФормаОтчета = УниверсальныйОтчет.ПолучитьФорму();
	УниверсальныйОтчет.ИмяРегистра = ИмяРегистра;
	УниверсальныйОтчет.ПереУстановитьНачальныеНастройки(УниверсальныйОтчет, УниверсальныйОтчет, ФормаОтчета);
	ДоступныеПоля = УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля;
	Для каждого Поле Из ДоступныеПоля Цикл
		Если Поле.Измерение Тогда
			УниверсальныйОтчет.ДобавитьИзмерениеСтроки(Поле.ПутьКДанным);
		КонецЕсли;
		Если Поле.Отбор Тогда
			УниверсальныйОтчет.ДобавитьОтбор(Поле.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	Возврат ФормаОтчета;
КонецФункции // УниверсальныйОтчетПоРегиструНакопления()

Функция ирУниверсальныйСписок(ВидОбъекта, ИмяОбъекта)
	// Добавить вызов макета если ИР нету
	// -+ АВВ [09.11.2012] Возврат Обработки.ирДинамическийСписок.ПолучитьФорму(,, СоответствиеВидовМетаданныхДляПоискаПолногоИмени[ВидОбъекта]+"."+ИмяОбъекта)
	Возврат ирМобильные.ПодключитьВнешнююОбработку("ирДинамическийСписок").ПолучитьФорму(,, СоответствиеВидовМетаданныхДляПоискаПолногоИмени[ВидОбъекта]+"."+ИмяОбъекта)
КонецФункции

Функция ирРедакторКонстант()
	Обработка = НайтиСоздатьОбработкуПоИдентификатору("ирРедакторКонстант");
	Если НЕ Обработка = Неопределено Тогда
		// +++.ДОБАВЛЕНИЕ.12/04/21-10:42:11.<2iS>.СтарыхСА
		Форма = Обработка.ПолучитьФорму();
		Форма.НачальноеЗначениеВыбора = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока.Имя;
		// ---.ДОБАВЛЕНИЕ.12/04/21-10:42:11.<2iS>.СтарыхСА
		Возврат Форма;
	Иначе
		Возврат Неопределено
	КонецЕсли;
КонецФункции // ирРедакторКонстант()


Функция ирИсследоватьОбъект(Ссылка)
	Обработка = НайтиСоздатьОбработкуПоИдентификатору("ирИсследовательОбъектов");
	Если НЕ Обработка = Неопределено Тогда
		ФормаИсследователя = Обработка.ПолучитьФорму("ИсследовательОбъектов");
		ФормаИсследователя.УстановитьИсследуемоеЗначение(Ссылка);
		Возврат ФормаИсследователя;
	Иначе
		Возврат Неопределено
	КонецЕсли;
КонецФункции

Функция ирРедакторОбъектаБД(Ссылка)
	Обработка = НайтиСоздатьОбработкуПоИдентификатору("ирРедакторОбъектаБД");
	Если НЕ Обработка = Неопределено Тогда
		Возврат Обработка.ПолучитьФормуСсылки(Ссылка);
	Иначе
		Возврат Неопределено
	КонецЕсли;
КонецФункции // ирРедакторОбъектаБД()

// Непосредственно удаляет объект, переданный по ссылке
Функция ирНепосредственноеУдаление(Ссылка)
	Если ЗначениеЗаполнено(Ссылка) Тогда
		_Объект = Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(_Объект.Ссылка) и Вопрос("Вы действительно хотите безвозвратно удалить объект?" + Символы.ПС + Ссылка, РежимДиалогаВопрос.ОКОтмена, 3, КодВозвратаДиалога.Отмена, "Внимание!") = КодВозвратаДиалога.ОК Тогда
			Попытка
			 	_Объект.Удалить();
				Сообщить("Объект безвовзратно удален:" + Ссылка);
				ФоновыйПоиск();
			Исключение
				Сообщить("При попытке удаления объекта " + Ссылка + Символы.ПС + "произошла ошибка:"  + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ирНепосредственноеУдаление()


// + АВВ [21.08.2012] расширил функцию попыткой открытия мобильной версии
// Ищет обработку в метаданных
// если такой обработки нет, создает ее из макета
Функция НайтиСоздатьОбработкуПоИдентификатору(ИмяОбработки)
	НайденнаяОбработка = Метаданные.Обработки.Найти(ИмяОбработки);
	Если НайденнаяОбработка = Неопределено Тогда
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьМакет(ИмяОбработки);
			ДвоичныеДанные.Записать(ИмяФайла);
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			УдалитьФайлы(ИмяФайла);
			Возврат Обработка;
		Исключение
			// - АВВ [21.08.2012] {
			#Если НеМобильныйБлок Тогда
			Предупреждение("Не удалось создать обработку для открытия данной настройки");
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
			#КонецЕсли
			// - АВВ [21.08.2012] }
			// + АВВ [21.08.2012] {Делаю еще попытку открытия мобильной версии
			Попытка
				Возврат ирМобильные.ПодключитьВнешнююОбработку(ИмяОбработки);
			Исключение
				Предупреждение("Не удалось создать обработку для открытия данной настройки");
				Сообщить(ОписаниеОшибки());
				Возврат Неопределено;
			КонецПопытки;
			// + АВВ [21.08.2012] }
		КонецПопытки;
	Иначе
		Возврат Обработки[ИмяОбработки].Создать();
	КонецЕсли;
КонецФункции // НайтиСоздатьВнешнююОбработкуПоИдентификатору()

Функция ирПолучитьКартинкуЕслиЕсть(ИмяКартинки)
	Если Лев(ИмяКартинки, 2) = "ир" Тогда
		// - АВВ [30.06.2012] Возврат ?(Метаданные.ОбщиеКартинки.Найти(ИмяКартинки) = Неопределено, Неопределено, БиблиотекаКартинок[ИмяКартинки]);
		// + АВВ [08.08.2012] {
		Попытка
			Возврат ?(Метаданные.ОбщиеКартинки.Найти(ИмяКартинки) = Неопределено, ирМобильные.ПолучитьКартинку(ИмяКартинки), БиблиотекаКартинок[ИмяКартинки]);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		// + АВВ [08.08.2012] } 
	Иначе
		// Для типовых поиск по метаданным недоступен
		Попытка
			Возврат БиблиотекаКартинок[ИмяКартинки];
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
КонецФункции

Процедура ФильтрПодсистемНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
// +++.ДОБАВЛЕНИЕ.12/04/21-10:34:50.<2iS>.СтарыхСА
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
// ---.ДОБАВЛЕНИЕ.12/04/21-10:34:50.<2iS>.СтарыхСА

КонецПроцедуры

Процедура КомандыПанелиИмяСиноним(Кнопка)
	
// +++.ДОБАВЛЕНИЕ.12/04/21-10:52:22.<2iS>.СтарыхСА
	ЭтотОбъект.флИмяСиноним = Не Кнопка.Пометка;
	Кнопка.Пометка = ЭтотОбъект.флИмяСиноним;
	ирНеглобальный.ТабличноеПоле_ОбновитьКолонкиИмяСинонимЛкс(ЭлементыФормы.ДеревоИнтерфейса, ЭтотОбъект.флИмяСиноним);
	СортироватьВторойУровеньДерева(ДеревоИнтерфейса);
// ---.ДОБАВЛЕНИЕ.12/04/21-10:52:22.<2iS>.СтарыхСА
	
КонецПроцедуры

Процедура КомандыПанелиОПодсистеме(Кнопка)
	
	ирГлобальный.ЛксОткрытьСправкуПоПодсистеме(ЭтотОбъект);
	
КонецПроцедуры


КоличествоСтатическихКнопокКоманднойПанели = 4; // Открыть, Добавить в избранное, Справка, Разделитель
ЗагрузитьНастройки();

// Управление состоянием окна
Если стНастройки.Свойство("СостояниеОкна") Тогда
	Если стНастройки.СостояниеОкна = ВариантСостоянияОкна.Обычное или стНастройки.СостояниеОкна = ВариантСостоянияОкна.Обычное Тогда
		СостояниеОкна = стНастройки.СостояниеОкна;
	ИначеЕсли стНастройки.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное ИЛИ стНастройки.СостояниеОкна = ВариантСостоянияОкна.Прячущееся Тогда
		СоединяемоеОкно = Истина;
		СостояниеОкна = стНастройки.СостояниеОкна;
	Иначе
		СостояниеОкна = стНастройки.СостояниеОкна;
	КонецЕсли;
Иначе
	стНастройки.Вставить("СостояниеОкна", СостояниеОкна);
КонецЕсли;

// +++.ДОБАВЛЕНИЕ.12/04/21-11:15:44.<2iS>.СтарыхСА
мСписокВыбораПодсистем = Новый СписокЗначений;
ЭлементыФормы.КомандыПанели.Кнопки.ИмяСиноним.Пометка = ЭтотОбъект.флИмяСиноним;
ирНеглобальный.ТабличноеПоле_ОбновитьКолонкиИмяСинонимЛкс(ЭлементыФормы.ДеревоИнтерфейса, ЭтотОбъект.флИмяСиноним);
ТабличныйДокумент = ПолучитьМакет("Картинки");
КартинкаСтрок = ТабличныйДокумент.Рисунки[0].Картинка;
ЭлементыФормы.ДеревоИнтерфейса.Колонки.Имя.КартинкиСтрок = КартинкаСтрок;
ЭлементыФормы.ДеревоИнтерфейса.Колонки.Представление.КартинкиСтрок = КартинкаСтрок;
// ---.ДОБАВЛЕНИЕ.12/04/21-11:15:44.<2iS>.СтарыхСА
