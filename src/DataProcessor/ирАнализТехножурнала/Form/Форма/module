Перем МассивКолонокБезОтбора;
Перем мСвойстваСобытий;
Перем мСоставСвойствСобытий;
Перем мИзмененныеВидимостиКолонок;
Перем ДлительностьПредыдущейДозагрузки;
Перем мАктуальныеСвойства;
Перем мБесполезныеКолонки;
Перем мБесполезныеКолонкиТрассы;
Перем мСхемаКомпоновки;
Перем мЧислоПолейПорядка;
Перем мВнешниеНаборыДанных;

Процедура ГлавнаяКоманднаяПанельНовоеОкно(Кнопка)
	
	ЛксОткрытьНовоеОкноОбработки(ЭтотОбъект);
	
КонецПроцедуры

Процедура КнопкаВыбораПериодаНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();
		КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Картинка.ОтображатьКартинку = Истина;
	Если Ложь
		Или НРег(ДанныеСтроки.Событие) = НРег("EXCP") 
		Или НРег(ДанныеСтроки.Событие) = НРег("EXCPCNTX")
		Или НРег(ДанныеСтроки.Событие) = НРег("QERR")
	тогда
		ОформлениеСтроки.Ячейки.Картинка.ИндексКартинки = 3;
	КонецЕсли;
	Если Истина
		//И Не ЗагружатьТолькоТекущийСеанс
		И (Ложь
			Или (Истина
				//И ирКэш.ЭтоФайловаяБазаЛкс()
				И ДанныеСтроки.ПроцессОС = ирКэш.Получить().ПолучитьИдентификаторПроцессаОС()
				И ДанныеСтроки.Компьютер = "")
			Или (Истина
				И Не ирКэш.ЭтоФайловаяБазаЛкс()
				И ДанныеСтроки.Сеанс = НомерСеансаИнформационнойБазы()
				И ирНеглобальный.СтрокиРавныЛкс(ДанныеСтроки.Инфобаза, НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref")))) 
	Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(245, 255, 245);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Колонка.Данные) Тогда
		ИмяРеквизита = Колонка.Данные;
		ИмяСвойстваБезМета = ПолучитьИмяСвойстваБезМета(ИмяРеквизита);
		ТипЗначения = Метаданные().ТабличныеЧасти.ТаблицаЖурнала.Реквизиты[ИмяРеквизита].Тип;
		#Если _ Тогда
		    ТипЗначения = Новый ОписаниеТипов();
		#КонецЕсли
		Если Истина
			И мСвойстваСИменамиБД.Найти(ИмяСвойстваБезМета) <> Неопределено
			//И (Ложь
			//	Или ВыбраннаяСтрока.Инфобаза = ""
			//	Или ирНеглобальный.СтрокиРавныЛкс(ВыбраннаяСтрока.Инфобаза, НСтр(СтрокаСоединенияИнформационнойБазы(), "Ref")))
		Тогда
			СтандартнаяОбработка = Ложь;
			Если Истина
				И ирНеглобальный.СтрокиРавныЛкс(ИмяСвойстваБезМета, "ПланСУБД")
				И ирНеглобальный.СтрокиРавныЛкс(ВыбраннаяСтрока.Событие, "DBMSSQL")
			Тогда
				ФормаПросмотра = ПолучитьФорму("ПланЗапросаMSSQL", , "" + ВыбраннаяСтрока.МоментВремени);
				ФормаПросмотра.Текст = ВыбраннаяСтрока[Колонка.Данные];
				ФормаПросмотра.Открыть();
			Иначе
				ОткрытьРоднойТекстSDBL(ВыбраннаяСтрока[Колонка.Данные], Не ирНеглобальный.СтрокиРавныЛкс(ИмяСвойстваБезМета, ИмяРеквизита),
					"" + ВыбраннаяСтрока.МоментВремени + Колонка.Данные);
			КонецЕсли; 
		ИначеЕсли Истина
			И ТипЗначения.СодержитТип(Тип("Строка"))
			И ТипЗначения.КвалификаторыСтроки.Длина = 0
		Тогда
			СтандартнаяОбработка = Ложь;
			Если ирНеглобальный.СтрокиРавныЛкс(ИмяРеквизита, "Контекст") <> Неопределено Тогда
				ВариантПросмотра = "ВстроенныйЯзык";
			Иначе
				ВариантПросмотра = "Компактный";
			КонецЕсли; 
			ирНеглобальный.ОткрытьТекстЛкс(ВыбраннаяСтрока[Колонка.Данные], Колонка.ТекстШапки, ВариантПросмотра, Истина,
				"" + ВыбраннаяСтрока.МоментВремени + Колонка.Данные);
		КонецЕсли; 
	КонецЕсли; 
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Ложь;
		//ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
		КоманднаяПанельЖурналРегистрацииОткрытьСтрокуВОтдельномОкне();
	КонецЕсли; 

КонецПроцедуры

Процедура ОбновитьТаблицуЖурнала() Экспорт
	
	ЭтаФорма.ЭтоТрасса = Ложь;
	ОбновитьДоступность();
	Если ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока <> Неопределено Тогда
		КлючТекущейСтроки = Новый Структура();
		КлючТекущейСтроки.Вставить("МоментВремени", ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока.МоментВремени);
		КлючТекущейСтроки.Вставить("ИмяФайлаЛога", ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока.ИмяФайлаЛога);
	КонецЕсли;
	Если Истина
		И ТаблицаЖурнала.Количество() > 0
		И Не ирНеглобальный.СтрокиРавныЛкс(ПоследнийКаталогЗагрузки, КаталогЖурнала)
	Тогда
		Ответ = Вопрос("Каталог загрузки изменен. Очистить существующие строки?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчиститьТаблицы();
		КонецЕсли;
	КонецЕсли; 
	РежимДозагрузки = ТаблицаЖурнала.Количество() > 0;
	лВремяНачалаЗагрузки = ТекущаяДата();
	ЖурналПрочитан = ПрочитатьЖурнал();
	Если Не ЖурналПрочитан Тогда 
		Возврат;
	КонецЕсли; 
	ПоследнийКаталогЗагрузки = ЭтотОбъект.КаталогЖурнала;
	КоличествоСтрокЖурнала = ТаблицаЖурнала.Количество();
	КонецИнтервала = ТекущаяДата();
	Состояние("");
	ПороговаяДлительностьЗагрузки = 5;
	ДлительностьИнтервала = КонецИнтервала - лВремяНачалаЗагрузки;
	Если ДлительностьИнтервала > ПороговаяДлительностьЗагрузки Тогда
		КолвоЧасов = Цел(ДлительностьИнтервала / 3600);
		ДлительностьИнтервалаДата = '00010101' + (КонецИнтервала - лВремяНачалаЗагрузки) - КолвоЧасов * 3600;
		ДлительностьИнтервалаСтр = Формат(КолвоЧасов, "ЧН=; ЧГ=0") + ":" + Формат(ДлительностьИнтервалаДата, "ДФ=мм:сс; ДП=");
		Сообщить("Загрузка данных журнала выполнена за " + ДлительностьИнтервалаСтр);
		Если Истина
			И РежимДозагрузки
			И Автообновление > 0
			И ДлительностьИнтервала >= Автообновление
			И ДлительностьПредыдущейДозагрузки >= Автообновление
		Тогда
			Автообновление = Макс(ДлительностьИнтервала, ДлительностьПредыдущейДозагрузки) + 5;
			АвтообновлениеПриИзменении();
		КонецЕсли; 
	КонецЕсли; 
	Если Не РежимДозагрузки Тогда
		ТекущаяСтрокаУстановлена = Ложь;
		Если КлючТекущейСтроки <> Неопределено Тогда
			НайденныеСтроки = ТаблицаЖурнала.НайтиСтроки(КлючТекущейСтроки);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока = НайденныеСтроки[0];
				ТекущаяСтрокаУстановлена = Истина;
			КонецЕсли; 
		КонецЕсли; 
		Если Не ТекущаяСтрокаУстановлена Тогда
			Если ТаблицаЖурнала.Количество() > 0 Тогда
				ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока = ТаблицаЖурнала[ТаблицаЖурнала.Количество() - 1];
			КонецЕсли; 
		КонецЕсли; 
		ДлительностьПредыдущейДозагрузки = 0;
		УстановитьБесполезныеКолонки();
	Иначе
		ДлительностьПредыдущейДозагрузки = ДлительностьИнтервала;
	КонецЕсли; 
	ПодготовитьФормуДляОтображенияНовыхДанных();
	Если Автообновление > 0 Тогда
		ПодключитьОбработчикОжидания("ОбновитьТаблицуЖурнала", Автообновление, Истина);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПодготовитьФормуДляОтображенияНовыхДанных()

	Если ВключитьСвойстваСИменамиМетаданных Тогда
		ОбновитьСвойстваВТерминахМетаданныхВФорме();
	КонецЕсли; 
	УстановитьФлагПересчетаИтогов();
	ОбновитьИтоги();

КонецПроцедуры

Процедура УстановитьФлагПересчетаИтогов()

	Для Каждого Страница Из ЭлементыФормы.ПанельИтоги.Страницы Цикл
		Страница.Значение.Рассчитаны = Ложь;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьИтоги(Принудительно = Ложь)
	
	Если Не ИтогиВключены Тогда
		Возврат;
	КонецЕсли; 
	Если мСхемаКомпоновки = Неопределено Тогда
		мСхемаКомпоновки = ПолучитьМакет("СхемаКомпоновки");
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки);
		ирНеглобальный.СоздатьИлиОбновитьНаборДанныхОбъектПоМетаданнымЛкс(мСхемаКомпоновки, ТаблицаЖурнала.ВыгрузитьКолонки().Колонки);
		Компоновщик.Инициализировать(ИсточникНастроек);
		Для Каждого Страница Из ЭлементыФормы.ПанельИтоги.Страницы Цикл
			КолонкиТП = ЭлементыФормы[Страница.Имя].Колонки;
			Для Каждого КолонкаТП Из КолонкиТП Цикл
				ВычисляемоеПоле = мСхемаКомпоновки.ВычисляемыеПоля.Найти(КолонкаТП.Данные);
				Если ВычисляемоеПоле <> Неопределено Тогда
					КолонкаТП.ТекстШапки = ВычисляемоеПоле.Заголовок;
					КолонкаТП.Формат = ВычисляемоеПоле.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Формат")).Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	РассчитатьИтоги(Принудительно);
	ПредставлениеОтбора = "" + Компоновщик.Настройки.Отбор;
	Если Не ЗначениеЗаполнено(ПредставлениеОтбора) Тогда
		ПредставлениеОтбора = "Нет";
	КонецЕсли; 
	ЭтаФорма.НадписьОтбор = ПредставлениеОтбора;

КонецПроцедуры

Функция РассчитатьИтоги(Принудительно = Ложь)

	ПанельИтоги = ЭлементыФормы.ПанельИтоги;
	ИмяСтраницы = ПанельИтоги.ТекущаяСтраница.Имя;
	Компоновщик.ЗагрузитьНастройки(мСхемаКомпоновки.НастройкиПоУмолчанию);
	Для Счетчик = 1 По мЧислоПолейПорядка Цикл
		ПолеСортировки = ЭтаФорма[ИмяСтраницы + "ПолеСортировки" + Счетчик];
		Если ЗначениеЗаполнено(ПолеСортировки) Тогда
			Если Истина
				И Не ВключатьВИтогиИнфобазу
				И ирНеглобальный.СтрокиРавныЛкс(ПолеСортировки, "Инфобаза")
			Тогда
				Продолжить;
			КонецЕсли; 
			ЭлементПорядка = ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(Компоновщик.Настройки.Порядок, ПолеСортировки);
			ВозрастаниеСортировки = ЭтаФорма[ИмяСтраницы + "НаправлениеСортировки" + Счетчик];
			Если Не ВозрастаниеСортировки Тогда
				ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	Если Истина
		И Не Принудительно 
		И ПанельИтоги.ТекущаяСтраница.Значение.Рассчитаны 
	Тогда
		СтрокаПорядка = ЛксПолучитьСтрокуПорядкаКомпоновки(Компоновщик.Настройки.Порядок,, "");
		Если ЗначениеЗаполнено(СтрокаПорядка) Тогда
			ЭтаФорма[ИмяСтраницы].Сортировать(СтрокаПорядка);
		КонецЕсли; 
		Возврат Неопределено;
	КонецЕсли;
	Если ПанельИтоги.Страницы.Описания = ПанельИтоги.ТекущаяСтраница Тогда 
		Сортировка = "Количество Убыв";
		ОсновнойРесурс = "Количество";
	Иначе
		Сортировка = "Длительность Убыв";
		ОсновнойРесурс = "Длительность";
	КонецЕсли; 
	Если ПанельИтоги.Страницы.ТекстыSDBL = ПанельИтоги.ТекущаяСтраница Тогда 
		ЗаполнитьТекстSDBLБезПараметров();
	КонецЕсли; 
	СтрокаКлюча = ПанельИтоги.ТекущаяСтраница.Значение.Группировка;
	ГлавноеПоле = ЛксПолучитьПервыйФрагмент(СтрокаКлюча, ",");
	Если ВключатьВИтогиИнфобазу Тогда
		СтрокаКлюча = СтрокаКлюча + ",Инфобаза";
	КонецЕсли; 
	ТабличноеПолеИтогов = ЭлементыФормы[ИмяСтраницы];
	ТекущаяСтрока = ТабличноеПолеИтогов.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		КлючТекущейСтроки = Новый Структура(СтрокаКлюча);
		ЗаполнитьЗначенияСвойств(КлючТекущейСтроки, ТекущаяСтрока); 
	Иначе
		КлючТекущейСтроки = Неопределено;
	КонецЕсли; 
	КлючевыеПоля = ЛксПолучитьМассивИзСтрокиСРазделителем(СтрокаКлюча, ",", Истина);
	Если ирНеглобальный.СтрокиРавныЛкс(ОсновнойРесурс, "Длительность") Тогда
		//
	КонецЕсли; 
	Для Каждого КлючевоеПоле Из КлючевыеПоля Цикл
		ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(Компоновщик.Настройки.Структура[0].ПоляГруппировки, КлючевоеПоле);
	КонецЦикла;
	Компоновщик.Настройки.Отбор.Элементы.Очистить();
	Если Не ЭтаФорма[ИмяСтраницы + "УчитыватьПустое"] Тогда
		ирНеглобальный.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, ГлавноеПоле, "", ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли; 
	Если Истина
		И ОтборСтрокаМодуля <> Неопределено
		И ОтборСтрокаМодуля <> ""
	Тогда
		ирНеглобальный.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "СтрокаМодуля", ОтборСтрокаМодуля,
			ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	Если Истина
		И ОтборТекстСУБД <> Неопределено
		И ОтборТекстСУБД <> ""
	Тогда
		ирНеглобальный.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ТекстСУБД", ПолучитьСтрокуОтбораТекстаСУБД(),
			ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	Если Истина
		И ОтборТекстSDBL <> Неопределено
		И ОтборТекстSDBL <> ""
	Тогда
		ирНеглобальный.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, "ТекстSDBL", ПолучитьСтрокуОтбораТекстаSDBL(), 
			ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	РежимОтладкиКомпоновки = Ложь;
	ТаблицаИтогов = ирНеглобальный.СкомпоноватьВКоллекциюЗначенийПоСхемеЛкс(мСхемаКомпоновки, Компоновщик.Настройки, , мВнешниеНаборыДанных,
		, , , , РежимОтладкиКомпоновки);
	ЭтаФорма[ПанельИтоги.ТекущаяСтраница.Имя] = ТаблицаИтогов;
	//// Удаляем строку с пустым ключом
	//СтрокаПустогоКлюча = ТаблицаИтогов.Найти("", КлючевоеПоле);
	//Если СтрокаПустогоКлюча <> Неопределено Тогда
	//	ТаблицаИтогов.Удалить(СтрокаПустогоКлюча);
	//КонецЕсли; 
	//ИтогРесурса = ТаблицаИтогов.Итог(ОсновнойРесурс);
	//Если ИтогРесурса > 0 Тогда
	//	Для Каждого СтрокаИтогов Из ТаблицаИтогов Цикл
	//		СтрокаИтогов.Вес = СтрокаИтогов[ОсновнойРесурс] * 100 / ИтогРесурса;
	//	КонецЦикла; 
	//КонецЕсли; 
	Если КлючТекущейСтроки <> Неопределено Тогда
		НайденныеСтроки = ТаблицаИтогов.НайтиСтроки(КлючТекущейСтроки);
	Иначе
		НайденныеСтроки = Новый Массив();
	КонецЕсли; 
	Если НайденныеСтроки.Количество() = 0 Тогда
		НайденныеСтроки = ТаблицаИтогов;
	КонецЕсли;
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТабличноеПолеИтогов.ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли; 
	ТабличноеПолеИтогов.Колонки.Инфобаза.Видимость = ВключатьВИтогиИнфобазу;
	ПанельИтоги.ТекущаяСтраница.Значение.Рассчитаны = Истина;
	Возврат Неопределено;

КонецФункции

Процедура КоманднаяПанельЖурналРегистрацииЗагрузить(Кнопка)
	
	ОбновитьТаблицуЖурнала();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	//КлиентЗапущенНаКомпьютереСервера = ирНеглобальный.ЛиКлиентЗапущенНаКомпьютереСервераЛкс();
	//Если Не КлиентЗапущенНаКомпьютереСервера Тогда
	//	ЭтотОбъект.ЗагружатьЖурналСервера = Ложь;
	//КонецЕсли; 
	Для Каждого МетаРеквизит Из Метаданные().ТабличныеЧасти.ТаблицаЖурнала.Реквизиты Цикл
		ИмяРеквизита = МетаРеквизит.Имя;
		СтрокаСвойстваСобытия = ПолучитьСтрокуОписанияСвойстваПоМестномуИмени(ИмяРеквизита);
		Если СтрокаСвойстваСобытия <> Неопределено Тогда
			Подсказка = СтрокаСвойстваСобытия.Имя + " - " + СтрокаСвойстваСобытия.Описание;
			Если ИмяРеквизита <> МетаРеквизит.Имя Тогда
				Подсказка = Подсказка + " в терминах метаданных";
			КонецЕсли; 
			ЭлементыФормы.ТаблицаЖурнала.Колонки[МетаРеквизит.Имя].ПодсказкаВШапке = Подсказка;
		КонецЕсли; 
	КонецЦикла; 
	КоличествоСтрокЖурнала = ТаблицаЖурнала.Количество();
	Если ЗначениеЗаполнено(мТипСУБД) Тогда
		УстановитьТипСУБДВТекстахШапокКолонок();
	КонецЕсли;
	
	ОбновитьСпискиВыбораПолейСортировки();
	
	ОсновнойАнализТехножурнала = ирКэш.ПолучитьАнализТехножурналаЛкс();
	Если ОсновнойАнализТехножурнала <> ЭтотОбъект Тогда
		Если ЗначениеЗаполнено(ОсновнойАнализТехножурнала.КонецПериодаКлиента) Тогда
			Ответ = Вопрос("Обнаружена доступная для анализа трасса. Хотите загрузить ее?",
				РежимДиалогаВопрос.ДаНет, 20, КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОсновнойАнализТехножурнала,
					"НачалоПериодаКлиента, НачалоПериодаСервера, КонецПериодаКлиента, КонецПериодаСервера, мИдентификаторТрассы");
				ПоказатьТрассу();
			КонецЕсли; 
			ОсновнойАнализТехножурнала.КонецПериодаКлиента = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	ОтборТипВыраженияSDBLПриИзменении();
	ОбновитьДоступность();

КонецПроцедуры

Процедура ОбновитьСпискиВыбораПолейСортировки()

	Для Каждого СтраницаИтогов Из ЭлементыФормы.ПанельИтоги.Страницы Цикл
		ИмяСтраницы = СтраницаИтогов.Имя;
		Для Счетчик = 1 По мЧислоПолейПорядка Цикл
			ПолеСортировки = ЭтаФорма[ИмяСтраницы + "ПолеСортировки" + Счетчик];
			Если ЗначениеЗаполнено(ПолеСортировки) Тогда
				ЭлементПорядка = ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(Компоновщик.Настройки.Порядок, ПолеСортировки);
				ВозрастаниеСортировки = ЭтаФорма[ИмяСтраницы + "НаправлениеСортировки" + Счетчик];
				Если Не ВозрастаниеСортировки Тогда
					ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв;
				КонецЕсли; 
			КонецЕсли; 
			ПолеВвода = ЭлементыФормы[ИмяСтраницы + "ПолеСортировки" + Счетчик];
			СписокВыбора = ПолеВвода.СписокВыбора;
			#Если _ Тогда
			    СписокВыбора = Новый СписокЗначений
			#КонецЕсли
			СписокВыбора.Очистить();
			Для Каждого КолонкаТП Из ЭлементыФормы[ЭлементыФормы.ПанельИтоги.ТекущаяСтраница.Имя].Колонки Цикл
				//Если Истина
				//	И Не ВключатьВИтогиИнфобазу 
				//	И ирНеглобальный.СтрокиРавныЛкс(КолонкаТП.Данные, "Инфобаза")
				//Тогда
				//	Продолжить;
				//КонецЕсли; 
				Если ЗначениеЗаполнено(КолонкаТП.Данные) Тогда
					СписокВыбора.Добавить(КолонкаТП.Данные, КолонкаТП.ТекстШапки);
				КонецЕсли; 
			КонецЦикла;
			СписокВыбора.СортироватьПоПредставлению();
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция УстановитьВидимостьКолонок(ТабличноеПоле = Неопределено, РазрешитьКолонкиБезПараметров = Ложь)

	Если ТабличноеПоле = Неопределено Тогда
		ТабличноеПоле = ЭлементыФормы.ТаблицаЖурнала;
	КонецЕсли; 
	Для Каждого КолонкаТП Из ТабличноеПоле.Колонки Цикл
		ИмяКолонкиДанных = КолонкаТП.Данные;
		Если Не ЗначениеЗаполнено(ИмяКолонкиДанных) Тогда
			ИмяКолонкиДанных = КолонкаТП.ДанныеФлажка;
		КонецЕсли; 
		Если Не ЗначениеЗаполнено(ИмяКолонкиДанных) Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаСвойстваСобытия = ПолучитьСтрокуОписанияСвойстваПоМестномуИмени(ИмяКолонкиДанных);
		Если Истина
			И Не РазрешитьКолонкиБезПараметров
			И ирНеглобальный.СтрокиРавныЛкс(ИмяКолонкиДанных, "ТекстБезПараметровSDBL")
		Тогда
			Продолжить;
		КонецЕсли; 
		НоваяВидимостьКолонки = Ложь
			Или СтрокаСвойстваСобытия = Неопределено
			Или мАктуальныеСвойства = Неопределено
			Или мАктуальныеСвойства.Свойство(СтрокаСвойстваСобытия.Имя);
		НоваяВидимостьКолонки = Истина
			И НоваяВидимостьКолонки
			И Не мБесполезныеКолонки.Свойство(ИмяКолонкиДанных);
		Если мСвойстваСИменамиБД.Найти(ИмяКолонкиДанных) <> Неопределено Тогда
			Если ИмяКолонкиДанных = КолонкаТП.Данные Тогда
				НоваяВидимостьКолонки = Истина
					И НоваяВидимостьКолонки
					И СвойстваВоВнутреннихИменах;
			Иначе // Мета
				НоваяВидимостьКолонки = Истина
					И НоваяВидимостьКолонки
					И ВключитьСвойстваСИменамиМетаданных;
			КонецЕсли; 
		ИначеЕсли Истина
			И НоваяВидимостьКолонки
			И Не мИзмененныеВидимостиКолонок.Свойство(КолонкаТП.Имя)
		Тогда
			Продолжить;
		КонецЕсли; 
		Если НоваяВидимостьКолонки <> КолонкаТП.Видимость Тогда
			КолонкаТП.Видимость = НоваяВидимостьКолонки;
			мИзмененныеВидимостиКолонок.Вставить(КолонкаТП.Имя);
		КонецЕсли; 
	КонецЦикла;
	Если БазовыйУровеньСтека > 0 Тогда
		ЭлементыФормы.ТаблицаЖурнала.Колонки.СтрокаМодуляБазовогоУровня.Видимость = ЭлементыФормы.ТаблицаЖурнала.Колонки.СтрокаМодуля.Видимость;
	КонецЕсли; 
	Возврат Неопределено;

КонецФункции

Процедура УстановитьБесполезныеКолонки(БесполезныеКолонкиТрассы = Неопределено, ПроцентПустотыДляОтключенияКолонки = 0) Экспорт
	
	мБесполезныеКолонки = Новый Структура();
	Если ирКэш.ЭтоФайловаяБазаЛкс() Тогда
		мБесполезныеКолонки.Вставить("НаСервере");
	КонецЕсли; 
	Если ЭтоТрасса Тогда
		мБесполезныеКолонки.Вставить("Пользователь");
		мБесполезныеКолонки.Вставить("Сеанс");
		мБесполезныеКолонки.Вставить("Инфобаза");
		мБесполезныеКолонки.Вставить("Компьютер");
		Если ирКэш.ЭтоФайловаяБазаЛкс() Тогда
			мБесполезныеКолонки.Вставить("ТипПроцессаОС");
			мБесполезныеКолонки.Вставить("ПроцессОС");
		Иначе
		КонецЕсли; 
	КонецЕсли; 
	КоличествоСтрокЖурнала = ТаблицаЖурнала.Количество();
	Если КоличествоСтрокЖурнала = 0 Тогда
		Возврат;
	КонецЕсли; 
	РеквизитыТаблицы = Метаданные().ТабличныеЧасти.ТаблицаЖурнала.Реквизиты;
	Если БесполезныеКолонкиТрассы <> Неопределено Тогда
		Если ТипЗнч(БесполезныеКолонкиТрассы) = Тип("Строка") Тогда
			мБесполезныеКолонкиТрассы = ЛксПолучитьМассивИзСтрокиСРазделителем(БесполезныеКолонкиТрассы, ",", Истина, Ложь);
		Иначе
			мБесполезныеКолонкиТрассы = БесполезныеКолонкиТрассы;
		КонецЕсли; 
	КонецЕсли; 
	Если мБесполезныеКолонкиТрассы <> Неопределено Тогда
		Для Каждого ИмяКолонки Из мБесполезныеКолонкиТрассы Цикл
			мБесполезныеКолонки.Вставить(ИмяКолонки);
		КонецЦикла;
	КонецЕсли; 
	Для Каждого Колонка Из ЭлементыФормы.ТаблицаЖурнала.Колонки Цикл
		Если Ложь
			Или Не ЗначениеЗаполнено(Колонка.Данные)
			Или мТаблицаКолонок.Найти(Колонка.Данные, "ИмяВТаблице") = Неопределено
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "Контекст")
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "МоментВремени")
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "Событие")
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "ТипПроцессаОС")
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "НаСервере") // Булево
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "ТекстБезПараметровSDBL")
			Или ирНеглобальный.СтрокиРавныЛкс(Колонка.Данные, "ТекстБезПараметровSDBLМета")
			Или мБесполезныеКолонки.Свойство(Колонка.Данные)
		Тогда
			Продолжить;
		КонецЕсли; 
		//СтруктураОтбора = Новый Структура(Колонка.Данные, РеквизитыТаблицы[Колонка.Данные].Тип.ПривестиЗначение());
		//КоличествоПустых = ТаблицаЖурнала.НайтиСтроки(СтруктураОтбора).Количество();
		////А1 = ЛксПолучитьТекущееВремяВМиллисекундах();
		//ПроцентПустоты = 100 * (1 - КоличествоПустых / КоличествоСтрокЖурнала);
		////Сообщить(Колонка.Данные + "-" + (ЛксПолучитьТекущееВремяВМиллисекундах() - А1));
		//Если ПроцентПустоты <= ПроцентПустотыДляОтключенияКолонки Тогда
		//	мБесполезныеКолонки.Вставить(Колонка.Данные);
		//КонецЕсли; 
		Если Не мНепустыеКолонкиЖурнала.Свойство(Колонка.Данные) Тогда
			мБесполезныеКолонки.Вставить(Колонка.Данные);
		КонецЕсли; 
	КонецЦикла;
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

Процедура УстановитьТипСУБДВТекстахШапокКолонок()
	
	Колонки = ЭлементыФормы.ТаблицаЖурнала.Колонки;
	Колонки.ТекстСУБД.ТекстШапки = "Текст " + мТипСУБД;
	Колонки.ТекстСУБД.ТекстШапки = "Текст " + мТипСУБД + " мета";
	Колонки.ПланСУБД.ТекстШапки = "План " + мТипСУБД;
	Колонки.ПланСУБД.ТекстШапки = "План " + мТипСУБД + " мета";
	
КонецПроцедуры

// выхМестноеИмя - Строка, из имени удаляется окончание "мета" если присутствует
Функция ПолучитьСтрокуОписанияСвойстваПоМестномуИмени(выхМестноеИмя)
	
	выхМестноеИмя = ПолучитьИмяСвойстваБезМета(выхМестноеИмя);
	СтрокаВнутреннегоИмени = мТаблицаКолонок.Найти(выхМестноеИмя, "ИмяВТаблице");
	Если СтрокаВнутреннегоИмени <> Неопределено Тогда
		СтрокаСвойстваСобытия = мСвойстваСобытий.Найти(НРег(СтрЗаменить(СтрокаВнутреннегоИмени.ВнутреннееИмя, ":", "_")), "НИмя");
	КонецЕсли; 
	Возврат СтрокаСвойстваСобытия;
	
КонецФункции

Процедура ВыбратьДатуИзСписка(Элемент, СтандартнаяОбработка, Знач ПарнаяДата, Знак)
	
	СимволЗнака = ?(Знак = 1, "+", "-");
	ИмяПарнойДаты = ?(Знак = 1, "Начало", "Конец");
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(1*60,          ИмяПарнойДаты + " " + СимволЗнака + " 1 минута");
	СписокВыбора.Добавить(10*60,       ИмяПарнойДаты + " " + СимволЗнака + " 10 минут");
	СписокВыбора.Добавить(2*60*60,       ИмяПарнойДаты + " " + СимволЗнака + " 2 часа");
	СписокВыбора.Добавить(1*24*60*60,    ИмяПарнойДаты + " " + СимволЗнака + " 1 день");
	СписокВыбора.Добавить(7*24*60*60,    ИмяПарнойДаты + " " + СимволЗнака + " 7 дней");
	СписокВыбора.Добавить(30*24*60*60,   ИмяПарнойДаты + " " + СимволЗнака + " 30 дней");
	РезультатВыбора = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	Если РезультатВыбора <> Неопределено Тогда
		Если Знак = -1 Тогда
			Если Не ЗначениеЗаполнено(ПарнаяДата) Тогда
				ПарнаяДата = ТекущаяДата();
			КонецЕсли; 
		КонецЕсли; 
		Элемент.Значение = ПарнаяДата + Знак * РезультатВыбора.Значение;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура КонецПериодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьДатуИзСписка(Элемент, СтандартнаяОбработка, НачалоПериода, 1);
	
КонецПроцедуры

Процедура НачалоПериодаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ВыбратьДатуИзСписка(Элемент, СтандартнаяОбработка, КонецПериода, -1);

КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииКонсольКомпоновки(Кнопка)
	
	СхемаКомпоновки = мСхемаКомпоновки;
	ВнешниеНаборыДанных = мВнешниеНаборыДанных;
	Если Не ИтогиВключены Тогда
		НастройкаКомпоновки = Новый НастройкиКомпоновкиДанных;
		ТабличноеПоле = ЭлементыФормы.ТаблицаЖурнала;
	Иначе
		НастройкаКомпоновки = Компоновщик.Настройки;
		НастройкаКомпоновки.Выбор.Элементы.Очистить();
		ИмяСтраницы = ЭлементыФормы.ПанельИтоги.ТекущаяСтраница.Имя;
		ТабличноеПоле = ЭлементыФормы[ИмяСтраницы];
	КонецЕсли;
	Отчеты.ирКонсольКомпоновокДанных.Создать().ОткрытьПоТабличномуПолю(ТабличноеПоле, СхемаКомпоновки, НастройкаКомпоновки, ВнешниеНаборыДанных);
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииОтборБезЗначенияВТекущейКолонке(Кнопка)
	
	ирНеглобальный.ТабличноеПоле_ОтборБезЗначенияВТекущейКолонке_КнопкаЛкс(ЭлементыФормы.ТаблицаЖурнала);
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииОткрытьМенеджерТабличногоПоля(Кнопка)
	
	Обработки.ирМенеджерТабличногоПоля.ПолучитьФорму(, ЭтаФорма, ).УстановитьСвязь(ЭлементыФормы.ТаблицаЖурнала);
	
КонецПроцедуры

Процедура КП_СписокОПодсистеме(Кнопка)
	
	ЛксОткрытьСправкуПоПодсистеме(ЭтотОбъект);

КонецПроцедуры

Процедура КаталогЖурналаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеФайловогоКаталога_НачалоВыбораЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КаталогЖурналаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура КаталогЖурналаПриИзменении(Элемент)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура КаталогЖурналаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

Процедура ДействияФормыОчиститьКаталогЖурнала(Кнопка)
	
	ирНеглобальный.ОчиститьКаталогЖурналаЛкс(КаталогЖурнала);
	
КонецПроцедуры

Процедура ДействияФормыНастройкаЖурнала(Кнопка)
	
	ФормаНастройки = Обработки.ирНастройкаТехножурнала.ПолучитьФорму();
	ФормаНастройки.Открыть();
	СтрокаКаталога = ФормаНастройки.ТабличноеПолеЖурналы.Найти(КаталогЖурнала, "Местоположение");
	Если СтрокаКаталога = Неопределено Тогда
		//Сообщить("Настройка каталога анализа не найдена в рабочей настройке техножурнала");
	Иначе
		ФормаНастройки.ЭлементыФормы.ТабличноеПолеЖурналы.ТекущаяСтрока = СтрокаКаталога;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Если Не ЭтоТрасса Тогда
		СвойстваВТерминахМетаданныхПриИзменении();
		ИтогиВключеныПриИзменении();
	КонецЕсли; 
	Если ирКэш.ЭтоФайловаяБазаЛкс() Тогда
		ЭтотОбъект.ЗагружатьЖурналСервера = Ложь;
	КонецЕсли; 
	ЗагружатьЖурналКлиентаСервераПриИзменении();
	
	//ОбновитьДоступность();
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииНастройкаСобытия(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока;
	ФормаНастройки = Обработки.ирНастройкаТехножурнала.ПолучитьФорму();
	ФормаНастройки.Открыть();
	Если ТекущаяСтрока <> Неопределено Тогда
		ФормаНастройки.НаСервере = ТекущаяСтрока.НаСервере;
		ФормаНастройки.ПриИзмененииПравилаПолученияФайлаНастройки();
	КонецЕсли; 
	СтрокаКаталога = ФормаНастройки.ТабличноеПолеЖурналы.Найти(КаталогЖурнала, "Местоположение");
	Если СтрокаКаталога = Неопределено Тогда
		Сообщить("Настройка каталога анализа не найдена в рабочей настройке техножурнала");
	Иначе
		ФормаНастройки.ЭлементыФормы.ТабличноеПолеЖурналы.ТекущаяСтрока = СтрокаКаталога;
		ФормаЖурнала = ФормаНастройки.ОткрытьФормуРедактированияЖурнала();
		ФормаЖурнала.Открыть();
		Если ТекущаяСтрока <> Неопределено Тогда
			ФормаЖурнала.УстановитьТекущуюСтрокуСобытия(ТекущаяСтрока.Событие);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииОчистить(Кнопка)
	
	Ответ = Вопрос("Вы уверены что хотите очистить таблицу журнала?", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ОчиститьТаблицы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТаблицы()
	
	ОчиститьТаблицуЖурнала();
	Для Каждого Страница Из ЭлементыФормы.ПанельИтоги.Страницы Цикл
		ЭтаФорма[Страница.Имя].Очистить();
		Страница.Значение.Рассчитаны = Истина;
	КонецЦикла;
	ЭтаФорма.КоличествоСтрокЖурнала = 0;
	//ЭтотОбъект.ПоследнееВремяНачалаЗагрузки = Неопределено;
	//ЭтотОбъект.ПоследнееВремяНачалаЗагрузкиСервера = Неопределено;
	//ЭтотОбъект.МинимальнаяДатаЗагрузки = ТекущаяДата() + 100000;

КонецПроцедуры

Процедура ОбновитьСвойстваВТерминахМетаданныхВФорме()
	
	Для Каждого СтрокаЗапроса Из ТекстыSDBL Цикл
		ЗаполнитьСвойстваСИменамиМетаданных(СтрокаЗапроса);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвойстваВТерминахМетаданныхПриИзменении(Элемент = Неопределено)
	
	Если ВключитьСвойстваСИменамиМетаданных Тогда
		ОбновитьСвойстваВТерминахМетаданных();
		ОбновитьСвойстваВТерминахМетаданныхВФорме();
	КонецЕсли; 
	УстановитьВидимостьКолонок();
	УстановитьВидимостьКолонок(ЭлементыФормы.ТекстыSDBL, Истина);
	
КонецПроцедуры

Процедура АвтообновлениеПриИзменении(Элемент = Неопределено)
	
	Если Автообновление = 0 Тогда
		ОтключитьОбработчикОжидания("ОбновитьТаблицуЖурнала");
	Иначе
		ОбновитьТаблицуЖурнала();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПанельИтогиПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено)
	
	ОбновитьИтоги();
	ПриАктивизацииСтрокиИтогов();
	
КонецПроцедуры

Функция ПолучитьСтруктуруКлючаИтогов()
	
	ПанельИтоги = ЭлементыФормы.ПанельИтоги;
	СтруктуруКлюча = ПанельИтоги.ТекущаяСтраница.Значение.Группировка;
	Если ПанельИтоги.Страницы.ТекстыSDBL = ПанельИтоги.ТекущаяСтраница Тогда 
		СтруктуруКлюча = "ТекстБезПараметровSDBL";
		//Если ВключитьСвойстваСИменамиМетаданных Тогда
		//	СтруктуруКлюча = СтруктуруКлюча + "Мета";
		//КонецЕсли; 
	КонецЕсли; 
	Возврат СтруктуруКлюча;
	
КонецФункции

Процедура ПриАктивизацииСтрокиИтогов(Элемент = Неопределено)
	
	мАктуальныеСвойства = Неопределено;
	Если ИтогиВключены Тогда
		ПанельИтоги = ЭлементыФормы.ПанельИтоги;
		СтруктуруКлюча = ПолучитьСтруктуруКлючаИтогов();
		КлючСтроки = Новый Структура(СтруктуруКлюча);
		Если ВключатьВИтогиИнфобазу Тогда
			КлючСтроки.Вставить("Инфобаза");
		КонецЕсли; 
		ТекущаяСтрока = ЭлементыФормы[ПанельИтоги.ТекущаяСтраница.Имя].ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КлючСтроки, ТекущаяСтрока);
			ОтборТаблицыЖурнала = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок;
			ОтборТаблицыЖурнала.Сбросить();
			Для Каждого КлючИЗначение Из КлючСтроки Цикл
				ЭлементОтбора = ОтборТаблицыЖурнала[КлючИЗначение.Ключ];
				ЭлементОтбора.Установить(КлючИЗначение.Значение);
				УстановитьВидСравненияНаРавенство(ЭлементОтбора);
				ЭлементыФормы.ТаблицаЖурнала.Колонки[КлючИЗначение.Ключ].Видимость = Ложь;
				мИзмененныеВидимостиКолонок.Вставить(КлючИЗначение.Ключ);
			КонецЦикла;
			
			// специальный отбор по событию
			СкрытьКолонкиПоСобытию = "";
			СкрытьКолонкуСобытия = Истина;
			Если ПанельИтоги.ТекущаяСтраница = ПанельИтоги.Страницы.События Тогда
				СкрытьКолонкиПоСобытию = ТекущаяСтрока.Событие;
			ИначеЕсли ПанельИтоги.ТекущаяСтраница = ПанельИтоги.Страницы.ТекстыSDBL Тогда
				СкрытьКолонкиПоСобытию = "SDBL";
			ИначеЕсли ПанельИтоги.ТекущаяСтраница = ПанельИтоги.Страницы.Описания Тогда
				СкрытьКолонкиПоСобытию = "EXCP";
				СкрытьКолонкуСобытия = Ложь;
			КонецЕсли; 
			СкрытьКолонкиПоСобытию(СкрытьКолонкиПоСобытию, СкрытьКолонкуСобытия);
		Иначе
			ТаблицаИтогов = ЭлементыФормы[ПанельИтоги.ТекущаяСтраница.Имя].Значение;
			Если ТаблицаИтогов.Количество() > 0 Тогда
				ЭлементыФормы[ПанельИтоги.ТекущаяСтраница.Имя].ТекущаяСтрока = ТаблицаИтогов[0];
				Возврат;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

Процедура СкрытьКолонкиПоСобытию(СкрытьКолонкиПоСобытию = "<ALL>", СкрытьКолонкуСобытия = Истина)

	Если ЗначениеЗаполнено(СкрытьКолонкиПоСобытию) Тогда
		Если ирНеглобальный.СтрокиРавныЛкс(СкрытьКолонкиПоСобытию, "<ALL>") Тогда
		Иначе
			СтрокаСобытия = мСоставСвойствСобытий.Найти(СкрытьКолонкиПоСобытию, "Event");
			Если СтрокаСобытия <> Неопределено Тогда
				мАктуальныеСвойства = Новый Структура;
				Для Каждого Колонка Из мСоставСвойствСобытий.Колонки Цикл
					Если СтрокаСобытия[Колонка.Имя] = "+" Тогда
						мАктуальныеСвойства.Вставить(Колонка.Имя);
					КонецЕсли; 
				КонецЦикла;
				Если СкрытьКолонкуСобытия Тогда
					мАктуальныеСвойства.Удалить("Name");
				КонецЕсли; 
			Иначе
				// событие - CONTEXT
				мАктуальныеСвойства = Неопределено;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Функция УстановитьВидСравненияНаРавенство(ЭлементОтбора)

	Если Истина
		И ЭлементОтбора.ТипЗначения.СодержитТип(Тип("Строка"))
		И ЭлементОтбора.ТипЗначения.КвалификаторыСтроки.Длина = 0 
	Тогда
		Если ЭлементОтбора.Значение <> "" Тогда
			ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравнения.НеСодержит;
		КонецЕсли; 
	Иначе
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
	КонецЕсли; 
	Возврат Неопределено;

КонецФункции

Функция УстановитьВидСравненияНаНеРавенство(ЭлементОтбора)

	Если Истина
		И ЭлементОтбора.ТипЗначения.СодержитТип(Тип("Строка"))
		И ЭлементОтбора.ТипЗначения.КвалификаторыСтроки.Длина = 0 
	Тогда
		Если ЭлементОтбора.Значение = "" Тогда
			ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравнения.НеСодержит;
		КонецЕсли; 
	Иначе
		ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	КонецЕсли; 
	Возврат Неопределено;

КонецФункции

Процедура ИтогиВключеныПриИзменении(Элемент = Неопределено) Экспорт
	
	ЛксИзменитьСвернутость(ИтогиВключены, ЭлементыФормы.ПанельИтоги, ЭтаФорма.ЭлементыФормы.гРазделительИтогиЖурнал, ЭтаФорма.Панель, "верх");
	Если Не ИтогиВключены Тогда
		мАктуальныеСвойства = Неопределено;
		ОтборТаблицыЖурнала = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок;
		ОтборТаблицыЖурнала.Сбросить();
		УстановитьБесполезныеКолонки(, 1);
	Иначе
		УстановитьБесполезныеКолонки(, 0);
		ПанельИтогиПриСменеСтраницы();
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельЖурналРегистрации.Кнопки.ПоказыватьПанельИтогов.Пометка = ИтогиВключены;

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не Отказ Тогда
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ПанельИтоги, ЭтаФорма.ЭлементыФормы.гРазделительИтогиЖурнал, ЭтаФорма.Панель, "верх");
		ЛксИзменитьСвернутость(Истина, ЭлементыФормы.ПанельСвойств, ЭтаФорма.ЭлементыФормы.гРазделительЖурналСвойства, ЭтаФорма.Панель, "низ");
		Для Каждого ИмяКолонки Из мИзмененныеВидимостиКолонок Цикл
			КолонкаТП = ЭлементыФормы.ТаблицаЖурнала.Колонки.Найти(ИмяКолонки);
			Если КолонкаТП <> Неопределено Тогда
				КолонкаТП.Видимость = Истина;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

Процедура _СброситьВидимостьВсехНепустыхКолонок()
	
	//Для Каждого КолонкаТП Из ЭлементыФормы.ТаблицаЖурнала.Колонки Цикл
	//	Если Ложь
	//		Или КолонкаТП.Данные = "ТекстБезПараметровSDBL"
	//		Или КолонкаТП.Данные = "ТекстБезПараметровSDBLМета"
	//		//Или КолонкаТП.Данные = "Контекст"
	//		//Или КолонкаТП.Данные = "МоментВремени"
	//	Тогда
	//		Продолжить;
	//	КонецЕсли; 
	//	КолонкаТП.Видимость = Истина;
	//КонецЦикла;

КонецПроцедуры

Процедура ПериодПоследниеМинутыПриИзменении(Элемент)
	
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура ОбновитьДоступность() Экспорт
	
	ДоступностьПериода = ПериодПоследниеМинуты = 0;
	ЭлементыФормы.НачалоПериода.Доступность = ДоступностьПериода;
	ЭлементыФормы.КонецПериода.Доступность = ДоступностьПериода;
	ЭлементыФормы.КнопкаВыбораПериода.Доступность = ДоступностьПериода;
	ЭлементыФормы.ЭтоТрасса.Доступность = ЭтоТрасса;
	ЭлементыФормы.ЗагружатьЖурналСервера.Доступность = Истина
		И Не ирКэш.Получить().ЭтоФайловаяБаза
		//И ЗагружатьТолькоТекущийСеанс
		//И КлиентЗапущенНаКомпьютереСервера
		;
	ЭлементыФормы.КаталогЖурнала.Доступность = Истина
		И Не ЗагружатьЖурналКлиента
		И Не ЗагружатьЖурналСервера;
	ЭлементыФормы.ТекущийСеанс.Доступность = Ложь
		Или ЗагружатьЖурналКлиента
		Или ЗагружатьЖурналСервера;
	УстановитьВидимостьКолонок();
	
КонецПроцедуры

Процедура ЭтоТрассировкаПриИзменении(Элемент)
	
	Если Не ЭтоТрасса Тогда
		мБесполезныеКолонкиТрассы = Неопределено;
	КонецЕсли; 
	УстановитьБесполезныеКолонки();
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииУстановитьХронологическийПорядок(Кнопка)
	
	ТаблицаЖурнала.Сортировать("МоментВремени");
	
КонецПроцедуры

Процедура ДействияФормыНастройкаЧтение(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("НастройкаЧтения");
	ФормаНастройки.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыТрасса(Кнопка)
	
	Если Не Кнопка.Пометка Тогда
		Если НачатьТрассу(, Истина) Тогда
			Кнопка.Пометка = Не Кнопка.Пометка;
		КонецЕсли; 
	Иначе
		Кнопка.Пометка = Не Кнопка.Пометка;
		КончитьТрассу();
		ПоказатьТрассу();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииОткрытьСтрокуВОтдельномОкне(Кнопка = Неопределено)
	
	//ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока;
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	ФормаСобытия = ПолучитьФорму("ФормаСобытия", , ВыбраннаяСтрока.МоментВремени);
	ЗначенияСвойств = ФормаСобытия.ЗначенияСвойств;
	ЗначенияСвойств.Очистить();
	ОбработкаНастройкиЖурнала = Обработки.ирНастройкаТехножурнала.Создать();
	СписокСобытий = ОбработкаНастройкиЖурнала.ПолучитьСписокСобытий();
	СписокДействий = ОбработкаНастройкиЖурнала.ПолучитьСписокДействий();
	ЗаполнитьСвойстваСИменамиМетаданных(ВыбраннаяСтрока);
	Для Каждого МетаРеквизит Из Метаданные().ТабличныеЧасти.ТаблицаЖурнала.Реквизиты Цикл
		ЗначениеСвойства = ВыбраннаяСтрока[МетаРеквизит.Имя];
		Если Ложь
			Или Не ЗначениеЗаполнено(ЗначениеСвойства) 
		Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаСвойства = ЗначенияСвойств.Добавить();
		СтрокаСвойства.СвойствоСиноним = МетаРеквизит.Представление();
		СтрокаСвойства.ИмяВТаблице = МетаРеквизит.Имя;
		
		ОсновоеИмяРеквизита = МетаРеквизит.Имя;
		ОсновоеИмяРеквизита = ПолучитьИмяСвойстваБезМета(ОсновоеИмяРеквизита);
		СтрокаВнутреннегоИмени = мТаблицаКолонок.Найти(ОсновоеИмяРеквизита, "ИмяВТаблице");
		Если ЗначениеЗаполнено(СтрокаВнутреннегоИмени) Тогда
			СтрокаСвойства.СвойствоИмя = СтрокаВнутреннегоИмени.ВнутреннееИмя;
			СтрокаСвойстваСобытия = мСвойстваСобытий.Найти(НРег(СтрЗаменить(СтрокаСвойства.СвойствоИмя, ":", "_")), "НИмя");
			Если СтрокаСвойстваСобытия <> Неопределено Тогда
				СтрокаСвойства.ОписаниеСвойства = СтрокаСвойстваСобытия.Описание;
				Если ОсновоеИмяРеквизита <> МетаРеквизит.Имя Тогда
					СтрокаСвойства.ОписаниеСвойства = СтрокаСвойства.ОписаниеСвойства + " в терминах метаданных";
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		СтрокаСвойства.Значение = ЗначениеСвойства;
		Если ЭлементыФормы.ТаблицаЖурнала.ТекущаяКолонка.Данные = МетаРеквизит.Имя Тогда
			ТекущаяСтрокаСвойства = СтрокаСвойства;
		КонецЕсли;
		Если МетаРеквизит.Имя = "Событие" Тогда
			ОписаниеСобытия = СписокСобытий.НайтиПоЗначению(НРег(ВыбраннаяСтрока.Событие));
			Если ОписаниеСобытия <> Неопределено Тогда
				СтрокаСвойства = ЗначенияСвойств.Добавить();
				СтрокаСвойства.СвойствоСиноним = "Событие (описание)";
				СтрокаСвойства.Значение = ОписаниеСобытия.Представление;
			КонецЕсли; 
		КонецЕсли; 
		Если МетаРеквизит.Имя = "Действие" Тогда
			ОписаниеДействия = СписокДействий.НайтиПоЗначению(НРег(ВыбраннаяСтрока.Действие));
			Если ОписаниеДействия <> Неопределено Тогда
				СтрокаСвойства = ЗначенияСвойств.Добавить();
				СтрокаСвойства.СвойствоСиноним = "Действие (описание)";
				СтрокаСвойства.Значение = ОписаниеДействия.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ФормаСобытия.Заголовок = "Событие " + ВыбраннаяСтрока.Событие + " " + Формат(ВыбраннаяСтрока.МоментВремени, "ЧГ=");
	ФормаСобытия.Открыть();
	Если ТекущаяСтрокаСвойства <> Неопределено Тогда
		ФормаСобытия.ЭлементыФормы.ЗначенияСвойств.ТекущаяСтрока = ТекущаяСтрокаСвойства;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗагружатьЖурналКлиентаСервераПриИзменении(Элемент = Неопределено)
	
	ОбновитьДоступность();
	Если Истина
		И Не ЗагружатьЖурналКлиента
		И Не ЗагружатьЖурналСервера
	Тогда
		ЭтотОбъект.ЗагружатьТолькоТекущийСеанс = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТекущийСеансПриИзменении(Элемент)
	
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииТрассы(Кнопка)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЖурнала);
	ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить("Описание");
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Значение = "НачалоТрассы_";
	СтрокиНачалаТрасс = ПостроительЗапроса.Результат.Выгрузить();
	ЭлементОтбора.Значение = "КонецТрассы_";
	СтрокиКонцовТрасс = ПостроительЗапроса.Результат.Выгрузить();
	СтрокиНачалаТрасс.Свернуть("НаСервере, ПроцессОС, Сеанс, МоментВремени, Дата, Пользователь, Инфобаза, Описание");
	СтрокиНачалаТрасс.Колонки.Дата.Имя = "ДатаНачала";
	СтрокиНачалаТрасс.Колонки.МоментВремени.Имя = "МоментВремениНачала";
	СтрокиНачалаТрасс.Колонки.Добавить("ДатаКонца");
	СтрокиНачалаТрасс.Колонки.Добавить("МоментВремениКонца");
	RegExp = ирКэш.Получить().RegExp;
	RegExp.Pattern = "НачалоТрассы_([^_]*)_";
	Трассы.Очистить();
	Для Каждого СтрокаНачалаТрассы Из СтрокиНачалаТрасс Цикл
		CтрокаТрассы = Трассы.Добавить();
		ЗаполнитьЗначенияСвойств(CтрокаТрассы, СтрокаНачалаТрассы); 
		Вхождения = RegExp.Execute(СтрокаНачалаТрассы.Описание);
		Если Вхождения.Count > 0 Тогда
			CтрокаТрассы.Префикс = Вхождения.Item(0).SubMatches(0);
		КонецЕсли; 
		СтрокаКонцаТрассы = СтрокиКонцовТрасс.Найти(СтрЗаменить(СтрокаНачалаТрассы.Описание, "НачалоТрассы", "КонецТрассы"), "Описание");
		Если СтрокаКонцаТрассы <> Неопределено Тогда
			CтрокаТрассы.ДатаКонца = СтрокаКонцаТрассы.Дата;
			CтрокаТрассы.МоментВремениКонца = СтрокаКонцаТрассы.МоментВремени;
		КонецЕсли; 
	КонецЦикла;
	ФормаВыбора = ПолучитьФорму("Трассы");
	РезультатФормы = ФормаВыбора.ОткрытьМодально();
	Если РезультатФормы <> Неопределено Тогда
		ЭтаФорма.ЭтоТрасса = Истина;
		ОбновитьДоступность();
		ОтборТаблицы = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок;
		ОтборТаблицы.Сеанс.Установить(РезультатФормы.Сеанс);
		ОтборТаблицы.ПроцессОС.Установить(РезультатФормы.ПроцессОС);
		ОтборТаблицы.НаСервере.Установить(РезультатФормы.НаСервере);
		ОтборТаблицы.Действие.Установить("getExecSQLStatistics");
		ОтборТаблицы.Действие.ВидСравнения = ВидСравнения.НеРавно;
		//ОтборТаблицы.Описание.Установить("Трассы_" + РезультатФормы.Префикс + "_");
		//ОтборТаблицы.Описание.ВидСравнения = ВидСравнения.НеСодержит;
		ОтборНачало = ОтборТаблицы.МоментВремени;
		ОтборНачало.Использование = Истина;
		Если ЗначениеЗаполнено(РезультатФормы.МоментВремениКонца) Тогда
			ОтборНачало.ВидСравнения = ВидСравнения.Интервал;
			ОтборНачало.ЗначениеС = РезультатФормы.МоментВремениНачала;
			ОтборНачало.ЗначениеПо = РезультатФормы.МоментВремениКонца;
		Иначе
			ОтборНачало.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			ОтборНачало.Значение = РезультатФормы.МоментВремениНачала;
		КонецЕсли; 
		УстановитьБесполезныеКолонки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ЛксОбновитьЗаголовкиСтраницПанелей(ЭтаФорма);
	
КонецПроцедуры

Процедура ОтборТекстSDBLНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ДействияФормыКонверторSDBLВЗапрос(Кнопка)
	
	Форма = ПолучитьФорму("КонверторВМета");
	Форма.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыЖурналРегистрации(Кнопка)
	
	АнализЖурналаРегистрации = Обработки.ирАнализЖурналаРегистрации.Создать();
	АнализЖурналаРегистрации.ОткрытьСОтбором(НачалоПериода, КонецПериода, Новый Структура("Сеанс", НомерСеансаИнформационнойБазы()), 1000);
	
КонецПроцедуры

Процедура БазовыйУровеньСтекаПриИзменении(Элемент)
	
	ОбновитьСтрокиБазовогоУровня();
	УстановитьВидимостьКолонок();
	УстановитьВидимостьКолонок(ЭлементыФормы.СтрокиМодулей, Истина);
	
КонецПроцедуры

Процедура ТаблицаДляПоискаПриИзменении(Элемент)
	
	ЭлементОтбора = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок.ТекстSDBL;
	Если СсылкаДляПоиска = Неопределено Тогда
		ЭлементОтбора.Использование = Ложь;
	Иначе
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		ЭлементОтбора.Значение = ПреобразоватьЗначениеВSDBL(СсылкаДляПоиска);
	КонецЕсли; 
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ТаблицаДляПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ТаблицаЖурналаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ЗаполнитьСвойстваСИменамиМетаданных(ТекущаяСтрока);
	КонецЕсли; 
	Для Каждого Страница Из ЭлементыФормы.ПанельСвойств.Страницы Цикл
		ЭлементУправления = ЭлементыФормы[Страница.Имя];
		Если ТекущаяСтрока = Неопределено Тогда
			ЗначениеПоля = Неопределено;
		Иначе
			ЗначениеПоля = ТекущаяСтрока[ЭлементУправления.Имя];
		КонецЕсли; 
		Если ТипЗнч(ЭлементУправления) = Тип("ПолеТекстовогоДокумента") Тогда
			ЭлементУправления.УстановитьТекст(ЗначениеПоля);
			Страница.Значение = 1;
		ИначеЕсли ТипЗнч(ЭлементУправления.Значение) = Тип("ДеревоЗначений") Тогда
			ЭлементУправления.Значение.Строки.Очистить();
			Страница.Значение = Неопределено;
		ИначеЕсли ТипЗнч(ЭлементУправления.Значение) = Тип("ТаблицаЗначений") Тогда
			ЭлементУправления.Значение.Очистить();
			Страница.Значение = Неопределено;
		КонецЕсли; 
	КонецЦикла;
	ОбновитьТекущуюСтраницуПанелиЭлемента();
	
КонецПроцедуры

Процедура ПанельТекущейСтрокиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущуюСтраницуПанелиЭлемента();
	
КонецПроцедуры

Процедура ОбновитьТекущуюСтраницуПанелиЭлемента()

	Если ЭлементыФормы.ПанельСвойств.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		Возврат;
	КонецЕсли; 
	ТекущаяСтрока = ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока;
	ТекущаяСтраница = ЭлементыФормы.ПанельСвойств.ТекущаяСтраница;
	ЭлементУправления = ЭлементыФормы[ТекущаяСтраница.Имя];
	Если ТипЗнч(ЭлементУправления) = Тип("ПолеТекстовогоДокумента") Тогда
		Возврат;
	КонецЕсли; 
	Если ТекущаяСтраница.Значение = Неопределено Тогда
		Если ТекущаяСтрока = Неопределено Тогда
			ЗначениеПоля = Неопределено;
		Иначе
			ЗначениеПоля = ТекущаяСтрока[ЭлементУправления.Имя];
		КонецЕсли; 
		Если ЭлементУправления = ЭлементыФормы.Контекст Тогда
			ОбновитьТаблицуКонтекста(ЗначениеПоля);
		КонецЕсли; 
		ТекущаяСтраница.Значение = 1;
	КонецЕсли; 
	Если ЭлементУправления = ЭлементыФормы.Контекст Тогда
		Если ЭлементыФормы.ТаблицаЖурнала.ТекущаяКолонка = ЭлементыФормы.ТаблицаЖурнала.Колонки.СтрокаМодуля Тогда
			Если Контекст.Количество() > 0 Тогда
				ЭлементыФормы.Контекст.ТекущаяСтрока = Контекст[Контекст.Количество() - 1];
			КонецЕсли; 
		ИначеЕсли ЭлементыФормы.ТаблицаЖурнала.ТекущаяКолонка = ЭлементыФормы.ТаблицаЖурнала.Колонки.СтрокаМодуляБазовогоУровня Тогда
			Если Контекст.Количество() >= БазовыйУровеньСтека Тогда
				ЭлементыФормы.Контекст.ТекущаяСтрока = Контекст[БазовыйУровеньСтека];
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьТекущуюСтраницуПанелиЭлемента()

Процедура ОбновитьТаблицуКонтекста(ЗначениеКонтекста)
	
	Контекст.Очистить();
	Если Не ЗначениеЗаполнено(ЗначениеКонтекста) Тогда
		Возврат;
	КонецЕсли; 
	ТекущаяСтрока = ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока;
	RegExp = ирКэш.Получить().RegExp;
	RegExp.Pattern = "\s*([^:\n]*)\:\s+(\d+)\s+:\s+([^:\n]*)(\n|$)";
	РезультатПоиска = RegExp.Execute(ЗначениеКонтекста);
	Уровень = 1;
	Для Каждого Вхождение Из РезультатПоиска Цикл
		СтрокаСтека = Контекст.Добавить();
		СтрокаСтека.Модуль = Вхождение.SubMatches(0);
		СтрокаСтека.НомерСтроки = Число(Вхождение.SubMatches(1));
		СтрокаСтека.СтрокаМодуля = Вхождение.SubMatches(2);
		СтрокаСтека.Уровень = Уровень;
		Уровень = Уровень + 1;
	КонецЦикла;

КонецПроцедуры

Процедура ТаблицаЖурналаПриАктивизацииКолонки(Элемент)
	
	ТекущаяКолонка = ЭлементыФормы.ТаблицаЖурнала.ТекущаяКолонка;
	ТекущаяСтраница = ЭлементыФормы.ПанельСвойств.Страницы.Найти(ТекущаяКолонка.Данные);
	Если ТекущаяСтраница <> Неопределено Тогда
		ЭлементыФормы.ПанельСвойств.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииПоказыватьПанельСвойств(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛксИзменитьСвернутость(Кнопка.Пометка, ЭлементыФормы.ПанельСвойств, ЭтаФорма.ЭлементыФормы.гРазделительЖурналСвойства, ЭтаФорма.Панель, "низ");
	ОбновитьТекущуюСтраницуПанелиЭлемента();

КонецПроцедуры

Процедура КоманднаяПанельЖурналРегистрацииПоказыватьПанельИтогов(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭтаФорма.ИтогиВключены = Кнопка.Пометка;
	ИтогиВключеныПриИзменении();

КонецПроцедуры

Процедура ПриИзмененииПараметраИтогов(Элемент)
	
	ОбновитьИтоги(Истина);
	
КонецПроцедуры

Процедура ИтогиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.НомерСтроки.Значение = Элемент.Значение.Индекс(ДанныеСтроки) + 1;
	
КонецПроцедуры

Процедура ПриИзмененииСортировкиИтогов(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

Процедура ВключатьВИтогиИнфобазуПриИзменении(Элемент)
	
	УстановитьФлагПересчетаИтогов();
	//ОбновитьСпискиВыбораПолейСортировки();
	ОбновитьИтоги();
	
КонецПроцедуры

Процедура ДействияФормыСохранитьКак(Кнопка)
	
	СтруктураФайла = Новый Структура("ЭтоТрасса, ДанныеЖурнала", ЭтоТрасса, ТаблицаЖурнала.Выгрузить());
	ирНеглобальный.СохранитьЗначениеВФайлЛкс(СтруктураФайла, "tld", "Данные техножурнала 1С", Истина);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьФайл(Кнопка)
	
	СтруктураФайла = ирНеглобальный.ЗагрузитьЗначениеИзФайлаЛкс("tld", "Данные техножурнала 1С", Истина);
	Если СтруктураФайла = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Автообновление = 0;
	ЭтаФорма.ЭтоТрасса = СтруктураФайла.ЭтоТрасса;
	ТаблицаЖурнала.Загрузить(СтруктураФайла.ДанныеЖурнала);
	ПодготовитьФормуДляОтображенияНовыхДанных();
	
КонецПроцедуры

Процедура ОтборТекстSDBLПриИзменении(Элемент)
	
	ОбновитьИтоги(Истина);
	ЭлементОтбора = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок.ТекстSDBL;
	Если Ложь
		Или ОтборТекстSDBL = Неопределено 
		Или ОтборТекстSDBL = ""
	Тогда
		ЭлементОтбора.Использование = Ложь;
	Иначе
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		ЭлементОтбора.Значение = ПолучитьСтрокуОтбораТекстаSDBL();
	КонецЕсли; 
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ОтборСтрокаМодуляПриИзменении(Элемент)
	
	ОбновитьИтоги(Истина);
	ЭлементОтбора = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок.СтрокаМодуля;
	Если ОтборСтрокаМодуля = "" Тогда
		ЭлементОтбора.Использование = Ложь;
	Иначе
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		ЭлементОтбора.Значение = ОтборСтрокаМодуля;
	КонецЕсли; 
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Функция ПолучитьСтрокуОтбораТекстаСУБД()
	
	Если Ложь
		Или ОтборТекстСУБД = Неопределено 
		Или ОтборТекстСУБД = ""
	Тогда
		Результат = Неопределено;
	Иначе
		Результат = ОтборТекстСУБД;
		лРезультат = ПолучитьИмяТаблицыХраненияДляОтбора(Результат, Истина);
		Если лРезультат <> Неопределено Тогда
			Результат = лРезультат;
		КонецЕсли; 
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтрокуОтбораТекстаSDBL()
	
	Если Ложь
		Или ОтборТекстSDBL = Неопределено 
		Или ОтборТекстSDBL = ""
	Тогда
		Результат = Неопределено;
	Иначе
		Результат = ОтборТекстSDBL;
		Если ирНеглобальный.СтрокиРавныЛкс(ОтборТипВыраженияSDBL, "ИмяТаблицы") Тогда
			лРезультат = ПолучитьИмяТаблицыХраненияДляОтбора(Результат, Ложь);
			Если лРезультат <> Неопределено Тогда
				Результат = лРезультат;
			КонецЕсли; 
		Иначе
			Результат = ПреобразоватьЗначениеВSDBL(ОтборТекстSDBL)
		КонецЕсли; 
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяТаблицыХраненияДляОтбора(ОтборТекстSDBL, ЛиИменаБД)

	СтруктураБазыСУБД = ирКэш.ПолучитьСтруктуруХраненияБДЛкс(ЛиИменаБД);
	Фрагменты = ЛксПолучитьМассивИзСтрокиСРазделителем(ОтборТекстSDBL);
	//Если Фрагменты.Количество() > 1 Тогда
		//Назначение = Фрагменты[Фрагменты.Количество() - 1];
		//Фрагменты.Удалить(Фрагменты.Количество() - 1);
		Назначение = "Основная";
		ПолноеИмяМД = ЛксПолучитьСтрокуСРазделителемИзМассива(Фрагменты, ".");
		КлючПоиска = Новый Структура("Метаданные, Назначение", ПолноеИмяМД, Назначение);
		НайденныеСтроки = СтруктураБазыСУБД.НайтиСтроки(КлючПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Результат = НайденныеСтроки[0].ИмяТаблицыХранения;
		КонецЕсли; 
	//КонецЕсли; 

	Возврат Результат;

КонецФункции

Процедура ОтборТекстСУБДПриИзменении(Элемент)
	
	ОбновитьИтоги(Истина);
	ЭлементОтбора = ЭлементыФормы.ТаблицаЖурнала.ОтборСтрок.ТекстСУБД;
	Если Ложь
		Или ОтборТекстСУБД = Неопределено 
		Или ОтборТекстСУБД = ""
	Тогда
		ЭлементОтбора.Использование = Ложь;
	Иначе
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
		ЭлементОтбора.Значение = ПолучитьСтрокуОтбораТекстаСУБД();
	КонецЕсли; 
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ОтборТекстSDBLНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ирНеглобальный.СтрокиРавныЛкс(ОтборТипВыраженияSDBL, "ИмяТаблицы") Тогда
		СтандартнаяОбработка = Ложь;
		Форма = ирНеглобальный.ПолучитьФормуВыбораОбъектаМетаданныхЛкс(,, Элемент.Значение,, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
		РезультатВыбора = Форма.ОткрытьМодально();
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		ЛксИнтерактивноЗаписатьВЭлементУправления(Элемент, РезультатВыбора.ПолноеИмяОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборТекстСУБДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ирНеглобальный.ПолучитьФормуВыбораОбъектаМетаданныхЛкс(,, Элемент.Значение,, Истина, Истина, Истина, Истина, Истина, Истина, Истина);
	РезультатВыбора = Форма.ОткрытьМодально();
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЛксИнтерактивноЗаписатьВЭлементУправления(Элемент, РезультатВыбора.ПолноеИмяОбъекта);

КонецПроцедуры

Процедура ОтборТекстСУБДНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ОтборТипВыраженияSDBLПриИзменении(Элемент = Неопределено)
	
	Если ирНеглобальный.СтрокиРавныЛкс(ОтборТипВыраженияSDBL, "ИмяТаблицы") Тогда
		ЭлементыФормы.ОтборТекстSDBL.ОграничениеТипа = Новый ОписаниеТипов("Строка");
		ЭтаФорма.ОтборТекстSDBL = ЭлементыФормы.ОтборТекстSDBL.ОграничениеТипа.ПривестиЗначение(ЭтаФорма.ОтборТекстSDBL);
	Иначе
		ЭлементыФормы.ОтборТекстSDBL.ОграничениеТипа = Новый ОписаниеТипов();
		ЭтаФорма.ОтборТекстSDBL = Неопределено;
	КонецЕсли;
		
КонецПроцедуры

Процедура ТекстыSDBLВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекущаяСтрокаТаблицыЖурнала = ЭлементыФормы.ТаблицаЖурнала.ТекущаяСтрока;
	Если ТекущаяСтрокаТаблицыЖурнала = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИмяРеквизита = Колонка.Данные;
	ИмяСвойстваБезМета = ПолучитьИмяСвойстваБезМета(ИмяРеквизита);
	Если мСвойстваСИменамиБД.Найти(ИмяСвойстваБезМета) <> Неопределено Тогда
		ОткрытьРоднойТекстSDBL(ТекущаяСтрокаТаблицыЖурнала[Колонка.Данные], Не ирНеглобальный.СтрокиРавныЛкс(ИмяСвойстваБезМета, ИмяРеквизита),
			"" + ТекущаяСтрокаТаблицыЖурнала.МоментВремени + Колонка.Данные);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирНеглобальный.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

ирНеглобальный.ВстроитьКнопкиСтруктурыКоманднойПанелиЛкс(ЭтаФорма);

// Установим ключевые группировки для страниц итогов
ПанельИтоги = ЭлементыФормы.ПанельИтоги;
ПанельИтоги.Страницы.ТекстыSDBL.Значение = Новый Структура("Группировка, Рассчитаны", "ТекстБезПараметровSDBL, ТекстБезПараметровSDBLМета", Ложь);
ПанельИтоги.Страницы.СтрокиМодулей.Значение = Новый Структура("Группировка, Рассчитаны", "СтрокаМодуля", Ложь);
ПанельИтоги.Страницы.Пользователи.Значение = Новый Структура("Группировка, Рассчитаны", "Пользователь", Ложь);
ПанельИтоги.Страницы.Описания.Значение = Новый Структура("Группировка, Рассчитаны", "Описание", Ложь);
ПанельИтоги.Страницы.События.Значение = Новый Структура("Группировка, Рассчитаны", "Событие", Ложь);

МассивКолонокБезОтбора = Новый Массив;
МассивКолонокБезОтбора.Добавить("ПредставлениеПриложения");
МассивКолонокБезОтбора.Добавить("ПредставлениеСобытия");
МассивКолонокБезОтбора.Добавить("ИмяПользователя");
МассивКолонокБезОтбора.Добавить("Дата");
МассивКолонокБезОтбора.Добавить("Соединение");
МассивКолонокБезОтбора.Добавить("ПредставлениеМетаданных");

СписокВыбора = ЭлементыФормы.Автообновление.СписокВыбора;
СписокВыбора.Добавить(5);
СписокВыбора.Добавить(10);
СписокВыбора.Добавить(30);

СписокВыбора = ЭлементыФормы.ПериодПоследниеМинуты.СписокВыбора;
СписокВыбора.Добавить(5);
СписокВыбора.Добавить(10);
СписокВыбора.Добавить(30);
СписокВыбора.Добавить(60);
СписокВыбора.Добавить(120);
СписокВыбора.Добавить(360);

мИзмененныеВидимостиКолонок = Новый Структура();
мЧислоПолейПорядка = 2;
мВнешниеНаборыДанных = Новый Структура("Основной", ТаблицаЖурнала);
ОписаниеТехножурнала = Обработки.ирНастройкаТехножурнала.Создать();
мСоставСвойствСобытий = ОписаниеТехножурнала.ПолучитьСоставСвойствСобытий();
ОписаниеТехножурнала.ЗаполнитьСписокСвойствСобытий();
мСвойстваСобытий = ОписаниеТехножурнала.Свойства;
ЭтаФорма.ИтогиВключены = Истина;
ЭтаФорма.СобытияУчитыватьПустое = Истина;
СвойстваВоВнутреннихИменах = Истина;
ЭтаФорма.ОтборТипВыраженияSDBL = "ИмяТаблицы";
мБесполезныеКолонки = Новый Структура();
Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
	НачалоПериода = НачалоДня(ТекущаяДата());
КонецЕсли;

ЭтаФорма.СобытияПолеСортировки1 = "Количество";
ЭтаФорма.СтрокиМодулейПолеСортировки1 = "Длительность";
ЭтаФорма.ТекстыSDBLПолеСортировки1 = "Длительность";
ЭтаФорма.ПользователиПолеСортировки1 = "Длительность";
ЭтаФорма.ОписанияПолеСортировки1 = "Количество";
