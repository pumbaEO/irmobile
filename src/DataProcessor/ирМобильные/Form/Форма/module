// перед открытием формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = мНеПодключеныОбработки;
	
	//каждый раз будем сохранять с новым ключом, чтобы настройки не смогли восстановиться при следующим открытии
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	РазмерХ = 24;
	РазмерУ = 726;
	ШиринаПанели = 25;
	
	Если ЭтаФорма.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Верх ИЛИ ЭтаФорма.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Низ Тогда
		
		ЭлементыФормы.Удалить(ЭлементыФормы.КоманднаяПанельПравоЛево);
		ПанельКнопок = ЭлементыФормы.КоманднаяПанельВерхНиз;
		ЭтаФорма.Высота = ШиринаПанели;
		ПанельКнопок.Ширина = ЭтаФорма.Ширина - 10;
		
	Иначе
		
		ЭлементыФормы.Удалить(ЭлементыФормы.КоманднаяПанельВерхНиз);
		ПанельКнопок = ЭлементыФормы.КоманднаяПанельПравоЛево;
		ЭтаФорма.Ширина = ШиринаПанели;
		ПанельКнопок.Высота = ЭтаФорма.Высота - 10;
		
	КонецЕсли;	
	
	// заполним панель кнопками
	ПанельКнопок.Лево = 0;
	ПанельКнопок.Верх = 0;
	
	МассивКнопокАвтозапуска = Новый Массив;
	ЗаполнитьКнопкиПанели(ПанельКнопок,МассивКнопокАвтозапуска);
	
	// автозапуск
	Для Каждого Кнопка Из МассивКнопокАвтозапуска Цикл
		ПриНажатииКнопкиОбработки(Кнопка);
	КонецЦикла;
	
КонецПроцедуры

// закрытие формы
Процедура ПриЗакрытии()
	Деструктор();
КонецПроцедуры

// заполнение панели кнопками
Процедура ЗаполнитьКнопкиПанели(ПанельКнопок, МассивКнопокАвтозапуска = Неопределено)
	
	ПереданМассивАвтозапуска = (МассивКнопокАвтозапуска <> Неопределено);
	
	МассивКнопок = Новый Массив;
	Для Каждого Кнопка Из ПанельКнопок.Кнопки Цикл
		ИмяКнопки = Кнопка.Имя;
		Если Найти(ИмяКнопки,"Кнопка_") > 0 ИЛИ Найти(ИмяКнопки,"Кнопка_Разделитель") > 0 Тогда
			МассивКнопок.Добавить(Кнопка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Кнопка Из МассивКнопок Цикл
		ПанельКнопок.Кнопки.Удалить(Кнопка);
	КонецЦикла;
	
	Индекс = 0;
	Для Каждого Строка Из СписокОбработок Цикл
		
		ИмяОбработки 	= Строка.ИмяОбработки;
		ТипФайла		= Строка.ТипФайла;
		Автозапуск		= Строка.Автозапуск;
		
		Если НЕ Строка.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		// разделитель
		Если ИмяОбработки = "Разделитель" Тогда
			ИмяКнопки 		= "Кнопка_Разделитель"+(Индекс+1);
			ТипКнопки 		= ТипКнопкиКоманднойПанели.Разделитель;
			НоваяКнопка 	= ПанельКнопок.Кнопки.Вставить(Индекс,ИмяКнопки,ТипКнопки);
			Индекс = Индекс + 1;
			
		// подменю "Алгоритмы"
		ИначеЕсли ИмяОбработки = "ПодменюАлгоритмы" Тогда
			
			ИмяКнопки 		= "Кнопка_ПодменюАлгоритмы";
			ТипКнопки 		= ТипКнопкиКоманднойПанели.Подменю;
			НоваяКнопка 	= ПанельКнопок.Кнопки.Вставить(Индекс,ИмяКнопки,ТипКнопки);
			
			НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирАлгоритмы","epf");
			НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			НоваяКнопка.Подсказка 	= "Алгоритмы";
			
			ДобавитьКнопкиПодменюАлгоритмы(НоваяКнопка);
			
			Индекс = Индекс + 1;
		
		// подменю "Отладка"
		ИначеЕсли ИмяОбработки = "ПодменюОтладка" Тогда
			
			ИмяКнопки 		= "Кнопка_ПодменюОтладка";
			ТипКнопки 		= ТипКнопкиКоманднойПанели.Подменю;
			НоваяКнопка 	= ПанельКнопок.Кнопки.Вставить(Индекс,ИмяКнопки,ТипКнопки);
			
			НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирОбъектыДляОтладки","epf");
			НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			НоваяКнопка.Подсказка 	= "Отладка";
			
			ДобавитьКнопкиПодменюОтладка(НоваяКнопка);
			
			Индекс = Индекс + 1;
			
		// произвольная подключаемая обработка	
		Иначе	
			
			ИмяКнопки 		= "Кнопка_"+ИмяОбработки;
			ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
			Действие 		= Новый Действие("ПриНажатииКнопкиОбработки");
			
			НоваяКнопка = ПанельКнопок.Кнопки.Вставить(Индекс,ИмяКнопки,ТипКнопки,,Действие);
			НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки(ИмяОбработки,ТипФайла);
			НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			НоваяКнопка.Подсказка 	= Строка.СинонимОбработки;
			
			Индекс = Индекс + 1;
			
			// при необходимости осуществим автозапуск обработки
			Если Автозапуск И ПереданМассивАвтозапуска Тогда
				МассивКнопокАвтозапуска.Добавить(НоваяКнопка);
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// добавление кнопок подменю "Алгоритмы"
Процедура ДобавитьКнопкиПодменюАлгоритмы(КнопкаПодменю)
	
	// кнопки подменю
	// алгоритмы
	ИмяКнопки 		= "Кнопка_Алгоритмы";
	ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
	Действие 		= Новый Действие("ПриНажатииКнопкиАлгоритмы");
	
	НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(ИмяКнопки,ТипКнопки,,Действие);
	НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирАлгоритмы","epf");
	НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	НоваяКнопка.Текст		= "Алгоритмы (ИР)";
	НоваяКнопка.Подсказка 	= "Алгоритмы (ИР)";
	
	// добавить алгоритм
	ИмяКнопки 		= "Кнопка_ДобавитьАлгоритм";
	ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
	Действие 		= Новый Действие("ПриНажатииКнопкиАлгоритмы");
	
	НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(ИмяКнопки,ТипКнопки,,Действие);
	НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирДобавитьАлгоритм","epf");
	НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	НоваяКнопка.Текст 		= "Добавить алгоритм (ИР)";
	НоваяКнопка.Подсказка 	= "Добавить алгоритм (ИР)";
	
	// настройки алгоритмов
	ИмяКнопки 		= "Кнопка_НастройкиАлгоритмов";
	ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
	Действие 		= Новый Действие("ПриНажатииКнопкиАлгоритмы");
	
	НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(ИмяКнопки,ТипКнопки,,Действие);
	НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирНастройкиАлгоритмов","epf");
	НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	НоваяКнопка.Текст 		= "Настройки алгоритмов (ИР)";
	НоваяКнопка.Подсказка 	= "Настройки алгоритмов (ИР)";
	
КонецПроцедуры	

// добавление кнопок подменю "Отладка"
Процедура ДобавитьКнопкиПодменюОтладка(КнопкаПодменю)
	
	// кнопки подменю
	// конфигуратор
	ИмяКнопки 		= "Кнопка_Отладчик";
	ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
	Действие 		= Новый Действие("ПриНажатииКнопкиОтладка");
	
	НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(ИмяКнопки,ТипКнопки,,Действие);
	НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирОтладчик","epf");
	НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	НоваяКнопка.Текст 		= "Отладчик (ИР)";
	НоваяКнопка.Подсказка 	= "Отладчик (ИР)";
	
	// объекты для отладки
	ИмяКнопки 		= "Кнопка_ОбъектыДляОтладки";
	ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
	Действие 		= Новый Действие("ПриНажатииКнопкиОтладка");
	
	НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(ИмяКнопки,ТипКнопки,,Действие);
	НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирОбъектыДляОтладки","epf");
	НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	НоваяКнопка.Текст 		= "Объекты для отладки (ИР)";
	НоваяКнопка.Подсказка 	= "Объекты для отладки (ИР)";
	
	// настройки алгоритмов
	ИмяКнопки 		= "Кнопка_РегистрацияCOMОбъектов";
	ТипКнопки 		= ТипКнопкиКоманднойПанели.Действие;
	Действие 		= Новый Действие("ПриНажатииКнопкиОтладка");
	
	НоваяКнопка = КнопкаПодменю.Кнопки.Добавить(ИмяКнопки,ТипКнопки,,Действие);
	НоваяКнопка.Картинка 	= ПолучитьИконкуКнопки("ирРегистрацияCOMОбъектов","epf");
	НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	НоваяКнопка.Текст 		= "Регистрация COM-объектов (ИР)";
	НоваяКнопка.Подсказка 	= "Регистрация COM-объектов (ИР)";
	
КонецПроцедуры	
	
// обработчик нажатия кнопки
Процедура ПриНажатииКнопкиОбработки(Кнопка)
	
	// получим имя обработки
	ИмяОбработки = СтрЗаменить(Кнопка.Имя,"Кнопка_","");
	
	// для консоли кода открываем форму
	Если ИмяОбработки = "ирКонсольКода" Тогда
		ПолучитьФорму("ирКонсольКода").Открыть();
		Возврат;
	КонецЕсли;
	
	// определим тип файла
	ТипФайла = "epf";
	
	Отбор = Новый Структура("ИмяОбработки",ИмяОбработки);
	НайденныеСтроки = СписокОбработок.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТипФайла = НайденныеСтроки[0].ТипФайла;	
	КонецЕсли;
	
	Если ТипФайла = "epf" Тогда
		ПодключитьВнешнююОбработку(ИмяОбработки).ПолучитьФорму().Открыть();
	ИначеЕсли ТипФайла = "erf" Тогда
		ПодключитьВнешнийОтчет(ИмяОбработки).ПолучитьФорму().Открыть();
	Иначе	
		Сообщить("Подключение файлов с расширением ["+ТипФайла+"] не предусмотрено.");
	КонецЕсли;
	
КонецПроцедуры	

// функции открытия нестандартных форм
Процедура ПриНажатииКнопкиАлгоритмы(Кнопка) 
	
	ИмяКнопки = СтрЗаменить(Кнопка.Имя,"Кнопка_","");
	
	// алгоритмы
	Если ИмяКнопки = "Алгоритмы" Тогда
		ПолучитьАлгоритмы().ПолучитьФорму("ФормаСписка").Открыть();
		
	// добавить алгоритм
	ИначеЕсли ИмяКнопки = "ДобавитьАлгоритм" Тогда
		ПолучитьАлгоритмы().ПолучитьФормуНовогоАлгоритма(ЭтаФорма).Открыть();
		
	// настройки алгоритмов
	ИначеЕсли ИмяКнопки = "НастройкиАлгоритмов" Тогда
		ПолучитьФорму("ирНастройкиАлгоритмов").Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// функции открытия нестандартных форм
Процедура ПриНажатииКнопкиОтладка(Кнопка) 
	
	ИмяКнопки = СтрЗаменить(Кнопка.Имя,"Кнопка_","");
	
	// отладчик
	Если ИмяКнопки = "Отладчик" Тогда
		ирНеглобальный.ОткрытьОтладчикЛкс();
		
	// объекты для отладки
	ИначеЕсли ИмяКнопки = "ОбъектыДляОтладки" Тогда
		ПолучитьФорму("ирОбъектыДляОтладки").Открыть();
		
	// регистрация COM-объектов
	ИначеЕсли ИмяКнопки = "РегистрацияCOMОбъектов" Тогда
		ПолучитьФорму("ирАдминистративнаяРегистрацияCOM").Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// сервисные кнопки
Процедура ПриНажатииСервиснойКнопки(Кнопка)
	
	ИмяКнопки = Кнопка.Имя;
	
	// настройки
	Если ИмяКнопки = "НастройкиИнструментов" Тогда
		ПолучитьФорму("ФормаНастроек").Открыть();
		
	// о подсистеме
	ИначеЕсли ИмяКнопки = "ОПодсистеме" Тогда
		ирНеглобальный.ПанельИнструментовОПодсистеме(); 
		
	// закрыть
	ИначеЕсли ИмяКнопки = "Закрыть" Тогда
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры	

// получение иконки для кнопки
Функция ПолучитьИконкуКнопки(ИмяОбработки,ТипФайла)
	
	ИмяФайла = мКаталогОбработки + "Иконки кнопок\" + ИмяОбработки + ".png";
	
	Иконка = Неопределено;
	Попытка
		Иконка = Новый Картинка(ИмяФайла,Истина);
	Исключение
	КонецПопытки;
	
	Если Иконка = Неопределено Тогда
		
		Если ТипФайла = "epf" Тогда
			Иконка = БиблиотекаКартинок.Обработка;
		Иначе
			Иконка = БиблиотекаКартинок.Отчет;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Иконка;
	
КонецФункции	

// параметры расположения формы панели кнопок
Процедура НастроитьПараметрыОткрытияФормы()
	
	РасположениеПанелиЗапуска = 1;
	Если ОбработкаОбъект.мНастройкиИнструментов.Свойство("РасположениеПанелиЗапуска") Тогда
		
		Попытка
			РасположениеПанелиЗапуска = Число(ОбработкаОбъект.мНастройкиИнструментов.РасположениеПанелиЗапуска);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	ЭтаФорма.ПоложениеПрикрепленногоОкна = мСоответствиеРасположенийОкна[РасположениеПанелиЗапуска];
	
КонецПроцедуры                   

// очистка кэша
Процедура ОчиститьКЭШ_()
	
	ЭтотОбъект.ОчиститьКЭШ();	
	
КонецПроцедуры

// обработка оповещения при сохранении настроек
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроек" Тогда
		
		// изменение положения окна (придется переоткрыть форму)
		Если ЭтаФорма.ПоложениеПрикрепленногоОкна <> мСоответствиеРасположенийОкна[РасположениеПанелиЗапуска] Тогда
			ПереоткрытьФорму(ЭтаФорма);
			Возврат;
		КонецЕсли;
		
		// перезаполнение кнопок
		Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
			
			ИмяЭлемента = ЭлементФормы.Имя;
			Если Найти(ИмяЭлемента,"КоманднаяПанельПравоЛево") = 0 И Найти(ИмяЭлемента,"КоманднаяПанельВерхНиз") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ПанельКнопок = ЭлементФормы;
			
		КонецЦикла;
		
		ЗаполнитьКнопкиПанели(ПанельКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсвободитьВсеИндикаторыПроцессов_Форма() Экспорт
	ПодключитьОбработчикОжидания("ОбработчикОжидания_ОсвободитьВсеИндикаторыПроцессов", 0.1, Истина);	
КонецПроцедуры

Процедура ОбработчикОжидания_ОсвободитьВсеИндикаторыПроцессов()
	ирГлобальный.ЛксОсвободитьВсеИндикаторыПроцессов();
КонецПроцедуры


// =========================================================================================
// действия, выполняемые при создании формы

// настройка параметров формы - положение панели кнопок
НастроитьПараметрыОткрытияФормы();

// очистка кэша
ПодключитьОбработчикОжидания("ОчиститьКЭШ_", 1200);

