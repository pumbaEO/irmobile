Перем мНеПодключеныОбработки Экспорт;
Перем мВнешниеМодули;
Перем мКаталогОбработки Экспорт; // Damian
Перем мКлючОбъектаДляСохраненияОбъектовОтладки Экспорт;
Перем мНастройкиИнструментов Экспорт;
Перем мКартинки;
Перем мПолучениеФорм;
Перем мИмяСервера;
Перем ирКЭШ_СловарьШаблоновМетаданных Экспорт;
Перем ирКЭШ_СтруктураХраненияБД Экспорт;
Перем ирКЭШ_КомпоновщикТаблицыМетаданных Экспорт;
Перем ирКЭШ_ирАнализТехножурнала Экспорт;

Перем VBScript;

Перем мВерсия Экспорт;

Перем мСоответствиеРасположенийОкна Экспорт;

Перем мМассивПредопределенныеОбработки Экспорт;
Перем мМассивПредопределенныеОтчеты Экспорт;

Функция ПодключитьВнешнююОбработку(ИмяОбработки, ДобавитьСсылкиНаВнешниеМодули = Истина, Инициализировать = Истина) Экспорт
	
	Попытка
		
		ВнешняяОбработка = ВнешниеОбработки.Создать(мКаталогОбработки + "Подключаемые обработки\" + ИмяОбработки + ".epf");	
		МетаданныеОбъекта = ВнешняяОбработка.Метаданные();
		
		Если ДобавитьСсылкиНаВнешниеМодули Тогда
			
			Для Каждого ИмяМодуля Из мВнешниеМодули Цикл
				
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяМодуля) <> Неопределено Тогда
					ВнешняяОбработка[ИмяМодуля] = ЭтотОбъект[ИмяМодуля];
				КонецЕсли;	
				
			КонецЦикла;
			
			Если МетаданныеОбъекта.Реквизиты.Найти("ирМобильные") <> Неопределено Тогда
				ВнешняяОбработка["ирМобильные"] = ЭтотОбъект; 
			КонецЕсли;	
			
		КонецЕсли;                              		
		
		Если Инициализировать И мМассивПредопределенныеОбработки.Найти(ИмяОбработки) <> Неопределено Тогда
			ВнешняяОбработка.мирИнициализировать();
		КонецЕсли; 		
		
		Возврат ВнешняяОбработка;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение "Не удалось подключить внешнюю обработку " + ИмяОбработки; 
		
	КонецПопытки
	
КонецФункции

Функция ПодключитьВнешнийОтчет(ИмяОтчета, ДобавитьСсылкиНаВнешниеМодули = Истина, Инициализировать = Истина) Экспорт
	
	Попытка
		
		ВнешнийОтчет = ВнешниеОтчеты.Создать(мКаталогОбработки + "Подключаемые обработки\"+ ИмяОтчета + ".erf");
		МетаданныеОбъекта = ВнешнийОтчет.Метаданные();
		
		Если ДобавитьСсылкиНаВнешниеМодули Тогда
			
			Для Каждого ИмяМодуля Из мВнешниеМодули Цикл
				
				Если МетаданныеОбъекта.Реквизиты.Найти(ИмяМодуля) <> Неопределено Тогда
					ВнешнийОтчет[ИмяМодуля] = ЭтотОбъект[ИмяМодуля];
				КонецЕсли;	
				
			КонецЦикла;
			
			Если МетаданныеОбъекта.Реквизиты.Найти(ИмяМодуля) <> Неопределено Тогда
				ВнешнийОтчет["ирМобильные"] = ЭтотОбъект; 
			КонецЕсли;	
			
		КонецЕсли;                              		
		
		Если Инициализировать И мМассивПредопределенныеОтчеты.Найти(ИмяОтчета) <> Неопределено Тогда
			ВнешнийОтчет.мирИнициализировать();
		КонецЕсли; 		
		
		Возврат ВнешнийОтчет;
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		ВызватьИсключение "Не удалось подключить внешний отчет " + ИмяОтчета; 
		
	КонецПопытки
	
КонецФункции

Функция ПолучитьКартинку(ИмяКартинки) Экспорт
	
	Возврат мКартинки.Рисунки[ИмяКартинки].Картинка; 	
	
КонецФункции

Функция ПолучитьАлгоритмы() Экспорт
	
	Если ирАлгоритмы = Неопределено Тогда
		
		Попытка
			
			ирАлгоритмы = ПодключитьВнешнююОбработку("ирАлгоритмы");
			ирАлгоритмы.Инициализировать(ирКаталогАлгоритмов);
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат ирАлгоритмы;
	
КонецФункции

Функция ПолучитьСинтаксПомощник() Экспорт
	
	Если ирСинтаксПомощник = Неопределено Тогда
		
		Попытка
			
			ирСинтаксПомощник = ПодключитьВнешнююОбработку("ирСинтаксПомощник");
			
		Исключение
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат ирСинтаксПомощник;
	
КонецФункции

Процедура ДобавитьСвязиВнешнихМодулей()
	
	Для А = 0 По мВнешниеМодули.ВГраница() Цикл
		
		Для Б = 0 По мВнешниеМодули.ВГраница() Цикл		
			
			Если Б = А Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			ЭтотОбъект[мВнешниеМодули[А]][мВнешниеМодули[Б]] = ЭтотОбъект[мВнешниеМодули[Б]];
		
		КонецЦикла;
		
		ЭтотОбъект[мВнешниеМодули[А]]["ирМобильные"] = ЭтотОбъект;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Деструктор() Экспорт
	
	Для А = 0 По мВнешниеМодули.ВГраница() Цикл
		
		Для Б = 0 По мВнешниеМодули.ВГраница() Цикл		
			
			Если Б = А Тогда
				
				Продолжить;
				
			КонецЕсли; 
			
			Попытка
				ЭтотОбъект[мВнешниеМодули[А]][мВнешниеМодули[Б]] = Неопределено;
			Исключение
			КонецПопытки;
		
		КонецЦикла;
		
		Если ирАлгоритмы <> Неопределено Тогда
			
			ирАлгоритмы[мВнешниеМодули[А]] = Неопределено;
			
		КонецЕсли; 
		
		Попытка
			ЭтотОбъект[мВнешниеМодули[А]]["ирМобильные"] = Неопределено;
		Исключение
		КонецПопытки; 
		
		мВнешниеМодули[А] = Неопределено;
		
	КонецЦикла;	
	
	Если ирАлгоритмы <> Неопределено Тогда
			
		ирАлгоритмы["ирМобильные"] = Неопределено;
		ирАлгоритмы = Неопределено;
			
	КонецЕсли; 		
		
КонецПроцедуры  

Функция СоздатьОбъектДляОтладки(ХранимоеЗначение, СтруктураПараметров) Экспорт

	Результат = Новый Структура("Код, Наименование, XML, ДатаИзменения, ЧислоСимволов");
	максКод = ВосстановитьЗначение("ирМаксимальныйКодОбъектовДляОтладки");
	Если максКод = Неопределено Тогда
		
		максКод = 1;
		
	Иначе
		
		максКод = максКод + 1;
		
	КонецЕсли;
	
	Результат.Код = максКод;
	Результат.XML = ХранимоеЗначение;
	Результат.ДатаИзменения = ТекущаяДата();
	Результат.Наименование = "" + Результат.ДатаИзменения + " " + СтруктураПараметров.ТипОперации + " " + СтруктураПараметров.Объект;
	Результат.ЧислоСимволов = СтрДлина(ХранимоеЗначение);
	СохранитьЗначение("ирМаксимальныйКодОбъектовДляОтладки", максКод);
	ХранилищеОбщихНастроек.Сохранить(мКлючОбъектаДляСохраненияОбъектовОтладки, максКод, Результат);
	
	Возврат Результат;

КонецФункции // СоздатьОбъектДляОтладки()

Функция ПолучитьНастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("РасположениеПанелиЗапуска", РасположениеПанелиЗапуска); 
	Результат.Вставить("ОпределениеСерверногоВремени", 1); 
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьНастройки() Экспорт
	
	Перем ЧтениеXML,
		  ПостроительDOM,
		  ДокументDOM;
	
	Результат = ПолучитьНастройкиПоУмолчанию();
	
	ПутьКФайлу = мКаталогОбработки + "settings.xml";
	ФайлНастроек = Новый Файл(ПутьКФайлу);
	
	Если НЕ ФайлНастроек.Существует() Тогда
		Возврат Результат;
	КонецЕсли; 
	
	// получим документ с настройками
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ПутьКФайлу);
	Исключение
		Сообщить("Не удалось открыть файл настроек: "+ПутьКФайлу);
		Возврат Неопределено;
	КонецПопытки;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ОбходДерева = Новый ОбходДереваDOM(ДокументDOM);
	Пока ОбходДерева.СледующийУзел() <> Неопределено Цикл
		
		ТекущийУзел = ОбходДерева.ТекущийУзел;
		Если ТипЗнч(ТекущийУзел) <> Тип("ЭлементDOM") Тогда
			Продолжить;
		КонецЕсли;	
			
		ИмяУзла = ТекущийУзел.ИмяУзла;
		
		Если ИмяУзла = "Настройки" ИЛИ ИмяУзла = "СписокОбработок" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеУзла = ТекущийУзел.ТекстовоеСодержимое;
		Результат.Вставить(ИмяУзла, ПолучитьЧислоИзСтроки(ЗначениеУзла));
		
	КонецЦикла;
	
	Возврат Результат; 	
	
КонецФункции
	
Процедура ЗаписатьНастройки(СтруктураНастроек) Экспорт
	
	Попытка
	
		ЗаписьХМL = Новый ЗаписьXML;
		ЗаписьХМL.Отступ = Истина;
		
		ПутьКФайлу = мКаталогОбработки + "settings.xml";
		ЗаписьХМL.ОткрытьФайл(ПутьКФайлу);
		
		ЗаписьХМL.ЗаписатьОбъявлениеXML();		
		
		ЗаписьХМL.ЗаписатьНачалоЭлемента("Настройки");		
		
		Для Каждого КлючИЗначение Из СтруктураНастроек Цикл
			
			// обычные значения
			Если ТипЗнч(КлючИЗначение.Значение) <> Тип("ТаблицаЗначений") Тогда
				ЗаписьХМL.ЗаписатьНачалоЭлемента(КлючИЗначение.Ключ);
				ЗаписьХМL.ЗаписатьТекст(Строка(КлючИЗначение.Значение));
				ЗаписьХМL.ЗаписатьКонецЭлемента();
				
			// таблица значений	
			Иначе
				
				мТаблица = КлючИЗначение.Значение;
				
				ЗаписьХМL.ЗаписатьНачалоЭлемента(КлючИЗначение.Ключ);
				
				Для Каждого Строка Из мТаблица Цикл
					
					ЗаписьХМL.ЗаписатьНачалоЭлемента("СтрокаТаблицы");
					Для Каждого Колонка Из мТаблица.Колонки Цикл
						
						ИмяКолонки = Колонка.Имя;
						ЗаписьХМL.ЗаписатьАтрибут(ИмяКолонки,Строка(Строка[ИмяКолонки]));
						
					КонецЦикла;
					ЗаписьХМL.ЗаписатьКонецЭлемента();
					
				КонецЦикла;
				
				ЗаписьХМL.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
		КонецЦикла;                       	
		
		ЗаписьХМL.ЗаписатьКонецЭлемента();
		СтрокаXML = ЗаписьХМL.Закрыть();		
		
	Исключение
			
		ВызватьИсключение "Не удалось записать настройки в файл " + ПутьКФайлу + "!"; 
		
	КонецПопытки;	
	
	мНастройкиИнструментов.Очистить();
	Для Каждого КлючИЗначение Из СтруктураНастроек Цикл
		
		мНастройкиИнструментов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьЦветСтиляИр(ИмяЦвета) Экспорт
	
	Если ИмяЦвета = "ирТекстИнформационнойНадписи" Тогда
		
		Возврат Новый Цвет(83, 106, 194);
		
	ИначеЕсли ИмяЦвета = "ирЦветФонаЧередованияСтрок" Тогда 
		
		Возврат WebЦвета.МятныйКрем;
		
	ИначеЕсли ИмяЦвета = "ирЦветФонаВычисляемогоЗначения" Тогда 
		
		Возврат WebЦвета.ГолубойСКраснымОттенком;
		
	ИначеЕсли ИмяЦвета = "ирЦветФонаОшибки" Тогда 
		
		Возврат Новый Цвет(255, 245, 245); 

	ИначеЕсли ИмяЦвета = "ирЦветФонаРасширенногоПредставленияЗначения" Тогда 
		
		Возврат Новый Цвет(255, 255, 180); 
		
	Иначе
		
		Возврат Новый Цвет();
		
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьФормуЛкс(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	
	Возврат мПолучениеФорм.ПолучитьФормуЛкс(ИмяФормы, Параметры, Владелец, Уникальность, Окно);
	
КонецФункции
  
Функция ТекстСкриптаПолученияВремени()

	Текст =
	"Function GetServerTime(ServerName) 
	|	Set objWMIService = GetObject(""winmgmts:\\"" & ServerName & ""\root\cimv2"") 
	|	Set colItems = objWMIService.ExecQuery(""Select * from Win32_LocalTime"") 
	|	zeroString = ""0""
	|	For Each objItem in colItems
	|		year_ = CStr(objItem.Year)
	|       If len(year_) < 4 Then
	|			year = String(zeroString, 4 - len(year_)) + year_
	|       End If
	|		month_ = CStr(objItem.Month)
	|       If len(month_) = 1 Then
	|			month_ = zeroString + month_
	|       End If
	|		day_ = CStr(objItem.Day)
	|       If len(day_) = 1 Then
	|			day_ = zeroString + day_
	|       End If
	|		hour_ = CStr(objItem.Hour)
	|       If len(hour_) = 1 Then
	|			hour_ = zeroString + hour_
	|       End If
	|		minute_ = CStr(objItem.Minute)
	|       If len(minute_) = 1 Then
	|			minute_ = zeroString + minute_
	|       End If
	|		second_ = CStr(objItem.Second)
	|       If len(second_) = 1 Then
	|			second_ = zeroString + second_
	|       End If    
	|
	|		GetServerTime = CStr(year_) & CStr(month_) & CStr(day_) & CStr(hour_) & CStr(minute_) & CStr(second_)
	|		'Exit Function
	|	Next
	|End Function";
	
	Возврат Текст;

КонецФункции // ТекстСкриптаПолученияВремени() 

Функция ПолучитьТекущуюДатуСервера() Экспорт
	
	Если ирКЭШ.Получить().ЭтоФайловаяБаза Или мНастройкиИнструментов.ОпределениеСерверногоВремени = 1 Тогда
		Возврат ТекущаяДата();
	ИначеЕсли мНастройкиИнструментов.ОпределениеСерверногоВремени = 2 Тогда 
		Возврат ПолучитьОперативнуюОтметкуВремени();
	ИначеЕсли мНастройкиИнструментов.ОпределениеСерверногоВремени = 3 Тогда 
		Попытка
			Возврат Дата(VBScript.Run("GetServerTime", мИмяСервера));			
		Исключение
			ВызватьИсключение "Не удалось получить время сервера с помощью скрипта! Выберите другую опцию получения серверного времени в настройках инструментов!";		
		КонецПопытки;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли; 
	
КонецФункции

Процедура ОчиститьКЭШ() Экспорт
	
	ирКЭШ_КомпоновщикТаблицыМетаданных.Очистить();
	ирКЭШ_СловарьШаблоновМетаданных.Очистить();
	ирКЭШ_СтруктураХраненияБД.Очистить();
	ирКЭШ_ирАнализТехножурнала = Неопределено;
	
КонецПроцедуры   
	
////////////////////////////////////////////////////////////////////////////////
//	Популярные функции для вызова из отладчика

//Отладка 

// Присваивает первому параметру второй.
// Удобно вызывать из отладчика через диалог "Вычислить выражение". 
//
// Параметры:
//  П1           – Произвольный – параметр1;
//  П2           – Произвольный – параметр2;
//
// Возвращаемое значение:
//  П2 – Не используется.
//
Функция Пр(п1, п2) Экспорт
	
	п1 = п2;
	Возврат п1;
	
КонецФункции // Пр()

// Выполняет программный код, переданный как параметр.
// Остальные Параметры могут участвовать в теле этого кода.
// Удобно использовать в отладчике.
//
// Параметры:
//  П1           – Произвольный – параметр1;
//  П2           – Произвольный – параметр2;
//  П3           – Произвольный – параметр3;
//  П4           – Произвольный – параметр4;
//
// Возвращаемое значение:
//  Неопределено – Не используется.
//
Функция Ду(Знач ТекстПрограммы, п1 = 0, п2 = 0, п3 = 0, п4 = 0)  Экспорт
	
	Перем Р;
	
    Попытка
        Выполнить(ТекстПрограммы);
    Исключение
        Возврат ОписаниеОшибки();
    КонецПопытки;
	Возврат Р;
	
КонецФункции // Ду()

// На клиенте открывает консоль кода с передачей туда всех своих параметров. На сервере сразу выполняет код.
// Изменения параметров возвращаются в вызывающий контекст в модальном режиме.
//
// Параметры:
//  ТекстПрограммы    - Строка - программный код для передачи в консоль кода или выполнения;
//  РежимОперации     – Число - 0 - немодально, 1 - модально, 2 - неинтерактивно (на сервере всегда);
//  СтрокаИменПараметров – Строка - имена параметров для консоли кода через запятую, если не указаны, то будут оригинальные П*;
//  П*             – Произвольный - параметры для использования при выполнении программного кода;
//
// Возвращаемое значение:
//  Строка - описание ошибок.
//
Функция Оперировать(Знач ТекстПрограммы = "", Знач РежимОперации = 0, СтрокаИменПараметров= "",
	П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null, П6 = Null, П7 = Null, П8 = Null, П9 = Null) Экспорт
	
	Результат = ирОтладка.Оперировать(ТекстПрограммы,РежимОперации, СтрокаИменПараметров,
									П1, П2, П3, П4, П5, П6, П7, П8, П9);
									
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли
	Возврат Результат;
	
КонецФункции

// Обертка Оперировать. Модально открывает консоль кода с передачей туда всех своих параметров.
// Удобно вызывать из отладчика через диалог "Вычислить выражение". 
// Изменения параметров возвращаются в вызывающий контекст.
//
// Параметры:
//  П*  – Произвольный;
//
// Возвращаемое значение:
//  Неопределено.
//
Функция Оп(П1 = Null, П2 = Null, П3 = Null, П4 = Null, П5 = Null) Экспорт

	Возврат Оперировать(, Истина, , П1, П2, П3, П4, П5);

КонецФункции // Оп()
								
// Подготавливает строку для помещения всех переменных в структуру с целью ее дальнейшего вычисления в отладчике "Вычислить(Пер())".
// Изменения параметров возвращаются в вызывающий контекст.
//
// Параметры:
//  ТекстПрограммы    - Строка, *"" - программный код для анализа, берется из буфера обмена если пустой.
//
// Возвращаемое значение:
//  Строка для вычисления в отладчике.
//
Функция Пер(Знач ТекстПрограммы =  "") Экспорт
	
	Результат = ирОтладка.Пер(ТекстПрограммы);
	Деструктор();
	Возврат Результат;
	
КонецФункции

// Подготавливает строку для вызова Оперировать() в отладчике. Вызвается путем вычисления "Вычислить(Поп())".
// Изменения параметров возвращаются в вызывающий контекст.
//
// Параметры:
//  ТекстПрограммы    - Строка, *"" - программный код для передачи в консоль кода или выполнения, берется из буфера обмена если пустой;
//  РежимОперации     – Число - 0 - немодально, 1 - модально, 2 - неинтерактивно (на сервере всегда);
//
// Возвращаемое значение:
//  Строка для вычисления в отладчике.
//
Функция Поп(Знач ТекстПрограммы =  "", РежимОперации = 1) Экспорт
	
	Результат = ирОтладка.Поп(ТекстПрограммы, РежимОперации);
	// АВВ [02.03.2013] Добавим к результату путь к обработке, чтобы его не вписывать каждый раз в табло
	Результат = "ВнешниеОбработки.Создать(""" + ЭтотОбъект.ИспользуемоеИмяФайла + """)." + Результат;
	Деструктор();
	Возврат Результат;
	
КонецФункции

// Открывает консоль кода с передачей туда структуры параметров.
// Изменения параметров возвращаются в структуру, но не в вызывающий контекст.
//
// Параметры:
//  ТекстПрограммы - Строка;
//  Модально     – Булево - открывать окно модально;
//  СтруктураПараметров – Структура - ключи соответсвуют именам параметов, а значения их значениям.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция ОперироватьСтруктурой(Знач ТекстПрограммы = "", Модально = Ложь, СтруктураПараметров) Экспорт

	Результат = ИрОтладка.ОперироватьСтруктурой(ТекстПрограммы, Модально, СтруктураПараметров);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции // РП()

// Обертка ОперироватьСтруктурой. Модально открывает консоль кода с передачей туда всех своих параметров.
// Удобно вызывать из отладчика через диалог "Вычислить выражение". 
// Изменения параметров возвращаются в структуру, но не в вызывающий контекст.
//
// Параметры:
//  СтруктураПараметров – Структура - ключи соответсвуют именам параметов, а значения их значениям.
//
// Возвращаемое значение:
//  Неопределено.
//
Функция Опс(СтруктураПараметров) Экспорт

	Возврат ОперироватьСтруктурой(, Истина, СтруктураПараметров);

КонецФункции // Опс()

// Открывает исследователь объектов.
//
// Параметры:
//  Объект       – Произвольный, *Неопределено - объект, который будет исследован;
//  Модально     – Булево - открывать окно модально;
//  КакКоллекцию – Булево, *Ложь - исследовать как коллекцию вместо объекта.
//
// Возвращаемое значение:
//  Сам объект.
//
Функция Исследовать(Объект = Неопределено, Модально = Ложь, КакКоллекцию = Ложь, ОтложенноеВыполнение = Ложь) Экспорт
	
	Результат = ирОтладка.Исследовать(Объект, Модально, КакКоллекцию, ОтложенноеВыполнение);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции // Исследовать()

// Обертка Исследовать. Модально открывает объект в исследователе объектов
// Удобно вызывать из отладчика через диалог "Вычислить выражение". 
Функция Ис(Объект = Неопределено, КакКоллекцию = Ложь, ОтложенноеВыполнение = Ложь) Экспорт
	
	Возврат Исследовать(Объект, Истина, КакКоллекцию, ОтложенноеВыполнение);

КонецФункции // Ис()

// Выводит в окно сообщений переданное значение вместе с типом и заданным представлением.
//
// Параметры:
//  Значение     - Произвольный;
//  *Представление – Строка, *"" - представление наблюдаемого значения.
//
Процедура Наблюдать(Значение, Представление = "") Экспорт

	ирОтладка.Наблюдать(Значение, Представление);
	Деструктор(); 

КонецПроцедуры // Наблюдать()

//Открывает нужную консоль для редактирования сложного объекта. 
 //Варианты использования в зависимости от типа параметра Объект:
 //  Запрос - открывает запрос в консоли запросов
 //  ПостроительЗапроса - открывает результирующий запрос построителя запросов в консоли запросов
 //  ПостроительОтчета - открывает построитель отчета в консоли построителей отчетов, откуда можно открыть результирующий запрос построителя отчета в консоли запросов
 //  СхемаКомпоновки - открывает схему компоновки в консоли компоновки данных, откуда можно открыть результирующие (из макета компоновки) запросы в консоли запросов  
 //Параметры:
 // Объект       – Запрос, ПостроительЗапроса, ПостроительОтчета, СхемаКомпоновкиДанных - исследуемый объект;
 // Модально     – Булево - открывать окно модально, должно быть Истина для использования функции в отладчике;
 // НастройкаКомпоновки - НастройкиКомпоновкиДанных, *Неопределено - настройки для схемы компоновки;
 // ВнешниеНаборыДанных - Структура, *Неопределено - внешние наборы данных для схемы компоновки;
 // ОтложеннаяОтладка - Булево - на сервере игнорируется (равно Истина), вместо открытия инструмента отладки сразу выполняется помещение
 //					 объектов отладки во временное хранилище   
 //Возвращаемое значение:
 // Неопределено. 
Функция Отладить(Объект, Модально = Ложь, НастройкаКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено, ОтложенноеВыполнение = Ложь,
	ДопустимоеЧислоСтрокВоВременнойТаблицеОтложеннойОтладки = 500000) Экспорт
	
	Результат = ирОтладка.Отладить(Объект, Модально, НастройкаКомпоновки, ВнешниеНаборыДанных, ОтложенноеВыполнение, ДопустимоеЧислоСтрокВоВременнойТаблицеОтложеннойОтладки);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции 

// Начать трассу в технологическом журнале. Сам технологический журнал надо заранее включить.
Функция ТехН() Экспорт
	
	Возврат ТехН();
	
КонецФункции 	
	
// Кончить трассу в технологическом журнале и показать ее анализ
Функция ТехК() Экспорт
	
	Возврат ТехК();
	
КонецФункции

// Функция получает таблицу значений из указанной временной таблицы из менеджера временных таблиц, 
// либо структуру из всех входящих в запрос временных таблиц.
// Используется для просмотра временных таблиц серверного менеджера временных таблиц в отладчике.
// Параметры:
//   ЗапросИлиМенеджерВременныхТаблиц - Запрос, МенеджерВременныхТаблиц
//   ИмяВременнойТаблицы - Строка, *"" - можно не указывать для запроса, тогда будут получены все временные таблицы
//   ДопустимоеЧислоСтрок - Число, *500000 - выбирать из временной таблицы не более этого числа строк
//
// Результат - ТаблицаЗначений, Структура
//
Функция ПолВТ(ЗапросИлиМенеджерВременныхТаблиц, ИмяВременнойТаблицы = "", ДопустимоеЧислоСтрок = 500000) Экспорт
	
	Возврат ирОтладка.ПолВТ(ЗапросИлиМенеджерВременныхТаблиц, ИмяВременнойТаблицы, ДопустимоеЧислоСтрок)
		
КонецФункции // ПолВТ()

//Открытие консолей
Функция ОткрытьКонсольЗапросовДляОтладки(Запрос, ТипЗапроса = "Обычный", ИмяЗапроса = "Запрос для отладки", Модально = Истина) Экспорт
	
	Результат = ПодключитьВнешнююОбработку("ирКонсольЗапросов").ОткрытьДляОтладки(Запрос, ТипЗапроса, ИмяЗапроса, Модально);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции 

Функция ОткрытьКонсольКомпоновокДляОтладки(СхемаКомпоновки, Настройки = Неопределено, ВнешниеНаборыДанных = Неопределено,
	Модально = Истина) Экспорт
	
	Результат = ПодключитьВнешнийОтчет("ирКонсольКомпоновокДанных").ОткрытьДляОтладки(СхемаКомпоновки, Настройки, ВнешниеНаборыДанных, Модально);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции 

Функция ОткрытьКонсольПостроителейДляОтладки(ПостроительОтчета, Модально = Истина) Экспорт
	
	Результат = ПодключитьВнешнююОбработку("ирКонсольПостроителейОтчетов").ОткрытьДляОтладки(ПостроительОтчета, Модально);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть(); 		
	#Иначе   		
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции

// Damian...
// заполнение списка обработок
Процедура ЗаполнитьСписокОбработок(СканироватьПапку=Ложь) Экспорт
	
	МассивИсключений = Новый Массив;
	МассивИсключений.Добавить("ирАлгоритмы");
	МассивИсключений.Добавить("ирВводВыраженияВстроенногоЯзыка");
	МассивИсключений.Добавить("ирМенеджерТабличногоПоля");
	МассивИсключений.Добавить("ирКонсольКода");
	
	// заполнение из файла настроек
	Если НЕ СканироватьПапку Тогда
		
		мСписокОбработок = ПолучитьСписокОбработокИзФайла();
		Если мСписокОбработок = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Строка Из мСписокОбработок Цикл
			НоваяСтрока = СписокОбработок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		КонецЦикла;
		
	// получаем файлы в папке "Подключаемые обработки"	
	Иначе
		
		// временные таблицы
		мСтараяТаблица 		= СписокОбработок.Выгрузить();
		мТаблицаФайлов 		= СписокОбработок.ВыгрузитьКолонки();
		
		// массив строк к удалению
		МассивУдаляемыхСтрок = Новый Массив;
		
		// флаги присутствия предопределенных обработок и подменю
		ЕстьКонсольКода 		= Ложь;
		ЕстьПодменюАлгоритмы 	= Ложь;
		ЕстьПодменюОтладка 		= Ложь;
		
		// ищем файлы
		мПапкаОбработок = мКаталогОбработки + "Подключаемые обработки";
		МассивФайлов = НайтиФайлы(мПапкаОбработок,"*.e?f");
		Для Каждого Файл Из МассивФайлов Цикл
			
			ПолноеИмяФайла	= Файл.ПолноеИмя;
			ИмяОбработки 	= Файл.ИмяБезРасширения;
			Расширение 		= НРег(Прав(Файл.Расширение,3));
			
			// внешние модули не добавляем
			Если мВнешниеМодули.Найти(ИмяОбработки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// обработки классы не добавляем
			Если Найти(ИмяОбработки,"ирКлс") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// обработки исключения не добавляем
			Если МассивИсключений.Найти(ИмяОбработки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// если не обработка и не отчет - не добавляем
			Если Расширение <> "epf" И Расширение <> "erf" Тогда
				Продолжить;
			КонецЕсли;
			
			// получим синоним обработки
			Если Расширение = "epf" Тогда
				мОбработка = ВнешниеОбработки.Создать(ПолноеИмяФайла);
			Иначе
				мОбработка = ВнешниеОтчеты.Создать(ПолноеИмяФайла);
			КонецЕсли;
			
			мМетаданныеОбработки = мОбработка.Метаданные();
			СинонимОбработки = СокрЛП(мМетаданныеОбработки.Синоним);
			Если СинонимОбработки = "" Тогда
				СинонимОбработки = ИмяОбработки;
			КонецЕсли;
			
			мОбработка = Неопределено;
			
			НоваяСтрока = мТаблицаФайлов.Добавить();
			НоваяСтрока.ИмяОбработки 		= ИмяОбработки;
			НоваяСтрока.СинонимОбработки 	= СинонимОбработки;
			НоваяСтрока.ТипФайла 			= Расширение;
			
		КонецЦикла;
		
		// теперь определим, какие обработки необходимо удалить из списка
		// (те, для которых не нашлось файлов в папке "Подключаемые обработки")
		мОтбор = Новый Структура("ИмяОбработки,ТипФайла");
		
		Для Каждого Строка Из мСтараяТаблица Цикл
			
			ИмяОбработки = Строка.ИмяОбработки;
			
			Если ИмяОбработки = "Разделитель" Тогда
				Продолжить;
			КонецЕсли;
			
			// предопределенные обработки и подменю
			Если ИмяОбработки = "ирКонсольКода" Тогда
				ЕстьКонсольКода = Истина;
				Продолжить;
			ИначеЕсли ИмяОбработки = "ПодменюАлгоритмы" Тогда
				ЕстьПодменюАлгоритмы = Истина;
				Продолжить;
			ИначеЕсли ИмяОбработки = "ПодменюОтладка" Тогда
				ЕстьПодменюОтладка = Истина;
				Продолжить;
			КонецЕсли;
			
			мОтбор.ИмяОбработки = Строка.ИмяОбработки;
			мОтбор.ТипФайла 	= Строка.ТипФайла;
			
			НайденныеФайлы = мТаблицаФайлов.НайтиСтроки(мОтбор);
			Если НайденныеФайлы.Количество() = 0 Тогда
				МассивУдаляемыхСтрок.Добавить(Строка);
			КонецЕсли;
			
		КонецЦикла;
		
		// удалим строки
		Для Каждого УдаляемаяСтрока Из МассивУдаляемыхСтрок Цикл
			мСтараяТаблица.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
		// теперь необходимо добавить в конец списка новые обработки
		// сначала вставим разделитель
		Если мСтараяТаблица.Количество() > 0 Тогда
			ПоследняяСтрока = мСтараяТаблица[мСтараяТаблица.Количество() - 1];
			Если ПоследняяСтрока.ИмяОбработки <> "Разделитель" Тогда
				НоваяСтрока = мСтараяТаблица.Добавить();
				НоваяСтрока.ИмяОбработки 		= "Разделитель";
				НоваяСтрока.Видимость 			= Истина;
				НоваяСтрока.СинонимОбработки 	= "---------- Разделитель ----------";
			КонецЕсли;
		КонецЕсли;	
		
		// теперь добавляем новые обработки
		Для Каждого Строка Из мТаблицаФайлов Цикл
			
			мОтбор.ИмяОбработки = Строка.ИмяОбработки;
			мОтбор.ТипФайла 	= Строка.ТипФайла;
			
			НайденныеСтроки = мСтараяТаблица.НайтиСтроки(мОтбор);
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				НоваяСтрока = мСтараяТаблица.Добавить();
				НоваяСтрока.ИмяОбработки 		= Строка.ИмяОбработки;
				НоваяСтрока.Видимость 			= Истина;
				НоваяСтрока.СинонимОбработки 	= Строка.СинонимОбработки;
				НоваяСтрока.ТипФайла 			= Расширение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// предопределенные обработки и подменю добавляем всегда в конец
		// (если они не присутствовали ранее в списке)
		// консоль кода
		Если НЕ ЕстьКонсольКода Тогда
			НоваяСтрока = мСтараяТаблица.Добавить();
			НоваяСтрока.ИмяОбработки 		= "ирКонсольКода";
			НоваяСтрока.СинонимОбработки 	= "Консоль кода (ИР)";
			НоваяСтрока.Видимость 			= Истина;
			НоваяСтрока.ТипФайла 			= "epf";
		КонецЕсли;	
		
		// добавим подменю "Алгоритмы" и "Отладка"
		Если НЕ ЕстьПодменюАлгоритмы Тогда
			НоваяСтрока = мСтараяТаблица.Добавить();
			НоваяСтрока.ИмяОбработки 		= "ПодменюАлгоритмы";
			НоваяСтрока.СинонимОбработки 	= "Алгоритмы (подменю)";
			НоваяСтрока.Видимость 			= Истина;
			НоваяСтрока.ТипФайла 			= "";
		КонецЕсли;	
		
		Если НЕ ЕстьПодменюОтладка Тогда
			НоваяСтрока = мСтараяТаблица.Добавить();
			НоваяСтрока.ИмяОбработки 		= "ПодменюОтладка";
			НоваяСтрока.СинонимОбработки 	= "Отладка (подменю)";
			НоваяСтрока.Видимость 			= Истина;
			НоваяСтрока.ТипФайла 			= "";
		КонецЕсли;	
		
		// перегружаем таблицу
		СписокОбработок.Очистить();
		СписокОбработок.Загрузить(мСтараяТаблица);
		
	КонецЕсли;	
	
КонецПроцедуры

// получение списка обработок из файла настроек
Функция ПолучитьСписокОбработокИзФайла() Экспорт
	
	ИмяФайлаНастроек = мКаталогОбработки + "settings.xml";
	
	// получим документ с настройками
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаНастроек);
	Исключение
		Сообщить("Не удалось открыть файл настроек: "+ИмяФайлаНастроек);
		Возврат Неопределено;
	КонецПопытки;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	мСписокУзлов = ДокументDOM.ПолучитьЭлементыПоИмени("СписокОбработок");
	Если мСписокУзлов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	мСписокОбработок = мСписокУзлов[0].ДочерниеУзлы;
	Если мСписокОбработок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	мТаблица = СписокОбработок.ВыгрузитьКолонки();
	
	Для Каждого ОбработкаУзел Из мСписокОбработок Цикл
		
		мНоваяСтрока = мТаблица.Добавить();
		
		Для Каждого Атрибут Из ОбработкаУзел.Атрибуты Цикл
			
			ИмяАтрибута 		= Атрибут.Имя;
			ЗначениеАтрибута 	= Атрибут.Значение;
			
			Если ИмяАтрибута = "ИмяОбработки" ИЛИ 
				 ИмяАтрибута = "СинонимОбработки" ИЛИ
				 ИмяАтрибута = "ТипФайла" Тогда
				 
				мНоваяСтрока[ИмяАтрибута] = ЗначениеАтрибута;
				
			ИначеЕсли ИмяАтрибута = "Видимость" ИЛИ 
				      ИмяАтрибута = "Автозапуск" Тогда
					  
				мНоваяСтрока[ИмяАтрибута] = ПолучитьБулевоИзСтроки(ЗначениеАтрибута);
				
			ИначеЕсли  ИмяАтрибута = "НомерСтроки" Тогда
				мНоваяСтрока[ИмяАтрибута] = ПолучитьЧислоИзСтроки(ЗначениеАтрибута);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;
	
	мТаблица.Сортировать("НомерСтроки");
	Возврат мТаблица;
	
КонецФункции

// заполнение списка обработок стандартными настройками
Процедура ЗаполнитьСписокОбработокСтандартныеНастройки() Экспорт
	
	СписокОбработок.Очистить();
	
	Макет 			= ПолучитьМакет("СтандартныеНастройки");
	ОбластьСписок 	= Макет.ПолучитьОбласть("ОбластьСписок");
	
	Для i = 1 По ОбластьСписок.ВысотаТаблицы Цикл
		
		ИмяОбработки 		= СокрЛП(ОбластьСписок.Область(i,1,i,1).Текст);
		ТипФайла 			= СокрЛП(ОбластьСписок.Область(i,2,i,2).Текст);
		СинонимОбработки 	= СокрЛП(ОбластьСписок.Область(i,3,i,3).Текст);
		
		НоваяСтрока = СписокОбработок.Добавить();
		НоваяСтрока.ИмяОбработки 		= ИмяОбработки;
		НоваяСтрока.ТипФайла 			= ТипФайла;
		НоваяСтрока.СинонимОбработки 	= СинонимОбработки;
		НоваяСтрока.Видимость 			= Истина;
		
	КонецЦикла;
	
КонецПроцедуры

// функции преобразования
// булево из строки
Функция ПолучитьБулевоИзСтроки(Значение) Экспорт
	
	Результат = Ложь;
	Если Значение = "Да" Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// число из строки
Функция ПолучитьЧислоИзСтроки(Значение) Экспорт
	
	Результат = 0;
	Попытка
		Результат = Число(Значение);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// переоткрытие формы обработки
Процедура ПереоткрытьФорму(ЦелеваяФорма) Экспорт
	
	ЦелеваяФорма.Закрыть();
	ЭтотОбъект.ПолучитьФорму().Открыть();
	
КонецПроцедуры

// заполнение массивов предопределенных обработок и отчетов
// (пригодится потом при их запуске)
Процедура ЗаполнитьМассивыПредопределенныхОбработокОтчетов() Экспорт
	
	Макет 			= ПолучитьМакет("СтандартныеНастройки");
	ОбластьСписок 	= Макет.ПолучитьОбласть("ОбластьСписок");
	
	мМассивПредопределенныеОбработки 	= Новый Массив;
	мМассивПредопределенныеОтчеты 		= Новый Массив;
	
	Для i = 1 По ОбластьСписок.ВысотаТаблицы Цикл
		
		ИмяОбработки 		= СокрЛП(ОбластьСписок.Область(i,1,i,1).Текст);
		ТипФайла 			= СокрЛП(ОбластьСписок.Область(i,2,i,2).Текст);
		
		Если ВРег(ТипФайла) = "EPF" Тогда
			мМассивПредопределенныеОбработки.Добавить(ИмяОбработки);
		ИначеЕсли ВРег(ТипФайла) = "ERF" Тогда	
			мМассивПредопределенныеОтчеты.Добавить(ИмяОбработки);
		КонецЕсли;	
		
	КонецЦикла;
	
	// добавим внешние модули
	мМассивПредопределенныеОбработки.Добавить("ирКЭШ");
	мМассивПредопределенныеОбработки.Добавить("ирГлобальный");
	мМассивПредопределенныеОбработки.Добавить("ирОтладка");
	мМассивПредопределенныеОбработки.Добавить("ирПривилегированный");
	мМассивПредопределенныеОбработки.Добавить("ирНеГлобальный");
	мМассивПредопределенныеОбработки.Добавить("ирСервер");
	мМассивПредопределенныеОбработки.Добавить("ирПлатформа");
	
	//Добавим вспомогательные обработки
	мМассивПредопределенныеОбработки.Добавить("ирВводВыраженияВстроенногоЯзыка");
	мМассивПредопределенныеОбработки.Добавить("ирКлсПолеТабличногоДокументаСГруппировками");
	мМассивПредопределенныеОбработки.Добавить("ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой");
	
КонецПроцедуры
// ...Damian

Процедура ОсвободитьВсеИндикаторыПроцессов() Экспорт
	ПолучитьФорму().ОсвободитьВсеИндикаторыПроцессов_Форма();
КонецПроцедуры

тмпФайл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
мКаталогОбработки = тмпФайл.Путь;

//Damian
// "родные", предопределенные обработки и отчеты
ЗаполнитьМассивыПредопределенныхОбработокОтчетов();
//...Damian

мВнешниеМодули = Новый Массив();
мВнешниеМодули.Добавить("ирКЭШ");
мВнешниеМодули.Добавить("ирГлобальный");
мВнешниеМодули.Добавить("ирОтладка");
мВнешниеМодули.Добавить("ирПривилегированный");
мВнешниеМодули.Добавить("ирНеГлобальный");
мВнешниеМодули.Добавить("ирСервер");
мВнешниеМодули.Добавить("ирПлатформа");

Попытка
	
	ирКЭШ 				= ПодключитьВнешнююОбработку("ирКЭШ"				,Ложь, Ложь);
	ирГлобальный 		= ПодключитьВнешнююОбработку("ирГлобальный"			,Ложь, Ложь);
	ирОтладка 			= ПодключитьВнешнююОбработку("ирОтладка"			,Ложь, Ложь);
	ирПривилегированный = ПодключитьВнешнююОбработку("ирПривилегированный"	,Ложь, Ложь);
	ирНеГлобальный 		= ПодключитьВнешнююОбработку("ирНеГлобальный"		,Ложь, Ложь);
	ирСервер 			= ПодключитьВнешнююОбработку("ирСервер"				,Ложь, Ложь);
	ирПлатформа 		= ПодключитьВнешнююОбработку("ирПлатформа"			,Ложь, Ложь);
			
	мНеПодключеныОбработки = Ложь;
	
Исключение
	   	
	мНеПодключеныОбработки = Истина;
	Деструктор();
	ВызватьИсключение; 
	
КонецПопытки;

ДобавитьСвязиВнешнихМодулей();
ирНеглобальный.мирИнициализировать();
ирПлатформа.мирИнициализировать();

Попытка
	мНастройкиИнструментов = ПрочитатьНастройки();
Исключение
	мНастройкиИнструментов = Новый Структура;
	Сообщить(ОписаниеОшибки());
КонецПопытки;

// Damian...
// заполним список используемых обработок
ЗаполнитьСписокОбработок();
Если СписокОбработок.Количество() = 0 Тогда
	ЗаполнитьСписокОбработокСтандартныеНастройки();
КонецЕсли;

// соответствие расположений окна
мСоответствиеРасположенийОкна = Новый Соответствие;
мСоответствиеРасположенийОкна.Вставить(0,ВариантПрикрепленияОкна.Лево);
мСоответствиеРасположенийОкна.Вставить(1,ВариантПрикрепленияОкна.Лево);
мСоответствиеРасположенийОкна.Вставить(2,ВариантПрикрепленияОкна.Право);
мСоответствиеРасположенийОкна.Вставить(3,ВариантПрикрепленияОкна.Верх);
мСоответствиеРасположенийОкна.Вставить(4,ВариантПрикрепленияОкна.Низ);
//...Damian

ирКаталогАлгоритмов = мКаталогОбработки + "Алгоритмы\";

мКлючОбъектаДляСохраненияОбъектовОтладки = "ирИнструментыРазработчикаМобильные-ирОбъектыДляОтладки";

мКартинки = ПолучитьМакет("ирКартинки");

мПолучениеФорм = ПолучитьФорму("ПолучениеФорм");

мИмяСервера = НСтр(СтрокаСоединенияИнформационнойБазы(), "Srvr");
Если мИмяСервера <> "" Тогда
	мИмяСервера = ирГлобальный.ЛксПолучитьПервыйФрагмент(мИмяСервера, ",");	
	мИмяСервера = ирГлобальный.ЛксПолучитьПервыйФрагмент(мИмяСервера, ":");
КонецЕсли;                     

Попытка
	VBScript = Новый COMОбъект("MSScriptControl.ScriptControl");
	VBScript.language = "vbscript";		
	VBScript.AddCode(ТекстСкриптаПолученияВремени());
Исключение
	VBScript = Неопределено;
КонецПопытки;

ирКЭШ_СловарьШаблоновМетаданных = Новый Соответствие;
ирКЭШ_СтруктураХраненияБД = Новый Соответствие;
ирКЭШ_КомпоновщикТаблицыМетаданных = Новый Соответствие;

мВерсия = "2.82.2";

