////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Перем мИскомыйОбъект Экспорт;
Перем ТекущийОбъект;
Перем мСхемаКомпоновки;
Перем мВыборкаРезультата;
Перем мТекстЗапросаБезУсловий;

// Управляет настройкой элеметов управления формы.
//
// Параметры: 
//  Нет.
//
Процедура вНастроитьЭУ()

	Доступность = мИскомыйОбъект <> Неопределено;
	Если Доступность Тогда
		ЭлементыФормы.ОбластьПоиска.Картинка = ирНеглобальный.ПолучитьКартинкуКорневогоТипаЛкс(мИскомыйОбъект.ТипТаблицы);
	Иначе
		ЭлементыФормы.ОбластьПоиска.Картинка = Новый Картинка();
	КонецЕсли;
	ЭлементыФормы.Панель.Доступность = Доступность;
	ЭлементыФормы.КоманднаяПанельПостроительОтчета.Кнопки.НайтиОбъекты.Доступность = Доступность;
	//ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.РедакторОбъектаБД.Доступность = Не Метаданные.Последовательности.Содержит(мИскомыйОбъект.МетаОбъект);
	ЭлементыФормы.Панель.Страницы.НастройкаВыборки.Доступность = Доступность;
	ЭлементыФормы.Панель.Страницы.Обработки.Доступность = НайденныеОбъекты.Количество() > 0;
	ЭлементыФормы.ОбластьПоиска.КнопкаСпискаВыбора = Не МноготабличнаяВыборка;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ОбъединитьСсылки.Доступность = Истина
		И Не МноготабличнаяВыборка
		И мИскомыйОбъект <> Неопределено
		И ирГлобальный.ЛксЛиКорневойТипСсылки(мИскомыйОбъект.ТипТаблицы);
	Если Не ЭлементыФормы.Панель.ТекущаяСтраница.Доступность Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НастройкаВыборки;
	КонецЕсли;
	
КонецПроцедуры // НастроитьЭУ()

Процедура НастроитьСлужебныеКолонкиТабличногоПоляВыборки()
	
	Если МноготабличнаяВыборка Тогда
		КолонкаТП = ЭлементыФормы.ОбъектыДляОбработки.Колонки[мИмяКолонкиПолногоИмениТаблицы];
		КолонкаТП.Данные = мИмяКолонкиПолногоИмениТаблицы;
		КолонкаТП.ТекстШапки = "Таблица";
		КолонкаТП.ТолькоПросмотр = Истина;
		КолонкаТП.ИзменятьВидимость = Ложь;
	КонецЕсли; 
	
	КолонкаТП = ЭлементыФормы.ОбъектыДляОбработки.Колонки[мИмяКолонкиПометки];
	КолонкаТП.Ширина = 3;
	КолонкаТП.ИзменениеРазмера = ИзменениеРазмераКолонки.НеИзменять;
	КолонкаТП.ДанныеФлажка = мИмяКолонкиПометки;
	КолонкаТП.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	КолонкаТП.ТекстШапки = "Пометка";
	КолонкаТП.ИзменятьВидимость = Ложь;
	
	КолонкаТП = ЭлементыФормы.ОбъектыДляОбработки.Колонки[мИмяКолонкиРезультатаОбработки];
	КолонкаТП.Данные = мИмяКолонкиРезультатаОбработки;
	КолонкаТП.ТекстШапки = "Результат обработки";
	КолонкаТП.ТолькоПросмотр = Истина;
	КолонкаТП.ЦветФонаПоля = Новый Цвет(250, 250, 255);
	КолонкаТП.ИзменятьВидимость = Ложь;
	
КонецПроцедуры

Процедура ОбновитьРазмерДинамическойТаблицы() Экспорт

	ирНеглобальный.ПослеЗагрузкиДинамическойВыборкиВТабличноеПолеЛкс(ЭтаФорма, мВыборкаРезультата,
		ЭлементыФормы.КоманднаяПанельНайденныеОбъекты, ЭлементыФормы.КоличествоСтрок);
	ВсеСчитано = Не ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.ЗагрузитьПолностью.Доступность;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.УстановитьФлажки.Доступность = ВсеСчитано И Не ДинамическаяВыборка;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.СнятьПометкиУспешноОбработанных.Доступность = ВсеСчитано И Не ДинамическаяВыборка;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.СнятьФлажки.Доступность = ВсеСчитано И Не ДинамическаяВыборка;
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.Подбор.Доступность = ВсеСчитано И Не ДинамическаяВыборка;
	ЭлементыФормы.ОбъектыДляОбработки.Колонки[мИмяКолонкиПометки].Видимость = ВсеСчитано И Не ДинамическаяВыборка;
	ЭлементыФормы.ОбъектыДляОбработки.Колонки[мИмяКолонкиРезультатаОбработки].Видимость = ВсеСчитано И Не ДинамическаяВыборка;

КонецПроцедуры // ОбновитьРазмерТаблицы()

// Выполняет запрос и выгружает результат в таблицу значений.
//
// Параметры: 
//  Нет.
//
Процедура вВыполнитьОтчет() Экспорт

	НастройкаКомпоновки = Неопределено;
	мЗапрос = ПолучитьЗапросВыборки(НастройкаКомпоновки);
	#Если _ Тогда
	    НастройкаКомпоновки = Новый настройкиКомпоновкиДанных;
	#КонецЕсли
	мРезультатЗапроса = мЗапрос.Выполнить();
	ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПервуюПорциюЛкс(ЭтаФорма, мРезультатЗапроса, мВыборкаРезультата,
		ЭлементыФормы.КоманднаяПанельНайденныеОбъекты);
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//НайденныеОбъекты = ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	СтрокаИндекса = "";
	СтруктураКлюча = ирНеглобальный.ПолучитьСтруктуруКлючаТаблицыБДЛкс(?(МноготабличнаяВыборка, ОбластьПоиска[0], ОбластьПоиска));
	Для Каждого ЭлементКлюча Из СтруктураКлюча Цикл
		СтрокаИндекса = СтрокаИндекса + "," + ЭлементКлюча.Ключ;
	КонецЦикла;
	СтрокаИндекса = Сред(СтрокаИндекса, 2);

	НайденныеОбъекты.Колонки.Вставить(0, мИмяКолонкиПометки, Новый ОписаниеТипов("Булево"));
	НайденныеОбъекты.Колонки.Добавить(мИмяКолонкиРезультатаОбработки, Новый ОписаниеТипов("Строка"));
	НайденныеОбъекты.Индексы.Добавить(СтрокаИндекса);
	СтрокаИндексаОбъекта = мИмяКолонкиПометки;
	СтруктураКлючаОбъекта = ирНеглобальный.ПолучитьСтруктуруКлючаТаблицыБДЛкс(?(МноготабличнаяВыборка, ОбластьПоиска[0], ОбластьПоиска), Ложь);
	Для Каждого КлючИЗначение Из СтруктураКлючаОбъекта Цикл
		СтрокаИндексаОбъекта = СтрокаИндексаОбъекта + "," + КлючИЗначение.Ключ;
	КонецЦикла;
	НайденныеОбъекты.Индексы.Добавить(СтрокаИндексаОбъекта);
	ЭлементыФормы.ОбъектыДляОбработки.СоздатьКолонки();
	КолонкиТабличногоПоля = ЭлементыФормы.ОбъектыДляОбработки.Колонки;
	ЭлементыВыбора = НастройкаКомпоновки.Выбор.Элементы;
	КоличествоПолей = ЭлементыВыбора.Количество();
	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		ПолеВыбора = ЭлементыВыбора[КоличествоПолей - 1 - Индекс];
		Если Не ПолеВыбора.Использование Тогда
			Продолжить;
		КонецЕсли; 
		ИмяПоля = СтрЗаменить(ПолеВыбора.Поле, ".", "");
		КолонкаТП = КолонкиТабличногоПоля[ИмяПоля];
		КолонкиТабличногоПоля.Сдвинуть(КолонкаТП, -(КолонкиТабличногоПоля.Количество() - 1));
	КонецЦикла;
	КолонкаТП = КолонкиТабличногоПоля[мИмяКолонкиПометки];
	КолонкиТабличногоПоля.Сдвинуть(КолонкаТП, -КолонкиТабличногоПоля.Индекс(КолонкаТП));
	НастроитьСлужебныеКолонкиТабличногоПоляВыборки();
	
	ДинамическаяВыборкаПриИзменении();
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Получить(1);
	//Для каждого Строка из НайденныеОбъекты Цикл
	//	Строка[мИмяКолонкиПометки] = Истина;
	//КонецЦикла;
	НайденныеОбъекты.ЗаполнитьЗначения(Истина, мИмяКолонкиПометки);
	
	вНастроитьЭУ();

КонецПроцедуры // вВыполнитьОтчет()

// НастройкаКомпоновки - выход
Функция ПолучитьЗапросВыборки(НастройкаКомпоновки =  Неопределено)

	вНастроитьПостроитель();
	
	Компоновщик.Восстановить();
	СписокПолейКлюча = ирНеглобальный.ПолучитьСтруктуруКлючаТаблицыБДЛкс(?(МноготабличнаяВыборка, ОбластьПоиска[0], ОбластьПоиска), , Ложь);
	НастройкаКомпоновки = Компоновщик.ПолучитьНастройки();
	ЭлементыВыбора = НастройкаКомпоновки.Выбор.Элементы;
	Если АвтоВыбранныеПоля Тогда
		ЭлементыВыбора.Очистить();
	КонецЕсли; 
	ЭлементыПорядка = НастройкаКомпоновки.Порядок.Элементы;
	Если Автоупорядочивание Тогда
		ЭлементыПорядка.Очистить();
	КонецЕсли; 
	Если МноготабличнаяВыборка Тогда
		ЭлементВыбора = ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(ЭлементыВыбора, мИмяКолонкиПолногоИмениТаблицы);
		ЭлементыВыбора.Сдвинуть(ЭлементВыбора, -(ЭлементыВыбора.Количество() - 1));
		Если Автоупорядочивание Тогда
			ЭлементПорядка = ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Порядок, мИмяКолонкиПолногоИмениТаблицы);
			ЭлементыПорядка.Сдвинуть(ЭлементПорядка, -(ЭлементыПорядка.Количество() - 1));
		КонецЕсли;
	КонецЕсли; 
	Смещение = ЭлементыВыбора.Количество();
	КоличествоПолей = СписокПолейКлюча.Количество();
	Для Индекс = 0 По КоличествоПолей - 1 Цикл
		ЭлементСписка = СписокПолейКлюча[КоличествоПолей - 1 - Индекс];
		ЭлементВыбора = ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(ЭлементыВыбора, ЭлементСписка.Представление);
		ЭлементВыбора.Использование = Истина;
		ЭлементыВыбора.Сдвинуть(ЭлементВыбора, -(ЭлементыВыбора.Количество() - 1 - Смещение));
		Если Автоупорядочивание Тогда
			ЭлементПорядка = ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(НастройкаКомпоновки.Порядок, ЭлементСписка.Представление);
			ЭлементыПорядка.Сдвинуть(ЭлементПорядка, -ЭлементыПорядка.Индекс(ЭлементПорядка));
		КонецЕсли; 
	КонецЦикла;
	НастройкаКомпоновки.ПараметрыДанных.УстановитьЗначениеПараметра("СтрокаПоиска", "%" + СтрокаПоиска + "%");
	Если АвтоВыбранныеПоля Тогда
		Для Каждого ЭлементОтбора Из НастройкаКомпоновки.Отбор.Элементы Цикл
			Если Ложь
				Или ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или Не ЭлементОтбора.Использование
				Или (Истина
					И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
					И ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных"))
			Тогда
				Продолжить;
			КонецЕсли; 
			ВыбранноеПоле = ЭлементыВыбора.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ЭлементОтбора.ЛевоеЗначение;
		КонецЦикла; 
		Если ВыбратьВсеПоля Тогда
			Для Каждого ДоступноеПолеВыбора Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
				Если ДоступноеПолеВыбора.Папка Тогда
					Продолжить;
				КонецЕсли; 
				ВыбранноеПоле = НастройкаКомпоновки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ВыбранноеПоле.Поле = ДоступноеПолеВыбора.Поле;
			КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;
	Запрос = ирНеглобальный.ПолучитьЗапросИзКомпоновкиЛкс(мСхемаКомпоновки, НастройкаКомпоновки, Истина);
	Возврат Запрос;

КонецФункции

Процедура ОбновитьДоступностьКнопкиСнятьПометкиУспешноОбработанных() Экспорт
	
	ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.СнятьПометкиУспешноОбработанных.Доступность = НайденныеОбъекты.Колонки.Найти(мИмяКолонкиРезультатаОбработки) <> Неопределено;
	
КонецПроцедуры

// Формирует текст запроса.
//
// Параметры: 
//  УсловиеПоискаПоСтроке - строка поиска.
//
Функция вПолучитьТекстЗапроса()

	Условие = "";
	
	ТекстЗапроса = "ВЫБРАТЬ ";
	ТекстРеквизитов = "";
	//ПолноеИмяМД = ИскомыйОбъект.МетаОбъект.ПолноеИмя();
	ПолноеИмяМД = ОбластьПоиска;
	КомпоновщикТаблицы = ирКэш.ПолучитьКомпоновщикТаблицыМетаданныхЛкс(ПолноеИмяМД);
	Для Каждого ДоступноеПоле Из КомпоновщикТаблицы.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.Папка Тогда
			Продолжить;
		КонецЕсли;
		ТекстРеквизитов = ТекстРеквизитов + ", " + Символы.ПС + "_Таблица_." + ДоступноеПоле.Поле + " КАК " + ДоступноеПоле.Поле;
	КонецЦикла; 
	ТекстЗапроса = ТекстЗапроса + Сред(ТекстРеквизитов, 2);
	ПолноеИмяТаблицыБД = ирНеглобальный.ПолучитьИмяТаблицыИзМетаданныхЛкс(ПолноеИмяМД);
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ" + Символы.ПС + ПолноеИмяТаблицыБД + " КАК _Таблица_" + Символы.ПС;
	Если ирГлобальный.ЛксЛиКорневойТипОбъектаБД(ПолноеИмяМД) Тогда
		Для каждого ТЧ Из мИскомыйОбъект.МетаОбъект.ТабличныеЧасти Цикл
			Для каждого ТЧР Из ТЧ.Реквизиты Цикл
				Если Условие <> "" Тогда
					Условие = Условие + "," + Символы.ПС;
				КонецЕсли;
				Условие = Условие + "_Таблица_." + ТЧ.Имя + "." + ТЧР.Имя + ".* КАК " + ТЧ.Имя + "_тч_" + ТЧР.Имя;
			КонецЦикла; 
		КонецЦикла;
	КонецЕсли; 
	Если Условие <> "" Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|{ГДЕ " + Условие + "}";
	КонецЕсли;
	Возврат ТекстЗапроса;

КонецФункции // ПолучитьТекстЗапроса()

// Выполняет настройку объекта ПостроительОтчетов.
//
// Параметры: 
//  Нет.
//
Процедура вНастроитьПостроитель(СохранятьТекущиеНастройки = Истина)

	Перем Настройки;

	Если мИскомыйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СохранятьТекущиеНастройки Тогда
		Настройки = Компоновщик.ПолучитьНастройки();
		НастройкиКомпоновки.Вставить(ТекущийОбъект, Настройки);
	КонецЕсли;
	
	Если МноготабличнаяВыборка Тогда
		ОбластьПоиска.СортироватьПоЗначению();
		ИменаОбъектовМД = ОбластьПоиска.ВыгрузитьЗначения();
		ТекстЗапроса = ирНеглобальный.ПолучитьТекстЗапросаПоВыбраннымМетаданнымЛкс(ИменаОбъектовМД);
		мТекстЗапросаБезУсловий = ТекстЗапроса;
		НовыйТекущийОбъект = ирГлобальный.ЛксПолучитьСтрокуСРазделителемИзМассива(ИменаОбъектовМД, ",");
	Иначе
		Если мИскомыйОбъект.МетаОбъект = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		НовыйТекущийОбъект = мИскомыйОбъект.МетаОбъект.ПолноеИмя();
		МетаданныеОбъекта = ирГлобальный.ЛксПолучитьМетаданные(ОбластьПоиска);
		ТекстЗапроса = вПолучитьТекстЗапроса();
		мТекстЗапросаБезУсловий = ТекстЗапроса;
	КонецЕсли; 
	лЗапрос = Новый Запрос;
	лЗапрос.Текст = ТекстЗапроса;
	лСхемаКомпоновки = ирНеглобальный.ПолучитьСхемуКомпоновкиПоЗапросуЛкс(лЗапрос);
	лКомпоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	лКомпоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(лСхемаКомпоновки));
	Если СтрокаПоиска <> "" Тогда
		УсловиеПоискаПоСтроке = "";
		//лСтрокаПоиска = СтрЗаменить(СтрокаПоиска, """", """""");
		Для Каждого ДоступноеПоле Из лКомпоновщик.Настройки.ДоступныеПоляОтбора.Элементы Цикл
			Если ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1068452#1068452
				Если Истина
					И НРег(ДоступноеПоле.Поле) = НРег("ВерсияДанных")
					И ирГлобальный.ЛксЛиКорневойТипСсылки(мИскомыйОбъект.ТипТаблицы)
				Тогда
					Продолжить;
				КонецЕсли; 
				Если Истина
					И МноготабличнаяВыборка
					И "" + ДоступноеПоле.Поле = мИмяКолонкиПолногоИмениТаблицы
				Тогда
					Продолжить;
				КонецЕсли; 
				
				Если УсловиеПоискаПоСтроке <> "" Тогда
					УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ИЛИ ";
				КонецЕсли;
				УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " _Таблица_." + ДоступноеПоле.Поле + " ПОДОБНО &СтрокаПоиска";
				//УсловиеПоискаПоСтроке = УсловиеПоискаПоСтроке + " ВЫРАЗИТЬ(_Таблица_." + ДоступноеПоле.Поле + " КАК СТРОКА) ПОДОБНО &СтрокаПоиска";
			КонецЕсли;
		КонецЦикла;
		Если УсловиеПоискаПоСтроке <> "" Тогда
			Если МноготабличнаяВыборка Тогда
				ТекстЗапроса = "ВЫБРАТЬ _Таблица_.* ИЗ (" + ТекстЗапроса + ") КАК _Таблица_ ГДЕ " + УсловиеПоискаПоСтроке; 
			Иначе
				ТекстЗапроса = ТекстЗапроса + "
				|ГДЕ " + УсловиеПоискаПоСтроке;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("СтрокаПоиска", "");
	мСхемаКомпоновки = ирНеглобальный.ПолучитьСхемуКомпоновкиПоЗапросуЛкс(Запрос);
	#Если _ Тогда
	    мСхемаКомпоновки = Новый СхемаКомпоновкиДанных
	#КонецЕсли
	мСхемаКомпоновки.Параметры.Найти("СтрокаПоиска").ВключатьВДоступныеПоля = Ложь;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
	//Если МноготабличнаяВыборка Тогда
	//	Компоновщик.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(мИмяКолонкиПолногоИмениТаблицы)).Заголовок = "<Таблица>";
	//КонецЕсли; 
	//УстановитьПредставленияПолей();
	ТекущийОбъект = НовыйТекущийОбъект;
	СтарыеНастройки = НастройкиКомпоновки[ТекущийОбъект];
	Если СтарыеНастройки <> Неопределено Тогда
		Компоновщик.ЗагрузитьНастройки(СтарыеНастройки);
	КонецЕсли;
	Если Компоновщик.Настройки.Порядок.Элементы.Количество() = 0 Тогда
		Если ирГлобальный.ЛксЛиКорневойТипСсылки(мИскомыйОбъект.ТипТаблицы) Тогда
			ирНеглобальный.НайтиДобавитьЭлементНастроекКомпоновкиПоПолюЛкс(Компоновщик.Настройки.Порядок, "Ссылка");
		КонецЕсли; 
	КонецЕсли; 
	Компоновщик.Настройки.Структура.Очистить();
	ирНеглобальный.НайтиДобавитьЭлементСтруктурыГруппировкаКомпоновкиЛкс(Компоновщик.Настройки.Структура);

КонецПроцедуры // НастроитьПостроитель()

Функция вОбработкаДоступна(ПроверяемыйТипОбъекта = "", ИмяОбработки)

	//Если ПустаяСтрока(ПроверяемыйТипОбъекта) Тогда
	//	Возврат Ложь;
	//КонецЕсли;

	//ТипыОбрабатываемыхОбъектов = ПолучитьФорму(ИмяОбработки).мТипыОбрабатываемыхОбъектов;

	//Если ТипыОбрабатываемыхОбъектов = Неопределено Тогда
    	Возврат Истина;
	//Иначе
	//	Если Найти(ТипыОбрабатываемыхОбъектов, ПроверяемыйТипОбъекта) Тогда
	//		Возврат Истина;
	//	Иначе
	//		Возврат Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
КонецФункции // ОбработкаДоступна()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	//Если ЭтаФорма.КлючУникальности = Неопределено Тогда
	//	Отказ = Истина;
	//	ЭтотОбъект.ПолучитьФорму("ПодборИОбработка",, Новый УникальныйИдентификатор()).Открыть();
	//КонецЕсли;

КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если КлючУникальности <> Неопределено Тогда
		ОбъектМД = Метаданные.НайтиПоПолномуИмени(КлючУникальности);
		Если ОбъектМД <> Неопределено Тогда
			Попытка
				УстановитьОбластьПоиска(ирНеглобальный.ПолучитьИмяТаблицыИзМетаданныхЛкс(КлючУникальности));
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки; 
		КонецЕсли;
	КонецЕсли; 

	ВосстановленныеДоступныеОбработки = ВосстановитьЗначение("ДоступныеОбработки");
	Если НЕ ВосстановленныеДоступныеОбработки = Неопределено Тогда
		//ДоступныеОбработки = ВосстановленныеДоступныеОбработки;
		ирГлобальный.ЛксЗагрузитьВДеревоЗначений(ВосстановленныеДоступныеОбработки, ДоступныеОбработки);
	КонецЕсли;

	ВосстановленныеВыбранныеОбработки = ВосстановитьЗначение("ВыбранныеОбработки");
	Если НЕ ВосстановленныеВыбранныеОбработки = Неопределено Тогда
		ВыбранныеОбработки = ВосстановленныеВыбранныеОбработки;
	КонецЕсли;
	
	АвтоВыбранныеПоляПриИзменении();
	АвтоупорядочиваниеПриИзменении();
	вЗагрузитьОбработки(ДоступныеОбработки, ВыбранныеОбработки);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()

    СохранитьЗначение("ДоступныеОбработки", ДоступныеОбработки);
	СохранитьЗначение("ВыбранныеОбработки", ВыбранныеОбработки);
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)

	Если Истина
		И ТекущийОбъект <> ""
		И ЭтаФорма.КлючУникальности = Неопределено
	Тогда
		Настройки = Компоновщик.ПолучитьНастройки();
		НастройкиКомпоновки.Вставить(ТекущийОбъект, Настройки);
	КонецЕсли;

КонецПроцедуры // ПередСохранениемЗначений()

Процедура ПослеВосстановленияЗначений()

	МноготабличнаяВыборка = ТипЗнч(ОбластьПоиска) = Тип("СписокЗначений");
	Попытка
		УстановитьОбластьПоиска();
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки; 
	АвтоВыбранныеПоляПриИзменении();
	АвтоупорядочиваниеПриИзменении();

КонецПроцедуры // ПослеВосстановленияЗначений()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ПостроительОтчета

Процедура ВыполнитьПоиск(Кнопка)

	вВыполнитьОтчет();

КонецПроцедуры // ВыполнитьПоиск()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ НайденныеОбъекты

Процедура КоманднаяПанельНайденныеОбъектыУстановитьФлажки(Кнопка)

	Для каждого Строка из НайденныеОбъекты Цикл
		Строка[мИмяКолонкиПометки] = Истина;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельНайденныеОбъектыУстановитьФлажки()

Процедура КоманднаяПанельНайденныеОбъектыСнятьФлажки(Кнопка)

	Для каждого Строка из НайденныеОбъекты Цикл
		Строка[мИмяКолонкиПометки] = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельНайденныеОбъектыСнятьФлажки()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОбъектыДляОбработки

Процедура НайденныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);

КонецПроцедуры // НайденныеОбъектыВыбор()

Процедура НайденныеОбъектыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	Если Не ирГлобальный.ЛксЛиКорневойТипОбъектаБД(ОбластьПоиска) Тогда
		Возврат;
	КонецЕсли; 
	ФормаВыбора = ПолучитьФорму(ОбластьПоиска + ".ФормаВыбора",, ЭлементыФормы.ОбъектыДляОбработки); 
	//ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры // НайденныеОбъектыПередНачаломДобавления()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура ДоступныеОбработкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если Не ОбработкаРазрешенаДляТаблицы(ВыбраннаяСтрока) Тогда
		Возврат;
	КонецЕсли; 

	Если ВыбраннаяСтрока.Родитель = Неопределено Тогда
		Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, ВыбраннаяСтрока.ИмяФормы) Тогда
            Предупреждение("Данная обработка недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
			Возврат;
		КонецЕсли;
		Обработка = ПолучитьФорму(ВыбраннаяСтрока.ИмяФормы, ЭтаФорма);
	Иначе
		Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, ВыбраннаяСтрока.Родитель.ИмяФормы) Тогда
            Предупреждение("Данная обработка недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
			Возврат;
		КонецЕсли;
		Обработка = ПолучитьФорму(ВыбраннаяСтрока.Родитель.ИмяФормы, ЭтаФорма);
	КонецЕсли;

	Обработка.ТекущаяНастройка = ВыбраннаяСтрока;
	Обработка.Открыть();
	
КонецПроцедуры // ДоступныеОбработкиВыбор()

Процедура ДоступныеОбработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;

	Если Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
		Если Копирование Тогда
			Отказ = Истина;
        Иначе
			Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, Элемент.ТекущиеДанные.ИмяФормы) Тогда
	            Предупреждение("Данная обработка недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			Отказ = НЕ ПолучитьФорму(Элемент.ТекущиеДанные.ИмяФормы).мИспользоватьНастройки;
		КонецЕсли;
	Иначе
		Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, Элемент.ТекущиеДанные.Родитель.ИмяФормы) Тогда
			Предупреждение("Данная обработка недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
        Отказ = Истина;
		Если НЕ Копирование Тогда
			Если ПолучитьФорму(Элемент.ТекущиеДанные.Родитель.ИмяФормы).мИспользоватьНастройки Тогда
				ЭлементыФормы.ДоступныеОбработки.ТекущаяСтрока = Элемент.ТекущиеДанные.Родитель.Строки.Добавить();
				ЭлементыФормы.ДоступныеОбработки.ИзменитьСтроку();
			КонецЕсли;
		Иначе

			НоваяСтрока = Элемент.ТекущиеДанные.Родитель.Строки.Добавить();
			НоваяСтрока.Обработка = Элемент.ТекущиеДанные.Обработка;

			Если НЕ Элемент.ТекущиеДанные.Настройка = Неопределено Тогда
				НоваяНастройка = Новый Структура();
				Для каждого РеквизитНастройки из Элемент.ТекущиеДанные.Настройка Цикл
	                Значение = РеквизитНастройки.Значение;
					Выполнить("НоваяНастройка.Вставить(Строка(РеквизитНастройки.Ключ), Значение);");
				КонецЦикла;

				НоваяСтрока.Настройка = НоваяНастройка;
			КонецЕсли;
			
			ЭлементыФормы.ДоступныеОбработки.ТекущаяСтрока = НоваяСтрока;
			ЭлементыФормы.ДоступныеОбработки.ИзменитьСтроку();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДоступныеОбработкиПередНачаломДобавления()

Процедура ДоступныеОбработкиПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущаяСтрока.Родитель = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Вопрос("Удалить настройку?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК) = КодВозвратаДиалога.ОК Тогда
        ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СтрокаДоступнойОбработки", Элемент.ТекущаяСтрока);
		МассивДляУдаления = ВыбранныеОбработки.НайтиСтроки(ПараметрыОтбора);
		Для Индекс = 0 по МассивДляУдаления.Количество() - 1 Цикл
			ВыбранныеОбработки.Удалить(МассивДляУдаления[Индекс]);
		КонецЦикла;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоступныеОбработкиПередУдалением()

Процедура ДоступныеОбработкиПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущиеДанные.Родитель = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДоступныеОбработкиПередНачаломИзменения()

Процедура ДобавитьВВыбранныеНажатие(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ДоступныеОбработки.ТекущаяСтрока;
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		Если Не ОбработкаРазрешенаДляТаблицы(ТекущаяСтрока) Тогда
			Возврат;
		КонецЕсли; 
		Если ТекущаяСтрока.Родитель = Неопределено Тогда
			ИмяФормы = ТекущаяСтрока.ИмяФормы;
			Если ПолучитьФорму(ИмяФормы).мИспользоватьНастройки Тогда
				Возврат;
			КонецЕсли;
			Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, ТекущаяСтрока.ИмяФормы) Тогда
	            Предупреждение("Данная обработка недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
				Возврат;
			КонецЕсли;
			НоваяСтрока = ВыбранныеОбработки.Добавить();
			НоваяСтрока.СтрокаДоступнойОбработки = ТекущаяСтрока;
			НоваяСтрока.Пометка                  = Истина;
		Иначе
            ИмяФормы = ТекущаяСтрока.Родитель.ИмяФормы;
			Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, ТекущаяСтрока.Родитель.ИмяФормы) Тогда
	            Предупреждение("Данная обработка недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
				Возврат;
			КонецЕсли;
			НоваяСтрока = ВыбранныеОбработки.Добавить();
			НоваяСтрока.СтрокаДоступнойОбработки = ТекущаяСтрока;
			НоваяСтрока.Пометка                  = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбранныеОбработкиПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если НЕ Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбранныеОбработкиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
    Если ВыбраннаяСтрока.СтрокаДоступнойОбработки.Родитель = Неопределено Тогда
		Обработка = ПолучитьФорму(ВыбраннаяСтрока.СтрокаДоступнойОбработки.ИмяФормы, ЭтаФорма);
	Иначе
		Обработка = ПолучитьФорму(ВыбраннаяСтрока.СтрокаДоступнойОбработки.Родитель.ИмяФормы, ЭтаФорма);
	КонецЕсли;

	Обработка.ТекущаяНастройка = ВыбраннаяСтрока.СтрокаДоступнойОбработки;
	Обработка.Открыть();

КонецПроцедуры // ВыбранныеОбработкиВыбор()

Процедура КоманднаяПанельВыбранныеОбработкиВыполнить(Кнопка)

	Индикатор = ирГлобальный.ЛксПолучитьИндикаторПроцесса(ВыбранныеОбработки.Количество(), "Обработки");
	Для каждого Строка из ВыбранныеОбработки Цикл
		ирГлобальный.ЛксОбработатьИндикатор(Индикатор);
		Если Строка.Пометка Тогда
			Если Строка.СтрокаДоступнойОбработки.Родитель = Неопределено Тогда
				ИмяФормы = Строка.СтрокаДоступнойОбработки.ИмяФормы;
			Иначе
				ИмяФормы = Строка.СтрокаДоступнойОбработки.Родитель.ИмяФормы;
			КонецЕсли;
			Если НЕ вОбработкаДоступна(мИскомыйОбъект.КорневойТип, ИмяФормы) Тогда
	            Сообщить("Обработка " + ИмяФормы + " недоступна для типа <" + мИскомыйОбъект.КорневойТип + ">");
				Продолжить;
			КонецЕсли;
			Обработка = ПолучитьФорму(ИмяФормы, ЭтаФорма);
			Обработка.ТекущаяНастройка = Строка.СтрокаДоступнойОбработки;
			Обработка.вЗагрузитьНастройку();
			Обработка.вВыполнитьОбработку();
		КонецЕсли;
	КонецЦикла;
	ирГлобальный.ЛксОсвободитьИндикаторПроцесса();

КонецПроцедуры // КоманднаяПанельОбработкиВыполнить()

Процедура КоманднаяПанельВыбранныеОбработкиУстановитьФлажки(Кнопка)

	Для каждого Строка из ВыбранныеОбработки Цикл
		Строка.Пометка = Истина;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельВыбранныеОбработкиУстановитьФлажки()

Процедура КоманднаяПанельВыбранныеОбработкиСнятьФлажки(Кнопка)

	Для каждого Строка из ВыбранныеОбработки Цикл
		Строка.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельВыбранныеОбработкиСнятьФлажки()

Функция ОбработкаРазрешенаДляТаблицы(Знач СтрокаПроверки)
	
	Если мИскомыйОбъект = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если СтрокаПроверки.Родитель <> Неопределено Тогда
		СтрокаПроверки = СтрокаПроверки.Родитель;
	КонецЕсли; 
	Если Истина
		И ирГлобальный.ЛксЛиКорневойТипОбъектаБД(мИскомыйОбъект.ТипТаблицы)
		И РежимОбходаДанных <> "КлючиОбъектов"
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "СсылочныйОбъект" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И (Ложь
			Или ирГлобальный.ЛксЛиКорневойТипОбъектаБД(мИскомыйОбъект.ТипТаблицы)
			Или ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(мИскомыйОбъект.ТипТаблицы))
		И РежимОбходаДанных = "КлючиОбъектов"
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "Ссылка" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И мИскомыйОбъект.ТипТаблицы = "Документ"
		И РежимОбходаДанных <> "КлючиОбъектов"
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "ДокументОбъект" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И РежимОбходаДанных = "Объекты"
		И ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(мИскомыйОбъект.ТипТаблицы)
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "СсылочныйОбъект" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И РежимОбходаДанных = "Объекты"
		И мИскомыйОбъект.КорневойТип = "Документ"
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "ДокументОбъект" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И РежимОбходаДанных = "Объекты"
		И (Ложь
			Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.ТипТаблицы) 
			Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(мИскомыйОбъект.ТипТаблицы))
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "НаборЗаписей" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И РежимОбходаДанных = "КлючиОбъектов"
		И (Ложь
			Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.ТипТаблицы) 
			Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(мИскомыйОбъект.ТипТаблицы))
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "НаборЗаписей" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И РежимОбходаДанных = "Строки"
		И (Ложь
			Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.ТипТаблицы) 
			Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(мИскомыйОбъект.ТипТаблицы))
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "РегистрЗапись" + ",") > 0
	Тогда
		Возврат Истина;
	ИначеЕсли Истина
		И РежимОбходаДанных = "Строки"
		И ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(мИскомыйОбъект.ТипТаблицы)
		И Найти(СтрокаПроверки.ПоддерживаемыеТипыТаблиц + ",", "ТабличнаяЧастьСтрока" + ",") > 0
	Тогда
		Возврат Истина;
	КонецЕсли; 
	Возврат Ложь;
	
КонецФункции

Процедура ДоступныеОбработкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки["Обработка"].ОтображатьКартинку = Истина;
	Если ДанныеСтроки.Родитель = Неопределено Тогда
		ОформлениеСтроки.Ячейки["Обработка"].ИндексКартинки = 0;
	Иначе
		ОформлениеСтроки.Ячейки["Обработка"].ИндексКартинки = 1;
	КонецЕсли;
	Если Не ОбработкаРазрешенаДляТаблицы(ДанныеСтроки) Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(100, 100, 100);
	КонецЕсли; 
	
КонецПроцедуры // ДоступныеОбработкиПриВыводеСтроки()

Процедура ВыбранныеОбработкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

    СтрокаДоступнойОбработки = ДанныеСтроки.СтрокаДоступнойОбработки;
	Если НЕ СтрокаДоступнойОбработки = Неопределено Тогда
        Если СтрокаДоступнойОбработки.Родитель = Неопределено Тогда
			ОформлениеСтроки.Ячейки.ОбработкаНастройка.УстановитьТекст(Строка(СтрокаДоступнойОбработки.Обработка));
		Иначе
			ОформлениеСтроки.Ячейки.ОбработкаНастройка.УстановитьТекст(Строка(СтрокаДоступнойОбработки.Родитель.Обработка) + " - " + Строка(СтрокаДоступнойОбработки.Обработка));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДоступныеОбработкиСохранитьНастройку(Кнопка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Фильтр = ирНеглобальный.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sav", "Файл сохраненной настройки");
	ДиалогВыбораФайла.Заголовок                   =	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	//ДиалогВыбораФайла.ИндексФильтра               =	0;
	//ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;

	Настройка = Новый Соответствие();

	ВыбранныеОбработкиДляСохранения = Новый ТаблицаЗначений;

	ВыбранныеОбработкиДляСохранения.Колонки.Добавить("ИмяФормы");
	ВыбранныеОбработкиДляСохранения.Колонки.Добавить("НомерНастройки");
	ВыбранныеОбработкиДляСохранения.Колонки.Добавить(мИмяКолонкиПометки);

	Для каждого ВыбраннаяОбработка из ВыбранныеОбработки Цикл
		НоваяСтрока = ВыбранныеОбработкиДляСохранения.Добавить();
        Если ВыбраннаяОбработка.СтрокаДоступнойОбработки.Родитель = Неопределено Тогда
			НоваяСтрока.ИмяФормы       = ВыбраннаяОбработка.СтрокаДоступнойОбработки.ИмяФормы;
			НоваяСтрока.НомерНастройки = ВыбраннаяОбработка.СтрокаДоступнойОбработки.Строки.Индекс(ВыбраннаяОбработка.СтрокаДоступнойОбработки);
			НоваяСтрока.Пометка        = ВыбраннаяОбработка.Пометка;
		Иначе
			НоваяСтрока.ИмяФормы       = ВыбраннаяОбработка.СтрокаДоступнойОбработки.Родитель.ИмяФормы;
			НоваяСтрока.НомерНастройки = ВыбраннаяОбработка.СтрокаДоступнойОбработки.Родитель.Строки.Индекс(ВыбраннаяОбработка.СтрокаДоступнойОбработки);
			НоваяСтрока.Пометка        = ВыбраннаяОбработка.Пометка;
		КонецЕсли;
	КонецЦикла;

	Настройка.Вставить("ДоступныеОбработки", ДоступныеОбработки);
	Настройка.Вставить("ВыбранныеОбработки", ВыбранныеОбработкиДляСохранения);

	Если НЕ ЗначениеВФайл(ИмяФайла, Настройка) Тогда
		Предупреждение("Настройка не сохранена!!!");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДоступныеОбработкиЗагрузитьНастройку(Кнопка)

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр = ирНеглобальный.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sav", "Файл сохраненной настройки");
	ДиалогВыбораФайла.Заголовок                   =	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     =	Ложь;
	ДиалогВыбораФайла.Расширение                  =	"sav";
	//ДиалогВыбораФайла.ИндексФильтра               =	0;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;

	Настройка = ЗначениеИзФайла(ИмяФайла);
	ДоступныеОбработки            = Настройка["ДоступныеОбработки"];
	ВыбранныеОбработкиДляЗагрузки = Настройка["ВыбранныеОбработки"];

	ВыбранныеОбработки.Очистить();

	Для каждого ВыбраннаяОбработка из ВыбранныеОбработкиДляЗагрузки Цикл
        Форма = ДоступныеОбработки.Строки.Найти(ВыбраннаяОбработка.ИмяФормы, "ИмяФормы");
		Если НЕ Форма = Неопределено Тогда
			Если ПолучитьФорму(ВыбраннаяОбработка.ИмяФормы).мИспользоватьНастройки Тогда
				Настройка = Форма.Строки.Получить(ВыбраннаяОбработка.НомерНастройки);
			Иначе
				Настройка = Форма;
			КонецЕсли;
			
            Если НЕ Настройка = Неопределено Тогда
				НоваяСтрока = ВыбранныеОбработки.Добавить();
				НоваяСтрока.СтрокаДоступнойОбработки = Настройка;
				НоваяСтрока.Пометка                  = ВыбраннаяОбработка.Пометка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	вЗагрузитьОбработки(ДоступныеОбработки, ВыбранныеОбработки);
	
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельОчиститьНатройкиОбработок(Кнопка)

	СохранитьЗначение("ДоступныеОбработки", Неопределено);
	СохранитьЗначение("ВыбранныеОбработки", Неопределено);

	ДоступныеОбработки.Строки.Очистить();
	ВыбранныеОбработки.Очистить();

	вЗагрузитьОбработки(ДоступныеОбработки, ВыбранныеОбработки);
	
КонецПроцедуры // ГлавнаяКоманднаяПанельОчиститьНатройкиОбработок()

Процедура ПредставлениеОбластиПоискаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", Элемент, ЭтаФорма);

	лСтруктураПараметров = Новый Структура;
	Если МноготабличнаяВыборка Тогда
		лНачальноеЗначениеВыбора = ОбластьПоиска.ВыгрузитьЗначения();
	Иначе
		лНачальноеЗначениеВыбора = ОбластьПоиска;
	КонецЕсли; 
	лСтруктураПараметров.Вставить("НачальноеЗначениеВыбора", лНачальноеЗначениеВыбора);
	лСтруктураПараметров.Вставить("ОтображатьКонстанты", Истина);
	лСтруктураПараметров.Вставить("ОтображатьВыборочныеТаблицы", Истина);
	лСтруктураПараметров.Вставить("ОтображатьТаблицыИзменений", Истина);
	лСтруктураПараметров.Вставить("ОтображатьТабличныеЧасти", Истина);
	лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("ОтображатьПоследовательности", Истина);
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	лСтруктураПараметров.Вставить("МножественныйВыбор", МноготабличнаяВыборка);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	Форма.ОткрытьМодально();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Устанавливает новую область поиска.
//
// Параметры:
//  *пОбластьПоиска – Строка, "" – новая область поиска.
//
Процедура УстановитьОбластьПоиска(пОбластьПоиска = Null) Экспорт
	
	// Закомментировал 31.03.2012 для корректной работы последних выбранных значений
	//Если пОбластьПоиска = ОбластьПоиска Тогда
	//	Возврат;
	//КонецЕсли;
	
	//Если ТипЗнч(ОбластьПоиска) = Тип("СписокЗначений") Тогда
	//	МноготабличнаяВыборка = Истина;
	//КонецЕсли; 
	СохранятьТекущиеНастройки = Истина
		И Не МножественныйВыбор
		И ЗначениеЗаполнено(пОбластьПоиска);
	Если пОбластьПоиска <> Null Тогда
		ОбластьПоиска = пОбластьПоиска;
	КонецЕсли;
	мВыборкаРезультата = Неопределено;
	Если ТипЗнч(ОбластьПоиска) = Тип("СписокЗначений") Тогда
		мИскомыйОбъект = Новый Структура;
		МетаОбъекты = Новый Массив();
		мИскомыйОбъект.Вставить("МетаОбъект", МетаОбъекты);
		Для Каждого ЭлементСписка Из ОбластьПоиска Цикл
			ПолноеИмяМД = ЭлементСписка.Значение;
			МетаданныеОбъекта = ирНеглобальный.НайтиОбъектМетаДанныхПоПолномуИмениТаблицыБДЛкс(ПолноеИмяМД, Истина);
			Если МетаданныеОбъекта <> Неопределено Тогда
				мИскомыйОбъект.Вставить("ТипТаблицы", ирНеглобальный.ПолучитьТипТаблицыБДЛкс(ПолноеИмяМД));
				мИскомыйОбъект.Вставить("КорневойТип", ирГлобальный.ЛксПолучитьПервыйФрагмент(ПолноеИмяМД));
				МетаОбъекты.Добавить(МетаданныеОбъекта);
			КонецЕсли;
		КонецЦикла;
		Если МетаОбъекты.Количество() = 0 Тогда
			мИскомыйОбъект = Неопределено;
		КонецЕсли; 
	Иначе
		ПолноеИмяМД = ОбластьПоиска;
		МетаданныеОбъекта = ирНеглобальный.НайтиОбъектМетаДанныхПоПолномуИмениТаблицыБДЛкс(ОбластьПоиска, Истина);
		Если МетаданныеОбъекта <> Неопределено Тогда
			мИскомыйОбъект = Новый Структура;
			мИскомыйОбъект.Вставить("КорневойТип", ирГлобальный.ЛксПолучитьПервыйФрагмент(ОбластьПоиска));
			мИскомыйОбъект.Вставить("ТипТаблицы", ирНеглобальный.ПолучитьТипТаблицыБДЛкс(ОбластьПоиска));
			мИскомыйОбъект.Вставить("МетаОбъект", МетаданныеОбъекта);
		Иначе
			мИскомыйОбъект = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	Если МетаданныеОбъекта <> Неопределено Тогда
		МассивФрагментов = ирГлобальный.ЛксПолучитьМассивИзСтрокиСРазделителем(ПолноеИмяМД);
		ОбъектМДЗаписи = Метаданные.НайтиПоПолномуИмени(МассивФрагментов[0] + "." + МассивФрагментов[1]);
		ЭлементыФормы.ПроводитьПроведенныеДокументыПриЗаписи.Видимость = Истина
			И мИскомыйОбъект.КорневойТип = "Документ"
			И ОбъектМДЗаписи.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
		//ЭлементыФормы.РежимОбходаДанных1.Доступность = Ложь
		//	Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.КорневойТип)
		//	Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(мИскомыйОбъект.КорневойТип)
		//	Или ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(мИскомыйОбъект.ТипТаблицы);
		//ДоступностьОбъектныхРежимовОбхода = Ложь
		//	Или ирГлобальный.ЛксЛиКорневойТипОбъектаБД(мИскомыйОбъект.ТипТаблицы)
		//	Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.КорневойТип)
		//	Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(мИскомыйОбъект.КорневойТип)
		//	Или ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(мИскомыйОбъект.ТипТаблицы);
		//ЭлементыФормы.РежимОбходаДанных2.Доступность = ДоступностьОбъектныхРежимовОбхода;
		//ЭлементыФормы.РежимОбходаДанных3.Доступность = ДоступностьОбъектныхРежимовОбхода;
		вНастроитьПостроитель(СохранятьТекущиеНастройки);
		НайденныеОбъекты = Новый ТаблицаЗначений;
		НайденныеОбъекты.Колонки.Добавить(мИмяКолонкиПометки, Новый ОписаниеТипов("Булево"));
		Если МноготабличнаяВыборка Тогда
			НайденныеОбъекты.Колонки.Добавить(мИмяКолонкиПолногоИмениТаблицы, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(300)));
		КонецЕсли; 
		СтруктураКлюча = ирНеглобальный.ПолучитьСтруктуруКлючаТаблицыБДЛкс(ПолноеИмяМД);
		Для Каждого ЭлементКлюча Из СтруктураКлюча Цикл
			Если Истина
				И МноготабличнаяВыборка
				И ирГлобальный.ЛксЛиКорневойТипСсылки(мИскомыйОбъект.ТипТаблицы)
				И ЭлементКлюча.Ключ = "Ссылка"
			Тогда
				ОписаниеТипов = ПолучитьОписаниеТиповКлючейРезультатов();
			Иначе
				ОписаниеТипов = ЭлементКлюча.Значение;
			КонецЕсли; 
			НайденныеОбъекты.Колонки.Добавить(ЭлементКлюча.Ключ, ОписаниеТипов);
		КонецЦикла;
		НайденныеОбъекты.Колонки.Добавить(мИмяКолонкиРезультатаОбработки, Новый ОписаниеТипов("Строка"));
		ЭлементыФормы.ОбъектыДляОбработки.СоздатьКолонки();
		ОбновитьРазмерДинамическойТаблицы();
		ЭлементыФормы.Панель.Страницы.ОбъектыДляОбработки.Доступность = Истина;
		НастроитьСлужебныеКолонкиТабличногоПоляВыборки();
	КонецЕсли; 
	вНастроитьЭУ();

КонецПроцедуры // УстановитьОбластьПоиска()

//Процедура ПредставлениеОбластиПоискаОчистка(Элемент, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыСжатьКолонки(Кнопка)
	
	ирГлобальный.ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.ОбъектыДляОбработки);
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыШиринаКолонок(Кнопка)
	
	ирГлобальный.ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.ОбъектыДляОбработки);

КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельОПодсистеме(Кнопка)
	ирГлобальный.ЛксОткрытьСправкуПоПодсистеме(ЭтотОбъект);
КонецПроцедуры

Процедура ГлавнаяКоманднаяПанельНовоеОкно(Кнопка)
	
	ирГлобальный.ЛксОткрытьНовоеОкноОбработки(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()

	ирГлобальный.ЛксОбновитьЗаголовкиСтраницПанелей(ЭтаФорма);
	Если Истина
		И ЭлементыФормы.ОбъектыДляОбработки.Колонки.Найти(мИмяКолонкиПометки) <> Неопределено
		И ЭлементыФормы.ОбъектыДляОбработки.Колонки[мИмяКолонкиПометки].Видимость
	Тогда
		СтрокаКоличествоСтрок = НайденныеОбъекты.Количество();
	КонецЕсли; 
	ПредставлениеОтбора = "" + Компоновщик.Настройки.Отбор;
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПустаяСтрока(ПредставлениеОтбора) Тогда
			ПредставлениеОтбора = ПредставлениеОтбора + " И ";
		КонецЕсли; 
		ПредставлениеОтбора = ПредставлениеОтбора + "Строковые поля содержат """ + СтрокаПоиска + """";
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ПредставлениеОтбора) Тогда
		ПредставлениеОтбора = "Нет";
	КонецЕсли; 
	ПредставлениеОтбора = "Отбор: " + ПредставлениеОтбора;
	ЭлементыФормы.НадписьОтбор.Заголовок = ПредставлениеОтбора;
	
КонецПроцедуры

Процедура ПостроительОтчетаОтборЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка);

КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПодбор(Кнопка)
	
	ОписаниеТипов = ПолучитьОписаниеТиповКлючейРезультатов();
	ирНеглобальный.ОткрытьПодборСВыборомТипаЛкс(ЭлементыФормы.ОбъектыДляОбработки, ОписаниеТипов);
	
КонецПроцедуры

Функция ПолучитьТипКлючаТаблицы(ПолноеИмяТаблицы)

	Если ирГлобальный.ЛксЛиКорневойТипСсылки(мИскомыйОбъект.ТипТаблицы) Тогда
		Результат = Тип(СтрЗаменить(ПолноеИмяТаблицы, ".", "Ссылка."));
	ИначеЕсли ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.ТипТаблицы) Тогда
		Результат = Тип(СтрЗаменить(ПолноеИмяТаблицы, ".", "КлючЗаписи."));
	Иначе
		Результат = Тип("Неопределено");
	КонецЕсли; 
	Возврат Результат;

КонецФункции

Функция ПолучитьОписаниеТиповКлючейРезультатов()

	МассивТипов = Новый Массив();
	Если МноготабличнаяВыборка Тогда
		Для Каждого ЭлементСписка Из ОбластьПоиска Цикл
			ТипКлюча = ПолучитьТипКлючаТаблицы(ЭлементСписка.Значение);
			МассивТипов.Добавить(ТипКлюча);
		КонецЦикла; 
	Иначе
		ТипКлюча = ПолучитьТипКлючаТаблицы(ОбластьПоиска);
		МассивТипов.Добавить(ТипКлюча);
	КонецЕсли; 
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипов;

КонецФункции

Процедура ОбъектыДляОбработкиОбработкаВыбора(Элемент, Знач ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Массив = Новый Массив();
		Массив.Добавить(ВыбранноеЗначение);
		ВыбранноеЗначение = Массив;
	КонецЕсли;
	ОписаниеТипов = ПолучитьОписаниеТиповКлючейРезультатов();
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Истина
			И ирГлобальный.ЛксЛиКорневойТипОбъектаБД(мИскомыйОбъект.ТипТаблицы)
			И ОписаниеТипов.СодержитТип(ТипЗнч(ЭлементМассива))
		Тогда
			НайденнаяСтрока = НайденныеОбъекты.Найти(ЭлементМассива, "Ссылка");
			СтандартнаяОбработка = Ложь;
			Если НайденнаяСтрока = Неопределено Тогда
				СтрокаОбъекта = НайденныеОбъекты.Добавить();
				СтрокаОбъекта.Ссылка = ЭлементМассива;
				СтрокаОбъекта[мИмяКолонкиПометки] = Истина;
				//ЗаполнитьЗначенияСвойств(СтрокаОбъекта, ВыбранноеЗначение); 
				ЭлементыФормы.Панель.Страницы.Обработки.Доступность = Истина;
				Элемент.ОбновитьСтроки();
			Иначе
				ЭлементыФормы.ОбъектыДляОбработки.ТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли; 
		ИначеЕсли Истина
			И (Ложь
				Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(мИскомыйОбъект.ТипТаблицы) 
				Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(мИскомыйОбъект.ТипТаблицы))
			И ТипЗнч(ЭлементМассива) = Тип(СтрЗаменить(ОбластьПоиска, ".", "КлючЗаписи."))
		Тогда
			СтруктураКлюча = ирНеглобальный.ПолучитьСтруктуруКлючаТаблицыБДЛкс(?(МноготабличнаяВыборка, ОбластьПоиска[0], ОбластьПоиска));
			ЗаполнитьЗначенияСвойств(СтруктураКлюча, ЭлементМассива); 
			НайденныеСтроки = НайденныеОбъекты.НайтиСтроки(СтруктураКлюча);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
			Иначе
				НайденнаяСтрока = Неопределено;
			КонецЕсли; 
			СтандартнаяОбработка = Ложь;
			Если НайденнаяСтрока = Неопределено Тогда
				СтрокаОбъекта = НайденныеОбъекты.Добавить();
				СтрокаРезультата = ирНеглобальный.ПолучитьСтрокуТаблицыБДПоКлючуЛкс(ирНеглобальный.ПолучитьИмяТаблицыИзМетаданныхЛкс(ОбластьПоиска), СтруктураКлюча);
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, СтрокаРезультата); 
				СтрокаОбъекта[мИмяКолонкиПометки] = Истина;
				Элемент.ОбновитьСтроки();
			Иначе
				ЭлементыФормы.ОбъектыДляОбработки.ТекущаяСтрока = НайденнаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьОбъектыДляОбработки(Массив, ОчиститьТекущийСписок = Истина) Экспорт
	
	//УстановитьОбластьПоиска(ирНеглобальный.ПолучитьИмяТаблицыИзМетаданныхЛкс(ОбъектМД.ПолноеИмя()));
	СписокПолныхИменМД = Новый СписокЗначений;
	Для Каждого СсылкаОбъекта Из Массив Цикл
		ОбъектМД = Метаданные.НайтиПоТипу(ТипЗнч(СсылкаОбъекта));
		ПолноеИмяМД = ОбъектМД.ПолноеИмя();
		Если СписокПолныхИменМД.НайтиПоЗначению(ПолноеИмяМД) = Неопределено Тогда
			СписокПолныхИменМД.Добавить(ПолноеИмяМД);
		КонецЕсли; 
	КонецЦикла; 
	ЭтотОбъект.МноготабличнаяВыборка = СписокПолныхИменМД.Количество() > 1; 
	Если МноготабличнаяВыборка Тогда
		УстановитьОбластьПоиска(СписокПолныхИменМД);
	Иначе
		УстановитьОбластьПоиска(СписокПолныхИменМД[0].Значение);
	КонецЕсли; 
	Если ОчиститьТекущийСписок Тогда
		НайденныеОбъекты.Очистить();
	КонецЕсли; 
	Для Каждого КлючЗаписи Из Массив Цикл
		СтрокаДанных = НайденныеОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, КлючЗаписи); 
		СтрокаДанных[мИмяКолонкиПометки] = Истина;
		Если МноготабличнаяВыборка Тогда
			СтрокаДанных[мИмяКолонкиПолногоИмениТаблицы] = КлючЗаписи.Метаданные().ПолноеИмя();
		КонецЕсли; 
	КонецЦикла;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ОбъектыДляОбработки;
	ЭлементыФормы.Панель.Страницы.Обработки.Доступность = НайденныеОбъекты.Количество() > 0;

КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ирГлобальный.ЛксПриПолученииДанныхДоступныхПолейКомпоновки(ОформленияСтрок);

КонецПроцедуры // ПриПолученииДанныхДоступныхПолей()

Процедура АвтоВыбранныеПоляПриИзменении(Элемент = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.АвтоВыбранныеПоля;
	КонецЕсли;
	ЭлементыФормы.КомпоновщикВыбор.Доступность = Не АвтоВыбранныеПоля;
	ЭлементыФормы.ВыбратьВсеПоля.Доступность = Элемент.Значение;
	
КонецПроцедуры

Процедура ПредставлениеОбластиПоискаПриИзменении(Элемент)

	УстановитьОбластьПоиска(Элемент.Значение);
	Если Не МноготабличнаяВыборка Тогда
		ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПредставлениеОбластиПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ПредставлениеОбластиПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		лПолноеИмяОбъекта = Неопределено;
		Если ВыбранноеЗначение.Свойство("ПолноеИмяОбъекта", лПолноеИмяОбъекта) Тогда
			ОбластьПоиска = лПолноеИмяОбъекта;
			ПредставлениеОбластиПоискаПриИзменении(Элемент);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		СтандартнаяОбработка = Ложь;
		ОбластьПоиска = Новый СписокЗначений;
		ОбластьПоиска.ЗагрузитьЗначения(ВыбранноеЗначение);
		ПредставлениеОбластиПоискаПриИзменении(Элемент);
	КонецЕсли;
		
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыСнятьПометкиУспешноОбработанных(Кнопка)
	
	СтрокиДляОбработки = НайденныеОбъекты.НайтиСтроки(Новый Структура(мИмяКолонкиРезультатаОбработки, "Успех"));
	Для Каждого СтрокаТаблицы Из СтрокиДляОбработки Цикл
		СтрокаТаблицы[мИмяКолонкиПометки] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыОтборБезЗначенияВТекущейКолонке(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ОбъектыДляОбработки.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяКолонка = ЭлементыФормы.ОбъектыДляОбработки.ТекущаяКолонка;
		ирНеглобальный.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, ТекущаяКолонка.Данные, ТекущаяСтрока[ТекущаяКолонка.Данные], ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыОтборПоЗначению(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ОбъектыДляОбработки.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяКолонка = ЭлементыФормы.ОбъектыДляОбработки.ТекущаяКолонка;
		ЭлементОтбора = ирНеглобальный.НайтиДобавитьЭлементОтбораКомпоновкиЛкс(Компоновщик.Настройки.Отбор, ТекущаяКолонка.Данные, ТекущаяСтрока[ТекущаяКолонка.Данные]);
		Сообщить("В отбор добавлен элемент """ + ЭлементОтбора.ЛевоеЗначение + " равно " + ЭлементОтбора.ПравоеЗначение + """");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыРедакторОбъектаБД(Кнопка)
	
	ирНеглобальный.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(ЭлементыФормы.ОбъектыДляОбработки, ОбластьПоиска,
		Компоновщик.Настройки.ДоступныеПоляВыбора);

КонецПроцедуры

Процедура ОбъектыДляОбработкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.КоманднаяПанельНайденныеОбъекты.Кнопки.Пустые.Пометка Тогда
		ирНеглобальный.ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли;
	ирНеглобальный.ТабличноеПолеСВложеннымиКоллекциямиПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыОткрытьТаблицу(Кнопка)
	
	ирНеглобальный.ОткрытьФормуПроизвольногоЗначенияЛкс(НайденныеОбъекты, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.ОбъектыДляОбработки.ОбновитьСтроки();
	
КонецПроцедуры

Процедура РежимОбходаДанныхПриИзменении(Элемент)
	
	
	
КонецПроцедуры

Процедура ДоступныеОбработкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Выполнение = ОбработкаРазрешенаДляТаблицы(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ВыбранныеОбработкиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаДереваЗначений") Тогда
		Если ПараметрыПеретаскивания.Значение.Владелец() = ДоступныеОбработки Тогда
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбранныеОбработкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СтрокаДереваЗначений") Тогда
		Если ПараметрыПеретаскивания.Значение.Владелец() = ДоступныеОбработки Тогда
			СтрокаВыбраннойОбработки = Элемент.Значение.Добавить();
			СтрокаВыбраннойОбработки.Пометка = Истина;
			СтрокаВыбраннойОбработки.СтрокаДоступнойОбработки = ПараметрыПеретаскивания.Значение;
			Элемент.ТекущаяСтрока = СтрокаВыбраннойОбработки;
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

Процедура ПеречитатьДанныеОбъектовДляОбработки() Экспорт 
	
	СтруктураКлюча = ирНеглобальный.ПолучитьСтруктуруКлючаТаблицыБДЛкс(?(МноготабличнаяВыборка, ОбластьПоиска[0], ОбластьПоиска));
	#Если _ Тогда
	    СтруктураКлюча = Новый Структура;
	#КонецЕсли
	КолонкиДляОбновления = "";
	Для Каждого Колонка Из НайденныеОбъекты.Колонки Цикл
		Если Ложь
			Или СтруктураКлюча.Свойство(Колонка.Имя)
			Или (Истина
				И МноготабличнаяВыборка
				И Колонка.Имя = мИмяКолонкиПолногоИмениТаблицы)
			Или мИмяКолонкиПометки = Колонка.Имя
			Или мИмяКолонкиРезультатаОбработки = Колонка.Имя
		Тогда
			Продолжить;
		КонецЕсли; 
		Если КолонкиДляОбновления <> "" Тогда
			КолонкиДляОбновления = КолонкиДляОбновления + ",";
		КонецЕсли; 
		КолонкиДляОбновления = КолонкиДляОбновления + "Т." + Колонка.Имя;
	КонецЦикла;
	Если КолонкиДляОбновления = "" Тогда
		Возврат;
	КонецЕсли; 
	КолонкиКлюча = "";
	Для Каждого КлючИзначение Из СтруктураКлюча Цикл
		Если КолонкиКлюча <> "" Тогда
			КолонкиКлюча = КолонкиКлюча + ",";
		КонецЕсли; 
		КолонкиКлюча = КолонкиКлюча + КлючИзначение.Ключ;
		КолонкиДляОбновления = КолонкиДляОбновления + ", Т." + КлючИзначение.Ключ;
	КонецЦикла;
	Если МноготабличнаяВыборка Тогда
		КолонкиКлюча = КолонкиКлюча + ", " + мИмяКолонкиПолногоИмениТаблицы;
		ТекстСоединения = ТекстСоединения + "
		|	И ТаблицаКлючей." + мИмяКолонкиПолногоИмениТаблицы + " = Т." + мИмяКолонкиПолногоИмениТаблицы;
	КонецЕсли;
	ТаблицаКлючей = НайденныеОбъекты.Скопировать(Новый Структура(мИмяКолонкиПометки, Истина), КолонкиКлюча);
	ТекстВложенногоЗапроса = СтрЗаменить(мТекстЗапросаБезУсловий, "}", "} (" + КолонкиКлюча + ") В (ВЫБРАТЬ * ИЗ ТаблицаКлючей) ");
	ТекстГДЕ = "";
	Если Найти(мТекстЗапросаБезУсловий, "}") = 0 Тогда
		ТекстГДЕ = "ГДЕ (" + КолонкиКлюча + ") В (ВЫБРАТЬ * ИЗ ТаблицаКлючей)";
	КонецЕсли; 
	Запрос = Новый Запрос;
	//Здесь читаем все доступные поля, а нужны не все. Доделать
	ТекстЗапроса = "
	|Выбрать " + КолонкиКлюча + "
	|	ПОМЕСТИТЬ ТаблицаКлючей ИЗ &ТаблицаКлючей КАК ТаблицаКлючей;
	|ВЫБРАТЬ " + КолонкиДляОбновления + " ИЗ (" + ТекстВложенногоЗапроса + ") КАК Т 
	|" + ТекстГДЕ;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ТаблицаКлючей", ТаблицаКлючей);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаРезультата Из ТаблицаРезультата Цикл
		ЗаполнитьЗначенияСвойств(СтруктураКлюча, СтрокаРезультата);
		СтрокаТаблицы = НайденныеОбъекты.НайтиСтроки(СтруктураКлюча)[0];
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаРезультата); 
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыПеречитатьДанные(Кнопка)
	
	ПеречитатьДанныеОбъектовДляОбработки();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеОбъектыЗагрузитьПолностью(Кнопка)
	
	ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПолностьюЛкс(ЭтаФорма, мВыборкаРезультата, ЭлементыФормы.КоманднаяПанельНайденныеОбъекты);
	
КонецПроцедуры

Процедура ДинамическаяВыборкаПриИзменении(Элемент = Неопределено)
	
	//ЭлементыФормы.РежимОбходаДанных1.Доступность = Не ДинамическаяВыборка;
	//ЭлементыФормы.РежимОбходаДанных2.Доступность = Не ДинамическаяВыборка;
	//Если ДинамическаяВыборка Тогда
	//	ЭтотОбъект.РежимОбходаДанных = "Строки";
	//КонецЕсли;
	ОбновитьРазмерДинамическойТаблицы();
	
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.Панель.Страницы[ТекущаяСтраница] = ЭлементыФормы.Панель.Страницы.Обработки Тогда
		Если мВыборкаРезультата <> Неопределено Тогда
			ВсеСчитано = НайденныеОбъекты.Количество() = мВыборкаРезультата.Количество();
		Иначе
			ВсеСчитано = Истина;
		КонецЕсли; 
		ЭтотОбъект.ДинамическаяВыборка = ЭтотОбъект.ДинамическаяВыборка Или Не ВсеСчитано;
		ЭлементыФормы.ДинамическаяВыборка.Доступность = ВсеСчитано;
		ДинамическаяВыборкаПриИзменении();
	КонецЕсли; 
	
КонецПроцедуры

Процедура МноготабличнаяВыборкаПриИзменении(Элемент)

	Если Истина
		И МноготабличнаяВыборка 
		И ТипЗнч(ОбластьПоиска) <> Тип("СписокЗначений")
	Тогда
		лОбластьПоиска = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ОбластьПоиска) Тогда
			лОбластьПоиска.Добавить(ОбластьПоиска);
		КонецЕсли; 
	ИначеЕсли Истина
		И Не МноготабличнаяВыборка 
		И ТипЗнч(ОбластьПоиска) = Тип("СписокЗначений")
	Тогда
		Если ОбластьПоиска.Количество() > 0 Тогда
			лОбластьПоиска = ОбластьПоиска[0].Значение;
		Иначе
			лОбластьПоиска = "";
		КонецЕсли; 
	КонецЕсли; 
	УстановитьОбластьПоиска(лОбластьПоиска);
	
КонецПроцедуры

Процедура КоманднаяПанельПостроительОтчетаИсполняемыйЗапрос(Кнопка)
	
	Запрос = ПолучитьЗапросВыборки();
	ирОтладка.Отладить(Запрос);
	
КонецПроцедуры

Процедура СтрокаПоискаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если Не МноготабличнаяВыборка Тогда
		ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	КонецЕсли; 

КонецПроцедуры

Процедура КП_СписокОбъединитьСсылки(Кнопка)
	
	ПараметрКоманды = Новый Массив();
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ОбъектыДляОбработки.ВыделенныеСтроки Цикл
		ПараметрКоманды.Добавить(ВыделеннаяСтрока.Ссылка);
	КонецЦикла;
	Если ПараметрКоманды.Количество() = 0 Тогда
		Предупреждение("Необходимо выбрать хотя бы один объект");
		Возврат;
	КонецЕсли; 
	// -+ АВВ [02.04.2013] ФормаОбработки = Обработки.ирПоискДублейИЗаменаСсылок.ПолучитьФорму();
	ФормаОбработки = ирМобильные.ПодключитьВнешнююОбработку("ирПоискДублейИЗаменаСсылок").ПолучитьФорму();
	ФормаОбработки.ОткрытьДляЗаменыПоСпискуСсылок(ПараметрКоманды);
	
КонецПроцедуры

Процедура АвтоупорядочиваниеПриИзменении(Элемент = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.Автоупорядочивание;
	КонецЕсли;
	ЭлементыФормы.КомпоновщикПорядок.Доступность = Не Автоупорядочивание;
	
КонецПроцедуры

ирГлобальный.ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляОтбора);
ЭлементыФормы.ЗаписьНаСервере.Доступность = ирКэш.ЛиНемобильныйРежимЛкс();
