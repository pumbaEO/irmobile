Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ДействияФормы.Кнопки.ИерархическийПросмотр.Пометка = Истина;
	ПостроитьДерево();
	ПостроитьДеревоГрупп();
	
	Если Не РежимВыбора Тогда
		
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Выбрать);
		
	КонецЕсли; 
	Если РежимВыбора и ЗначениеЗаполнено(ТекущийАлгоритм) Тогда
		
		СтрокаАлгоритма = НайтиВДеревеАлгоритм(ТекущийАлгоритм);
		
		Если СтрокаАлгоритма <> Неопределено Тогда
			
			ЭлементыФормы.Алгоритмы.ТекущаяСтрока = СтрокаАлгоритма;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДействияФормыМенеджерТабличногоПоля(Кнопка)
	
	ирМобильные.ПодключитьВнешнююОбработку("ирМенеджерТабличногоПоля").ПолучитьФорму(, ЭтаФорма, ).УстановитьСвязь(ЭтаФорма.ЭлементыФормы.Алгоритмы);
	
КонецПроцедуры

Процедура ДействияФормыОПодсистеме(Кнопка)
	ирГлобальный.ЛксОткрытьСправкуПоПодсистеме(ирМобильные.ПодключитьВнешнююОбработку("ирДинамическийСписок"));
КонецПроцедуры

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.Алгоритмы.ТекущиеДанные <> Неопределено И НЕ ЭлементыФормы.Алгоритмы.ТекущиеДанные.ЭтоГруппа Тогда
		Текст = ЭлементыФормы.Алгоритмы.ТекущиеДанные.ТекстАлгоритма;
	Иначе
		Текст = "";
	КонецЕсли; 
	ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(Текст);
	
КонецПроцедуры

Процедура ДействияФормыКонсольКода(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;   
	
	Алгоритм = ПолучитьАлгоритмПоКлючу(ТекущиеДанные.Ключ);	
	ОбработкаОбъект.ОткрытьКонсольКодаДляАлгоритма(Алгоритм);
	
КонецПроцедуры

Процедура ДействияФормыДобавитьАлгоритм(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	//Если ТекущиеДанные = Неопределено Тогда
	//	ТекущийРодитель = 0;
	//Иначе
	//	ТекущийРодитель = ТекущиеДанные.КлючРодителя;
	//КонецЕсли; 
	
	ТекущийРодитель = ЭлементыФормы.Алгоритмы.ТекущийРодитель;
	Если ТекущийРодитель <> Неопределено Тогда
		
		КлючРодителя = ТекущийРодитель.Ключ;
		
	Иначе
		
		КлючРодителя = 0;
		
	КонецЕсли; 
	
	ФормаАлгоритма = ПолучитьФормуНовогоАлгоритма(ЭтаФорма, КлючРодителя);
	ФормаАлгоритма.Открыть();
	ФормаАлгоритма.Модифицированность = Истина;
		
КонецПроцедуры

Процедура ДействияФормыСкопироватьАлгоритм(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	НовыйАлгоритм = СкопироватьАлгоритм(ТекущиеДанные.Ключ);
	ФормаНовогоАлгоритма = ПолучитьФормуАлгоритма(НовыйАлгоритм, ЭтаФорма, НовыйАлгоритм.Ключ);
	ФормаНовогоАлгоритма.Открыть();
	ФормаНовогоАлгоритма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДействияФормыИзменитьАлгоритм(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	ФормаАлгоритма = ПолучитьФормуАлгоритма(ТекущиеДанные.Ключ, ЭтаФорма, ТекущиеДанные.Ключ);
	ФормаАлгоритма.Открыть();   
	
КонецПроцедуры

Процедура АлгоритмыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	   	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		Если РежимВыбора Тогда
		
			ДействияФормыВыбрать(Неопределено);
		
		Иначе
		
			ДействияФормыИзменитьАлгоритм(Неопределено);
		
		КонецЕсли; 
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;                      	
	
КонецПроцедуры
               
Процедура ДействияФормыУдалитьАлгоритм(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Алгоритм будет удален физически! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
		Если Ответ=КодВозвратаДиалога.Да Тогда
			
			Алгоритм = ПолучитьАлгоритмПоКлючу(ТекущиеДанные.Ключ);
			СтрокаАлгоритма = НайтиВДеревеАлгоритм(Алгоритм);
			Если УдалитьАлгоритм(ТекущиеДанные.Ключ) Тогда
				
				Если СтрокаАлгоритма.Родитель <> Неопределено Тогда
					
					СтрокаАлгоритма.Родитель.Строки.Удалить(СтрокаАлгоритма);
					
				Иначе
					
					ДеревоАлгоритмов.Строки.Удалить(СтрокаАлгоритма);
					
				КонецЕсли; 
				
			КонецЕсли; 	 
			
		КонецЕсли; 
		
	Иначе
		
		Ответ = Вопрос(НСтр("ru = 'Удалить всю группу алгоритмов физически?! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
		Если Ответ=КодВозвратаДиалога.Да Тогда
			
			УдалитьАлгоритм(ТекущиеДанные.Ключ);	 	
			ПостроитьДерево();  	
			ПостроитьДеревоГрупп();
			
		КонецЕсли; 
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	НайтиВДеревеАлгоритм(Объект, Истина);
	
КонецПроцедуры

Процедура ДействияФормыВыбрать(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Алгоритмы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли; 
	
	Алгоритм = ПолучитьАлгоритмПоКлючу(ТекущиеДанные.Ключ);
	
	Закрыть(Алгоритм);
	
КонецПроцедуры

Процедура ПостроитьДерево()
	
	ДеревоАлгоритмов = ОбработкаОбъект.ПостроитьДеревоАлгоритмов();
		
КонецПроцедуры

Процедура ПостроитьДеревоГрупп()
	
	КартинкаГрупп = ЭлементыФормы.ДеревоГрупп.Колонки.Наименование.КартинкиСтрок;
	
	ДеревоГрупп = ОбработкаОбъект.ПостроитьДеревоАлгоритмов(Истина, Истина);
	А = ДеревоГрупп.Колонки.Количество() - 1;
	Пока А >= 0 Цикл
		
		Если ДеревоГрупп.Колонки[А].Имя <> "Наименование" И ДеревоГрупп.Колонки[А].Имя <> "Ключ" И ДеревоГрупп.Колонки[А].Имя <> "КлючРодителя" Тогда
			
			ДеревоГрупп.Колонки.Удалить(А);
			
		КонецЕсли; 
		
		А = А-1;
		
	КонецЦикла; 
	
	ЭлементыФормы.ДеревоГрупп.СоздатьКолонки();
	  	
	КолонкаКлюч = ЭлементыФормы.ДеревоГрупп.Колонки.Ключ;
	КолонкаКлюч.Видимость = Ложь;
	КолонкаКлюч.ИзменятьВидимость = Ложь;
	
	КолонкаКлючРодителя = ЭлементыФормы.ДеревоГрупп.Колонки.КлючРодителя;
	КолонкаКлючРодителя.Видимость = Ложь;
	КолонкаКлючРодителя.ИзменятьВидимость = Ложь;        
	
	КолонкаНаименование = ЭлементыФормы.ДеревоГрупп.Колонки.Наименование;
	КолонкаНаименование.Видимость = Истина;
	КолонкаНаименование.ТолькоПросмотр = Истина;
	КолонкаНаименование.ИзменятьВидимость = Ложь;
	КолонкаНаименование.КартинкиСтрок = КартинкаГрупп;
	КолонкаНаименование.ОтображатьИерархию = Истина;      
		
КонецПроцедуры

Процедура ДействияФормыОбновить(Кнопка)
	
	ПостроитьДерево();
	ПостроитьДеревоГрупп();
	
КонецПроцедуры

Функция НайтиВДеревеАлгоритм(Алгоритм, СоздаватьПриНеобходимости = Ложь, ИскатьВДеревеГрупп = Ложь) 
	
	Если ИскатьВДеревеГрупп Тогда
		
		Дерево = ДеревоГрупп;
		
	Иначе
		
		Дерево = ДеревоАлгоритмов;
		
	КонецЕсли; 
	//найдем группу, куда поместить алгоритм
	Если ИскатьВДеревеГрупп Тогда
		
		ТекущийУровень = Дерево.Строки[0].Строки;	
		СтрокаРодитель = Дерево.Строки[0];      	
		
	Иначе
		
		ТекущийУровень = Дерево.Строки;	
		СтрокаРодитель = Дерево;      	
		
	КонецЕсли; 
	
	ПрерватьЦикл = Ложь;
	Пока ТекущийУровень.Количество() <> 0 Цикл
		
		СледующийУровень = Новый Массив(); 
		
		Для Каждого СтрокаДерева Из ТекущийУровень Цикл
			
			Если СтрокаДерева.Ключ = Алгоритм.КлючРодителя Тогда
				
				СтрокаРодитель = СтрокаДерева;
			    ПрерватьЦикл = Истина;
				Прервать;
				
			КонецЕсли; 
			
			Если НЕ ПрерватьЦикл Тогда
				
				Для Каждого СтрокаДерева1 Из СтрокаДерева.Строки Цикл
				
					СледующийУровень.Добавить(СтрокаДерева1);
				
				КонецЦикла;
				
			КонецЕсли; 
					
		КонецЦикла; 
		
		ТекущийУровень = СледующийУровень;
		
	КонецЦикла;  	
	
	АлгоритмСтр = Неопределено;
	
	Для Каждого СтрокаДерева Из СтрокаРодитель.Строки Цикл
		
		Если СтрокаДерева.Ключ = Алгоритм.Ключ Тогда
			
			АлгоритмСтр = СтрокаДерева;
			Прервать;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Если АлгоритмСтр = Неопределено И СоздаватьПриНеобходимости Тогда
		
		АлгоритмСтр = СтрокаРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(АлгоритмСтр, Алгоритм);
		Если ИскатьВДеревеГрупп Тогда
			
			СтрокаРодитель.Строки.Сортировать("Наименование");
			
		Иначе
			
			СтрокаРодитель.Строки.Сортировать("ЭтоГруппа УБЫВ, Наименование");
			
		КонецЕсли; 	
		
	КонецЕсли; 
	
	Возврат АлгоритмСтр;
	
КонецФункции

Процедура ДействияФормыИерархическийПросмотр(Кнопка)
	ЭлементыФормы.Алгоритмы.Дерево = НЕ ЭлементыФормы.Алгоритмы.Дерево;
	ПостроитьДерево();
	Кнопка.Пометка = НЕ Кнопка.Пометка;
КонецПроцедуры

Процедура ДействияФормыСоздатьГруппу(Кнопка)
	Перем НаименованиеГруппы, КлючРодителя;
	
	ТекущийРодитель = ЭлементыФормы.Алгоритмы.ТекущийРодитель;
	Если ТекущийРодитель = Неопределено Тогда
		КлючРодителя = 0;
	Иначе
		КлючРодителя = ТекущийРодитель.Ключ;
	КонецЕсли; 

	Если ВвестиСтроку(НаименованиеГруппы, "Введите наименование новой группы") И НЕ ПустаяСтрока(НаименованиеГруппы) Тогда
		
		НоваяГруппа = СоздатьГруппуАлгоритмов(НаименованиеГруппы, КлючРодителя);
		НайтиВДеревеАлгоритм(НоваяГруппа, Истина);
		НайтиВДеревеАлгоритм(НоваяГруппа, Истина, Истина)
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДеревоГруппПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.Наименование.УстановитьКартинку(ЭлементыФормы.ДеревоГрупп.Колонки.Наименование.КартинкиСтрок);
КонецПроцедуры

Процедура ДеревоГруппПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = ЭлементыФормы.ДеревоГрупп.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если ЭлементыФормы.Алгоритмы.Дерево Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Алгоритм = ОбработкаОбъект.ПолучитьАлгоритмПоКлючу(ТекущиеДанные.Ключ);
	Если Алгоритм <> Неопределено Тогда	
		
		Если Алгоритм.Ключ = 0 Тогда
			// корневая группа
			Если ДеревоАлгоритмов.Строки.Количество() > 0 Тогда
				
				ЭлементыФормы.Алгоритмы.ТекущаяСтрока = ДеревоАлгоритмов.Строки[0]; 
				
			КонецЕсли;
			
		Иначе  
			
			СтрокаАлгоритма = НайтиВДеревеАлгоритм(Алгоритм);
			Если СтрокаАлгоритма <> Неопределено Тогда
				
				//ЭлементыФормы.Алгоритмы.ТекущийРодитель = СтрокаАлгоритма;
				Если СтрокаАлгоритма.Строки.Количество() > 0 Тогда
					
					ЭлементыФормы.Алгоритмы.ТекущаяСтрока = СтрокаАлгоритма.Строки[0];
					
				Иначе
					
					ЭлементыФормы.Алгоритмы.ТекущаяСтрока = СтрокаАлгоритма;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
		КонецЕсли; 	
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписьАлгоритма" Тогда
		
		ТекущаяСтрока = ЭлементыФормы.Алгоритмы.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			
			КлючТекущейСтроки = ТекущаяСтрока.Ключ;
			
		Иначе
			
			КлючТекущейСтроки = Неопределено;
			
		КонецЕсли; 
		
		ПостроитьДерево();
		
		Если КлючТекущейСтроки <> Неопределено Тогда
			
			Алгоритм = ОбработкаОбъект.ПолучитьАлгоритмПоКлючу(КлючТекущейСтроки);
			ТекущаяСтрока = НайтиВДеревеАлгоритм(Алгоритм);
			ЭлементыФормы.Алгоритмы.ТекущаяСтрока = ТекущаяСтрока;
			
		КонецЕсли; 
		
	КонецЕсли; 
КонецПроцедуры

Процедура АлгоритмыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Перемещение;
	
КонецПроцедуры

Процедура АлгоритмыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
		
	Если Строка = Неопределено ИЛИ НЕ ОбработкаОбъект.ПроверитьВозможностьПеремещения(ПараметрыПеретаскивания.Значение.Ключ, Строка.Ключ) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;
	
КонецПроцедуры   

Процедура ДеревоГруппПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Строка = Неопределено ИЛИ НЕ ОбработкаОбъект.ПроверитьВозможностьПеремещения(ПараметрыПеретаскивания.Значение.Ключ, Строка.Ключ) Тогда
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		
	КонецЕсли;   	
	
КонецПроцедуры

Процедура АлгоритмыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	ПроизвестиПеретаскивание(ПараметрыПеретаскивания.Значение, Строка.Ключ);
		
КонецПроцедуры                                                                                                                          
                                                                                                                                             
Процедура ДеревоГруппПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	СтандартнаяОбработка = Ложь;
	ПроизвестиПеретаскивание(ПараметрыПеретаскивания.Значение, Строка.Ключ);
	
КонецПроцедуры  

Процедура ПроизвестиПеретаскивание(СтрокаАлгоритма, КлючНовойГруппы)

	Попытка
		
		ОбработкаОбъект.ПереместитьВГруппу(СтрокаАлгоритма.Ключ, КлючНовойГруппы);
		
		Если НЕ СтрокаАлгоритма.ЭтоГруппа Тогда
			
			Алгоритм = ОбработкаОбъект.ПолучитьАлгоритмПоКлючу(СтрокаАлгоритма.Ключ);				
			Родитель = СтрокаАлгоритма.Родитель;
			Если НЕ ЗначениеЗаполнено(Родитель)  Тогда
				Родитель = ДеревоАлгоритмов;
			КонецЕсли; 
			Родитель.Строки.Удалить(СтрокаАлгоритма);
			НайтиВДеревеАлгоритм(Алгоритм, Истина);
			
		Иначе
			
			ПостроитьДерево();
			ПостроитьДеревоГрупп();
			НоваяГруппа = ПолучитьАлгоритмПоКлючу(КлючНовойГруппы);
			НоваяТекущаяСтрокаДереваАлгоритмов = НайтиВДеревеАлгоритм(НоваяГруппа, Ложь, Ложь);
			НоваяТекущаяСтрокаДереваГрупп = НайтиВДеревеАлгоритм(НоваяГруппа, Ложь, Истина);
			Если НоваяТекущаяСтрокаДереваАлгоритмов <> Неопределено Тогда
				
				ЭлементыФормы.Алгоритмы.ТекущаяСтрока = НоваяТекущаяСтрокаДереваАлгоритмов;
				
			КонецЕсли; 
			Если НоваяТекущаяСтрокаДереваГрупп <> Неопределено Тогда
				
				ЭлементыФормы.ДеревоГрупп.ТекущаяСтрока = НоваяТекущаяСтрокаДереваГрупп;
				
			КонецЕсли;
			
		КонецЕсли;                                              		
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки
		
	
КонецПроцедуры // ПроизвестиПеретаскивание()

