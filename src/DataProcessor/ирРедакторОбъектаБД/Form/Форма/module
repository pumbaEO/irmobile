Перем ЦветФонаСтрокиНеограниченноДлины;
Перем ИдентификаторСсылки;
Перем ЭтоДокумент;
Перем мПлатформа;
Перем мСтрокаТипаТабличнойЧасти;
Перем мВыборкаРезультатаСтрокиТаблицы;
Перем мРезультатСтрокиТаблицы;

Процедура ОбновлениеОтображения()
	
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		ЭлементыФормы.тВыбОбъект.Заголовок = "Выберите объект...";
	Иначе
		ТипОбъекта = ЭлементыФормы.ВыбОбъект.Значение.Метаданные().ПолноеИмя();
		ЭлементыФормы.тВыбОбъект.Заголовок = "Выбран <" + ТипОбъекта + ">";
	КонецЕсли;
	ирГлобальный.ЛксОбновитьЗаголовкиСтраницПанелей(ЭтаФорма);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуТзРеквизиты(Значение, ИмяРеквизита, Представление="", ОписаниеТипа=Неопределено, ТолькоПросмотр = Ложь)
	
	строкаТзРеквизиты = РеквизитыТаблица.Добавить();
	строкаТзРеквизиты.ИмяРеквизита = ИмяРеквизита;
	строкаТзРеквизиты.ПредставлениеРеквизита = Представление;
	Если Нрег(ИмяРеквизита) = Нрег("Ссылка") Тогда
		ЗначениеРеквизита = Значение.УникальныйИдентификатор();
	Иначе
		ЗначениеРеквизита = Значение[ИмяРеквизита];
	КонецЕсли; 
	строкаТзРеквизиты.ЗначениеРеквизита = ЗначениеРеквизита;
	строкаТзРеквизиты.ОригинальноеЗначениеРеквизита = ЗначениеРеквизита;
	строкаТзРеквизиты.ТипЗначения = ТипЗнч(ЗначениеРеквизита);
	строкаТзРеквизиты.ОписаниеТипов = ОписаниеТипа;
	Если Нрег(ИмяРеквизита) = Нрег("Ссылка") Тогда
		строкаТзРеквизиты.РазрешеноИзменение = Истина
			И Не ТолькоПросмотр;
	Иначе
		строкаТзРеквизиты.РазрешеноИзменение = Истина
			И Не ТолькоПросмотр
			И строкаТзРеквизиты.ЗначениеРеквизита = ЗначениеРеквизита;
	КонецЕсли; 
	
	Если Истина
		И ОписаниеТипа <> Неопределено
		И ОписаниеТипа.Типы().Количество() = 1
		И ОписаниеТипа.Типы()[0] = Тип("Булево")
	Тогда
		ПолеВвода = ЭлементыФормы.Добавить(Тип("Флажок"), "ПолеВводаРеквизита_" + ИмяРеквизита, Истина, ЭлементыФормы.ПанельРеквизиты);
		ПолеВвода.УстановитьДействие("ПриИзменении", Новый Действие("ОтдельныйЭлементУправленияРеквизитаПриИзменении"));
		ЗаполнитьЗначенияСвойств(ПолеВвода, ЭлементыФормы.ФлажокЭталон, , "Имя");
		ПолеВвода.Доступность = Не ТолькоПросмотр;
	Иначе
		ПолеВвода = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ПолеВводаРеквизита_" + ИмяРеквизита, Истина, ЭлементыФормы.ПанельРеквизиты);
		ПолеВвода.УстановитьДействие("НачалоВыбора", Новый Действие("ПолеВводаСтрокаНачалоВыбора"));
		ПолеВвода.УстановитьДействие("ПриИзменении", Новый Действие("ОтдельныйЭлементУправленияРеквизитаПриИзменении"));
		ЗаполнитьЗначенияСвойств(ПолеВвода, ЭлементыФормы.ПолеВводаЭталон, , "Имя");
		ПолеВвода.ТолькоПросмотр = ТолькоПросмотр;
		Если ОписаниеТипа <> Неопределено Тогда
			ПолеВвода.ТипЗначения=ОписаниеТипа;
			Если ОписаниеТипа.Типы().Количество()=1 Тогда
				ПолеВвода.ВыбиратьТип = Ложь;
			КонецЕсли;
			Если ОписаниеТипа.СодержитТип(Тип("Строка")) Тогда
				ПолеВвода.КнопкаВыбора = Истина;
				ПолеВвода.МногострочныйРежим = Истина;
				Если ОписаниеТипа.КвалификаторыСтроки.Длина = 0 Тогда
					ПолеВвода.ЦветФонаПоля = ЦветФонаСтрокиНеограниченноДлины;
					строкаТзРеквизиты.ЛиСтрокаНеограниченнойДлины = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
	НадписьЭталон = ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьРеквизита_" + ИмяРеквизита, истина, ЭлементыФормы.ПанельРеквизиты);
	//НадписьЭталонПредставление=ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьПредставленияРеквизита_"+ИмяРеквизита,истина,ЭлементыФормы.ПанельРеквизиты);
	ЗаполнитьЗначенияСвойств(НадписьЭталон, ЭлементыФормы.НадписьЭталон,,"Имя");
	//ЗаполнитьЗначенияСвойств(НадписьЭталонПредставление, ЭлементыФормы.НадписьЭталонПредставление,,"Имя");
	ПолеВвода.Видимость = истина;
	НадписьЭталон.Видимость = истина;
	//НадписьЭталонПредставление.Видимость=истина;
	
	ПолеВвода.Значение = строкаТзРеквизиты.ЗначениеРеквизита;
	Если ПолеВвода.Значение <> Значение[ИмяРеквизита] Тогда
		ПолеВвода.ТолькоПросмотр = Истина;
	КонецЕсли; 
	//ПолеВвода.Ширина = ЭлементыФормы.ПанельРеквизиты.Ширина-1;
	
	//ПолеВвода.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельРеквизиты, ГраницаЭлементаУправления.Право);

	НомерРеквизита = РеквизитыТаблица.Количество()-1;
	ПолеВвода.Верх = ЭлементыФормы.ПолеВводаЭталон.Верх+НомерРеквизита*(ЭлементыФормы.ПолеВводаЭталон.Высота+5);
	НадписьЭталон.Верх=ПолеВвода.Верх;
	//НадписьЭталонПредставление.Верх=ПолеВвода.Верх;
	Если Представление="" Тогда
		НадписьЭталон.Заголовок=ИмяРеквизита;
	Иначе
		НадписьЭталон.Заголовок=""+Представление+" ("+ИмяРеквизита+"):";
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтдельныйЭлементУправленияРеквизитаПриИзменении(Элемент)

	СтрокаТаблицы = РеквизитыТаблица.Найти(Сред(Элемент.Имя, СтрДлина("ПолеВводаРеквизита_") + 1), "ИмяРеквизита");
	СтрокаТаблицы.ЗначениеРеквизита = Элемент.Значение;
	СтрокаТаблицы.ТипЗначения = ТипЗнч(Элемент.Значение);
	СтрокаТаблицы.ПризнакМодификации = Истина;
	НадписьРеквизита = ЭлементыФормы[СтрЗаменить(Элемент.Имя, "ПолеВводаРеквизита_", "НадписьРеквизита_")];
	НадписьРеквизита.ЦветТекста = WebЦвета.КожаноКоричневый;

КонецПроцедуры // ОтдельныйЭлементУправленияРеквизитаПриИзменении()

Процедура ДоступностьКнопок(ВыбЗначение="")
	
	ДоступностьКнопокДокумента=Ложь;
	Если ВыбЗначение = "" Тогда
		ВыбЗначение = ЭлементыФормы.ВыбОбъект.Значение;
	КонецЕсли;
	//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность=Истина;
	ОбъектВыбран = Истина
		И ЗначениеЗаполнено(ВыбЗначение)
		//И ТипЗнч(ВыбОбъект) <> Тип("Строка")
		;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Ложь
		Или ОбъектВыбран
		Или (Истина
			И ВыбЗначение <> Неопределено
			И ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Новый.Доступность = (ВыбЗначение <> Неопределено);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = ОбъектВыбран;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Перечитать.Доступность = ОбъектВыбран;
	Если ОбъектВыбран Тогда
		Если Метаданные.Документы.Индекс(ВыбЗначение.Метаданные()) >= 0 Тогда
			ДоступностьКнопокДокумента = ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница.Имя = "СвойстваОбъекта";
		КонецЕсли;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Ложь
				Или ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта 
				Или ЛиЧитатьПисатьДвижения и Метаданные.Документы.Индекс(ВыбОбъект.Метаданные()) >= 0;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта;
	КонецЕсли;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Провести.Доступность = ДоступностьКнопокДокумента;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СделатьНепроведённым.Доступность = ДоступностьКнопокДокумента;
	
	//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Текст = "Записать " + ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница.Заголовок;
	Если ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения Тогда
		ПодсказкаКнопки = "Записать движения";
	Иначе
		ПодсказкаКнопки = "Записать все";
	КонецЕсли; 
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Текст = ПодсказкаКнопки;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Подсказка = ПодсказкаКнопки;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Пояснение = ПодсказкаКнопки;
	
	АктивнаСтраницаИзменяемыхДанных = Ложь
		Или ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта
		Или ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВТаблицу.Доступность = ОбъектВыбран И АктивнаСтраницаИзменяемыхДанных;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ИзТаблицы.Доступность = ОбъектВыбран И АктивнаСтраницаИзменяемыхДанных;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.МенеджерТабличногоПоля.Доступность = ПолучитьТекущееТабличноеПоле() <> Неопределено;
	
КонецПроцедуры

Процедура УстановитьОтображениеЗакладок(Панель)
	
	Если Панель.Страницы.Количество()<2 Тогда
		Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	Иначе
		Панель.Страницы.Удалить(0);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьТаблицыДвижений(Объект)
	
	ТекущаяСтрока = ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		КлючСтрокиРегистра = Новый Структура("ТипРегистра, Имя");
		ЗаполнитьЗначенияСвойств(КлючСтрокиРегистра, ТекущаяСтрока); 
	КонецЕсли; 
	
	// Удалим закладки на ПанельДвижений
	ЭлементыФормы.Движения.Страницы.Очистить();
	СтраницыДвижений.Очистить();;
	
	Если Ложь
		Или Не ЛиЧитатьПисатьДвижения 
		Или Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) 
		Или Объект = Неопределено
	Тогда
		Возврат
	КонецЕсли;
	мдОбъекта=Объект.Метаданные();
	ОбъектыМД = ирНеглобальный.ПолучитьМетаданныеНаборовЗаписейПоРегистраторуЛкс(мдОбъекта);
	ПанельТипаМетаданных = ЭлементыФормы.Движения;
	ТабличноеПолеСтраниц = ЭлементыФормы.СтраницыДвижения;
	ТаблицаСтраниц = ТабличноеПолеСтраниц.Значение;
	Для Каждого МетаРегистр из ОбъектыМД Цикл
		ПолноеИмяМДНабораЗаписей = МетаРегистр.ПолноеИмя();
		ИмяТипаРегистра = ирГлобальный.ЛксПолучитьПервыйФрагмент(ПолноеИмяМДНабораЗаписей);
		ИмяТаблицы = ПолучитьИмяТаблицыРегистра(МетаРегистр);
		СтрокаСтраницы = ТаблицаСтраниц.Добавить();
		СтрокаСтраницы.ИмяСтраницы = ИмяТаблицы;
		СтрокаСтраницы.Имя = МетаРегистр.Имя;
		СтрокаСтраницы.Представление = МетаРегистр.Представление();
		СтрокаСтраницы.ТипРегистра = ИмяТипаРегистра;
		НоваяСтраница = ПанельТипаМетаданных.Страницы.Добавить(ИмяТаблицы, МетаРегистр.Представление());
		ПанельТипаМетаданных.ТекущаяСтраница = НоваяСтраница;
		тчНаФорме = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), ИмяТаблицы, Истина, ПанельТипаМетаданных);
		//Сообщить(мдОбъекта.Имя+" может двигать "+Строка(Рег));
		тчНаФорме.АвтоКонтекстноеМеню=Истина;
		тчНаФорме.ИзменяетДанные = Истина;
		тчНаФорме.Доступность=Истина;
		тчНаФорме.Высота=ПанельТипаМетаданных.Высота-4;
		тчНаФорме.Ширина=ПанельТипаМетаданных.Ширина-4;
		тчНаФорме.Верх=2;
		тчНаФорме.Лево=2;
		тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ПанельТипаМетаданных,ГраницаЭлементаУправления.Низ);
		тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Право,ПанельТипаМетаданных,ГраницаЭлементаУправления.Право);
		тчНаФорме.ТолькоПросмотр=Ложь;
		тчНаФорме.ИзменятьСоставСтрок=Истина;
		тчНаФорме.ИзменятьПорядокСтрок=Истина;
		тчНаФорме.Доступность=Истина;
		//тчНаФорме.ЧередованиеЦветовСтрок=Истина;
		//тчНаФорме.Данные="ТабличнаяЧасть_"+тч.Имя;
		НаборЗаписей = Новый (СтрЗаменить(ПолноеИмяМДНабораЗаписей, ".", "НаборЗаписей."));
		НаборЗаписей.Отбор.Регистратор.Установить(ЭлементыФормы.ВыбОбъект.Значение);
		НаборЗаписей.Прочитать();
		тчНаФорме.Значение=НаборЗаписей.Выгрузить();
		тчНаФорме.Значение.Колонки.Удалить("Регистратор");
		тчНаФорме.СоздатьКолонки();
		Если тчНаФорме.Значение.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
			тчНаФорме.Колонки.НомерСтроки.Данные = "";
			тчНаФорме.Колонки.НомерСтроки.ТолькоПросмотр = Истина;
			тчНаФорме.УстановитьДействие("ПриВыводеСтроки", Новый Действие("ТабличноеПолеСНомеромСтроки"));
		КонецЕсли; 
	КонецЦикла;
	ТаблицаСтраниц.Сортировать("ТипРегистра, Представление");
	Если ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = Неопределено Тогда
		ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = ТаблицаСтраниц[0];
	КонецЕсли; 
	УстановитьОтображениеЗакладок(ЭлементыФормы.Движения);
	ОтобратьСтраницыРегистров();
	Если КлючСтрокиРегистра <> Неопределено Тогда
		НайденныеСтроки = СтраницыДвижений.НайтиСтроки(КлючСтрокиРегистра);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТабличноеПолеСНомеромСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.НомерСтроки.Значение = Элемент.Значение.Индекс(ДанныеСтроки) + 1;
	
КонецПроцедуры

Процедура ВыбОбъектПриИзменении(Элемент = Неопределено)
	
	Если Элемент <> Неопределено Тогда
		// Антибаг платформы 8.2.16 http://partners.v8.1c.ru/forum/thread.jsp?id=1077270#1077270
		Элемент.Значение = Элемент.Значение;
	КонецЕсли; 
	
	мПеречитатьДанные();
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
Процедура мПоместитьДанныеВТЧ(Объект, ИмяТЧ)

	тчНаФорме=ЭлементыФормы["ТабличнаяЧасть_" + ИмяТЧ].Значение;
	тчОбъекта=Объект[ИмяТЧ];
	КолонкиТЧ = тчОбъекта.ВыгрузитьКолонки().Колонки;
	КолонкиТЧ.Удалить("НомерСтроки");
	Если Истина
		И Метаданные.ПланыСчетов.Индекс(Объект.Метаданные()) >= 0
		И ИмяТЧ = "ВидыСубконто"
	Тогда
		КолонкиТЧ.Удалить("Предопределенное");
	КонецЕсли;
	Если Истина
		И Метаданные.ПланыВидовРасчета.Индекс(Объект.Метаданные()) >= 0
		И (Ложь
			Или ИмяТЧ = "БазовыеВидыРасчета"
			Или ИмяТЧ = "ВедущиеВидыРасчета")
	Тогда
		КолонкиТЧ.Удалить("Предопределенный");
	КонецЕсли;
	тчОбъекта.Очистить();
	Для Каждого СтрокаТчНаФорме из тчНаФорме Цикл
		СтрокаОбъекта=тчОбъекта.Добавить();
		Для Каждого КолонкаТч из КолонкиТЧ Цикл
			СтрокаОбъекта[КолонкаТч.Имя]=СтрокаТчНаФорме[КолонкаТч.Имя];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // мПоместитьДанныеВТЧ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
// Возвращаемое значение:
//               – <Тип.Вид> – <описание значения>
//                 <продолжение описания значения>;
//  <Значение2>  – <Тип.Вид> – <описание значения>
//                 <продолжение описания значения>.
//
Функция мДобавитьСтраницуТЧ(ИмяТЧ, ПредставлениеТЧ)

	ИмяТаблицы = "ТабличнаяЧасть_" + ИмяТЧ;
	// -+ АВВ [10.08.2012] НоваяСтраница = ЭлементыФормы.панельТабличныеЧасти.Страницы.Добавить(ИмяТаблицы, ПредставлениеТЧ, , БиблиотекаКартинок.ирТабличнаяЧасть);
	НоваяСтраница = ЭлементыФормы.панельТабличныеЧасти.Страницы.Добавить(ИмяТаблицы, ПредставлениеТЧ, , ирМобильные.ПолучитьКартинку("ирТабличнаяЧасть"));
	ЭлементыФормы.панельТабличныеЧасти.ТекущаяСтраница = НоваяСтраница;
	тчНаФорме = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"),ИмяТаблицы ,Истина,ЭлементыФормы.панельТабличныеЧасти);
	тчНаФорме.АвтоКонтекстноеМеню=Истина;
	тчНаФорме.ИзменяетДанные = Истина;
	тчНаФорме.Доступность=Истина;
	тчНаФорме.Высота=ЭлементыФормы.панельТабличныеЧасти.Высота-30;
	тчНаФорме.Ширина=ЭлементыФормы.панельТабличныеЧасти.Ширина-8;
	тчНаФорме.Верх=4;
	тчНаФорме.Лево=4;
	тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.панельТабличныеЧасти,ГраницаЭлементаУправления.Низ);
	тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.панельТабличныеЧасти,ГраницаЭлементаУправления.Право);
	тчНаФорме.ТолькоПросмотр=Ложь;
	тчНаФорме.ИзменятьСоставСтрок=Истина;
	тчНаФорме.ИзменятьПорядокСтрок=Истина;
	тчНаФорме.Доступность=Истина;
	тчНаФорме.Значение=Новый ТаблицаЗначений;
	тчНаФорме.Значение=ВыбОбъект[ИмяТЧ].Выгрузить();
	тчНаФорме.СоздатьКолонки();
	Если тчНаФорме.Значение.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		тчНаФорме.Колонки.НомерСтроки.Данные = "";
		тчНаФорме.Колонки.НомерСтроки.ТолькоПросмотр = Истина;
		тчНаФорме.УстановитьДействие("ПриВыводеСтроки", Новый Действие("ТабличноеПолеСНомеромСтроки"));
	КонецЕсли; 
	Возврат тчНаФорме;

КонецФункции // ДобавитьСтраницуТЧ()

Процедура УдалитьРеквизиты()

	РеквизитыТаблица.Очистить();
	Всего = ЭлементыФормы.Количество();
	Для Инд=1 ПО Всего Цикл
		Эл = ЭлементыФормы[Всего - Инд];
		ИмяЭл = Эл.Имя;
		Если Ложь
			Или Найти(ИмяЭл, "ПолеВводаРеквизита_") = 1 
			Или Найти(ИмяЭл, "НадписьРеквизита_") = 1
		Тогда
			ЭлементыФормы.Удалить(Эл);
		КонецЕсли;
	КонецЦикла;
	// Ненадежно
	Пока ЭлементыФормы.панельТабличныеЧасти.Страницы.Количество() > 2 Цикл
		ЭлементыФормы.панельТабличныеЧасти.Страницы.Удалить(2);
	КонецЦикла;

КонецПроцедуры // УдалитьРеквизиты()

Функция ПолучитьОбъект(СохранятьИдентификаторСсылки = Ложь, ЭтоГруппаДляНового = Ложь)
	
	Если ЗначениеЗаполнено(ВыбОбъект) Тогда 
		Объект = ВыбОбъект.ПолучитьОбъект();
	КонецЕсли; 
	Если Объект = Неопределено Тогда
		Если ЗначениеЗаполнено(ВыбОбъект) Тогда 
			ИдентификаторСсылки = ВыбОбъект.УникальныйИдентификатор();
		ИначеЕсли Не СохранятьИдентификаторСсылки Тогда
			ИдентификаторСсылки = Неопределено;
		КонецЕсли;
		ОбъектМД = ВыбОбъект.Метаданные();
		Объект = ирНеглобальный.СоздатьСсылочныйОбъектПоМетаданнымЛкс(ОбъектМД, ЭтоГруппаДляНового, ИдентификаторСсылки);
	КонецЕсли;
	Возврат Объект;
	
КонецФункции

Процедура мПеречитатьДанные()

	ирГлобальный.ЛксОбновитьТекстПослеМаркераВСтроке(ЭтаФорма.Заголовок, , ВыбОбъект, ": ");
	УдалитьРеквизиты();
	Модифицированность = Ложь;
	ДоступностьКнопок(ВыбОбъект);
	ЭлементыФормы.ПанельОбъекта.Страницы.ИзмененияНаУзлах.Значение = Null;
	//ИзмененияНаУзлах.Строки.Очистить();
	ПоискВОбъекте.Очистить();
	ЭлементыФормы.ПанельОбъекта.Страницы.СвязанныеДанные.Значение = Null;
	//СвязанныеДанные.Очистить();
	мдОбъекта = ирГлобальный.ЛксПолучитьМетаданные(ВыбОбъект);
	Если мдОбъекта <> Неопределено Тогда
		ТипМетаданных = ирГлобальный.ЛксПолучитьПервыйФрагмент(мдОбъекта.ПолноеИмя());
	Иначе
		ТипМетаданных = Неопределено;
	КонецЕсли;     
	ЭтоДокумент = (ТипМетаданных = "Документ");
	//Для Каждого ТипРегистра Из ТипыРегистров Цикл
	//	ЭлементыФормы.ПанельОбъекта.Страницы[ТипРегистра].Видимость = ЭтоДокумент;
	//КонецЦикла;
	ЭлементыФормы.ПанельОбъекта.Страницы.Движения.Видимость = ЭтоДокумент;;
	ЭлементыФормы.ЛиЧитатьПисатьДвижения.Видимость = ЭтоДокумент;
	ЭлементыФормы.ЛиЗаписьДвиженийВТранзакции.Видимость = ЭтоДокумент;
	
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
	//Если Не ЗначениеЗаполнено(ВыбОбъект) Тогда
		Возврат;
	КонецЕсли; 
	Объект = ПолучитьОбъект(Ложь);
	Если Объект <> Неопределено Тогда
		//ЗаполнитьСтрокуТзРеквизиты(ВыбОбъект, "Ссылка", "Идентификатор", Новый ОписаниеТипов("Строка"), Истина);
		ОписаниеТиповИД = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
		ЗаполнитьСтрокуТзРеквизиты(?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), ВыбОбъект), "Ссылка", "Идентификатор", ОписаниеТиповИД, Не Объект.ЭтоНовый());
		СтруктураТЧ = ирНеглобальный.ПолучитьТабличныеЧастиОбъектаЛкс(мдОбъекта);
		Построитель = Новый ПостроительЗапроса("ВЫБРАТЬ Т.Ссылка ИЗ " + мдОбъекта.ПолноеИмя() + " КАК Т");
		Построитель.ЗаполнитьНастройки();
		Для Каждого ДоступноеПоле Из Построитель.ДоступныеПоля.Ссылка.Поля Цикл
			ИмяПоля = ДоступноеПоле.Имя;
			Если СтруктураТЧ.Свойство(ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			МетаРеквизит = мдОбъекта.Реквизиты.Найти(ИмяПоля);
			Если МетаРеквизит <> Неопределено Тогда
				Попытка
					ИспользованиеРеквизита = МетаРеквизит.Использование;
				Исключение
					ИспользованиеРеквизита = Неопределено
				КонецПопытки;
				Если ИспользованиеРеквизита <> Неопределено Тогда
					Если Ложь
						Или (Истина
							И ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы 
							И Объект.ЭтоГруппа) 
						Или (Истина
							И ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента 
							И Не Объект.ЭтоГруппа)
						Или (ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента)
					Тогда
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
			ЗаполнитьСтрокуТзРеквизиты(Объект, ИмяПоля, ДоступноеПоле.Представление, ДоступноеПоле.ТипЗначения, Ложь
				Или Нрег(ИмяПоля) = Нрег("ВерсияДанных")
				Или Нрег(ИмяПоля) = Нрег("ЭтоГруппа")
				Или Нрег(ИмяПоля) = Нрег("Предопределенный"));
		КонецЦикла;
		Для Каждого ЭлементТЧ Из СтруктураТЧ Цикл
			мДобавитьСтраницуТЧ(ЭлементТЧ.Ключ, ЭлементТЧ.Значение);
		КонецЦикла;
		Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбОбъект)) Тогда
			ИмяСтраницы = "КартаМаршрута";
			НоваяСтраница = ЭлементыФормы.панельТабличныеЧасти.Страницы.Добавить(ИмяСтраницы, "Карта маршрута", , БиблиотекаКартинок.БизнесПроцесс);
			ЭлементыФормы.панельТабличныеЧасти.ТекущаяСтраница = НоваяСтраница;
			тчНаФорме = ЭлементыФормы.Добавить(Тип("ПолеГрафическойСхемы"), ИмяСтраницы, Истина, ЭлементыФормы.панельТабличныеЧасти);
			тчНаФорме.УстановитьСхему(Объект.ПолучитьКартуМаршрута());
			//тчНаФорме.АвтоКонтекстноеМеню=Истина;
			тчНаФорме.Высота=ЭлементыФормы.панельТабличныеЧасти.Высота-30;
			тчНаФорме.Ширина=ЭлементыФормы.панельТабличныеЧасти.Ширина-8;
			тчНаФорме.Верх=4;
			тчНаФорме.Лево=4;
			тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.панельТабличныеЧасти,ГраницаЭлементаУправления.Низ);
			тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.панельТабличныеЧасти,ГраницаЭлементаУправления.Право);
			тчНаФорме.ТолькоПросмотр=Истина;
		КонецЕсли; 
	КонецЕсли;
	СтруктураТипаКонтекста = мПлатформа.ПолучитьСтруктуруТипаИзЗначения(Объект);
	ВнутренняяТаблицаСлов = мПлатформа.ПолучитьТаблицуСловСтруктурыТипа(СтруктураТипаКонтекста);
	ВнутренняяТаблицаСлов = ВнутренняяТаблицаСлов.НайтиСтроки(Новый Структура("ТипСлова", "Свойство"));
	//ВнутренняяТаблицаСлов.Колонки.Добавить("ТипЗначения");
	Для Каждого ВнутренняяСтрокаСлова Из ВнутренняяТаблицаСлов Цикл
		СтрокаРеквизита = РеквизитыТаблица.Найти(ВнутренняяСтрокаСлова.Слово, "ИмяРеквизита");
		Если СтрокаРеквизита <> Неопределено Тогда
			СтрокаРеквизита.ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиСловаПодсказкиЛкс(ВнутренняяСтрокаСлова);
		КонецЕсли; 
	КонецЦикла;

	ЗаполнитьТаблицыДвижений(ВыбОбъект);
	//ОбновитьДеревоУзлов();
	//ЗаполнитьСвязанныеДанные();
	ПанельОбъектаПриСменеСтраницы();
	
	ЭлементыФормы.ПанельТабличныеЧасти.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица;
	ЭтаФорма.Обновить();

КонецПроцедуры // мПеречитатьДанные()

Процедура ЗаполнитьСтрокиСвязанныхДанныхТаблицы(ПолноеИмяИлиОбъектМД, ТипТаблицы, ПредставлениеТаблицы, ИндексКартинки = Неопределено)
	
	Если ТипЗнч(ПолноеИмяИлиОбъектМД) = Тип("Строка") Тогда
		ПолноеИмяМД = ПолноеИмяИлиОбъектМД;
	Иначе
		ПолноеИмяМД = ПолноеИмяИлиОбъектМД.ПолноеИмя();
	КонецЕсли;
	Если ИндексКартинки = Неопределено Тогда
		ИндексКартинки = мСтрокаТипаТабличнойЧасти.ИндексКартинкиЕдинственное;
	КонецЕсли; 
	КомпоновщикНастроек = ирКэш.ПолучитьКомпоновщикТаблицыМетаданныхЛкс(ПолноеИмяМД);
	ИскомыйТип = ТипЗнч(ВыбОбъект);
	Для Каждого ДоступноеПоле Из КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		Если ДоступноеПоле.ТипЗначения.СодержитТип(ИскомыйТип) Тогда
			СтрокаСвязи = СвязанныеДанные.Добавить();
			СтрокаСвязи.ТипТаблицы = ТипТаблицы;
			СтрокаСвязи.ИмяТаблицы = ПолноеИмяМД;
			СтрокаСвязи.ПредставлениеТаблицы = ПредставлениеТаблицы;
			СтрокаСвязи.ИмяКолонки = "" + ДоступноеПоле.Поле;
			СтрокаСвязи.ПредставлениеКолонки = ДоступноеПоле.Заголовок;
			СтрокаСвязи.КоличествоТипов = ДоступноеПоле.ТипЗначения.Типы().Количество();
			СтрокаСвязи.КоличествоСсылок = "?";
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвязанныеДанные()

	ЭлементыФормы.ПанельОбъекта.Страницы.СвязанныеДанные.Значение = Неопределено;
	СтараяСтрока = ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока;
	Если СтараяСтрока <> Неопределено Тогда
		СтарыйКлюч = Новый Структура("ИмяТаблицы, ИмяКолонки");
		ЗаполнитьЗначенияСвойств(СтарыйКлюч, СтараяСтрока); 
	КонецЕсли; 
	
	СвязанныеДанные.Очистить();
	СтрокиТаблицыБД.Очистить();
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли; 
	КоллекцияКорневыхТипов = Новый Массив;
	СтрокиМетаОбъектов = ирКэш.Получить().ТаблицаТиповМетаОбъектов.НайтиСтроки(Новый Структура("Категория", 0));
	Для Каждого СтрокаТаблицыМетаОбъектов Из СтрокиМетаОбъектов Цикл
		Единственное = СтрокаТаблицыМетаОбъектов.Единственное;
		Если Ложь
			Или Единственное = "Константа"
			Или Единственное = "Журнал"
			Или ирГлобальный.ЛксЛиКорневойТипОбъектаБД(Единственное)
			Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(Единственное)
			Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(Единственное)
		Тогда
			КоллекцияКорневыхТипов.Добавить(Единственное);
		КонецЕсли;
	КонецЦикла;
	//КоллекцияКорневыхТипов.Добавить("Константа"); // Константы
	ИндикаторТипов = ирГлобальный.ЛксПолучитьИндикаторПроцесса(КоллекцияКорневыхТипов.Количество(), "Все типы");
	Для Каждого КорневойТип Из КоллекцияКорневыхТипов Цикл
		ирГлобальный.ЛксОбработатьИндикатор(ИндикаторТипов);
		СтрокаКорневогоТипа = ирКэш.Получить().ПолучитьСтрокуТипаМетаОбъектов(КорневойТип);
		МножественноеКорневогоТипа = СтрокаКорневогоТипа.Множественное;
		КоллекцияМетаданных = Метаданные[МножественноеКорневогоТипа];
		Если КоллекцияМетаданных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПредставлениеТипаТаблицы = ирГлобальный.ЛксПолучитьПредставлениеИзИдентификатора(МножественноеКорневогоТипа);
		ИндикаторТипа = ирГлобальный.ЛксПолучитьИндикаторПроцесса(КоллекцияМетаданных.Количество(), "Анализ " + КорневойТип);
		Для Каждого МетаИсточник Из КоллекцияМетаданных Цикл
			ирГлобальный.ЛксОбработатьИндикатор(ИндикаторТипа);
			Если ЛиСвязанныеТабличныеЧасти Тогда
				Если ирГлобальный.ЛксЛиКорневойТипОбъектаБД(КорневойТип) Тогда
					Если МетаИсточник.ТабличныеЧасти.Количество() > 0 Тогда
						Для Каждого МетаТабличнаяЧасть Из МетаИсточник.ТабличныеЧасти Цикл
							ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаТабличнаяЧасть, мСтрокаТипаТабличнойЧасти.Единственное, 
								МетаИсточник.Представление() + "." + МетаТабличнаяЧасть.Представление(), мСтрокаТипаТабличнойЧасти.ИндексКартинкиЕдинственное);
						КонецЦикла;
					КонецЕсли;
					Если КорневойТип = "ПланСчетов" Тогда
						Если МетаИсточник.ВидыСубконто <> Неопределено Тогда
							ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаИсточник.ПолноеИмя() + "." + "ВидыСубконто", "ВидыСубконто",
								МетаИсточник.Представление() + "." + "Виды субконто");
						КонецЕсли; 
					КонецЕсли;
					Если КорневойТип = "ПланВидовРасчета" Тогда
						ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаИсточник.ПолноеИмя() + ".ВедущиеВидыРасчета", "ВедущиеВидыРасчета",
							МетаИсточник.Представление() + "." + "Ведущие виды расчета");
						Если МетаИсточник.ЗависимостьОтВидовРасчета <> Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать Тогда
							ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаИсточник.ПолноеИмя() + ".БазовыеВидыРасчета", "БазовыеВидыРасчета",
								МетаИсточник.Представление() + "." + "Базовые виды расчета");
						КонецЕсли; 
						Если МетаИсточник.ИспользованиеПериодаДействия Тогда
							ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаИсточник.ПолноеИмя() + ".ВытесняющиеВидыРасчета", "ВытесняющиеВидыРасчета",
								МетаИсточник.Представление() + "." + "Вытесняющие виды расчета");
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли; 
			Если ЛиСвязанныеТаблицыИзменений Тогда
				ЕстьТаблицаИзменений = Ложь;
				Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
					Если ПланОбмена.Состав.Содержит(МетаИсточник) Тогда
						ЕстьТаблицаИзменений = Истина;
						Прервать;
					КонецЕсли; 
				КонецЦикла;
				Если ЕстьТаблицаИзменений Тогда
					Если Ложь
						Или ирГлобальный.ЛксЛиКорневойТипОбъектаБД(КорневойТип)
						Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(КорневойТип)
						Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(КорневойТип)
					Тогда
						ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаИсточник.ПолноеИмя() + "." + "Изменения", "Изменения",
							МетаИсточник.Представление() + "." + "Изменения", мСтрокаТипаТабличнойЧасти.ИндексКартинкиЕдинственное);
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли;
			ЗаполнитьСтрокиСвязанныхДанныхТаблицы(МетаИсточник, СтрокаКорневогоТипа.Единственное, МетаИсточник.Представление(), СтрокаКорневогоТипа.ИндексКартинкиЕдинственное);
		КонецЦикла;
		ирГлобальный.ЛксОсвободитьИндикаторПроцесса();
	КонецЦикла;
	ирГлобальный.ЛксОсвободитьИндикаторПроцесса();
	
	Если СтарыйКлюч <> Неопределено Тогда
		НайденныеСтроки = СвязанныеДанные.НайтиСтроки(СтарыйКлюч);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// Такой прием нужен для обхода штатного ограничения типа
	КолонкаРасширенногоЗначения = ЭлементыФормы.РеквизитыТаблица.Колонки.ЗначениеРеквизита;
	ЭлементУправления = КолонкаРасширенногоЗначения.ЭлементУправления;
	КолонкаРасширенногоЗначения.Данные = "ЗначениеРеквизита"; 
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаВыбора = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОчистки = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОткрытия = Истина;
	
	Если ПараметрСсылка <> Неопределено Тогда
		ВыбОбъект = ПараметрСсылка;
	КонецЕсли;
	
	Попытка
		мПеречитатьДанные();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
	Если ПараметрИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = ПараметрИскомоеЗначение;
		ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.ПоискВОбъекте;
		НайтиНажатие();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	//СохранитьЗначение("ВыбОбъект",ВыбОбъект);
	//СохранитьЗначение("ЛиЧитатьПисатьДвижения",ЛиЧитатьПисатьДвижения);
КонецПроцедуры

Процедура ВыбОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	УдалитьРеквизиты();
	ЗаполнитьТаблицыДвижений(Неопределено);
	ДоступностьКнопок(Неопределено);
	Элемент.Значение = "";
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ПолучитьИзмененныйОбъект()

	Объект = ПолучитьОбъект(Истина);
	МетаРеквизиты = Объект.Метаданные().Реквизиты;
	// заполним реквизиты объекта
	Для каждого СтрокаРеквизита из РеквизитыТаблица Цикл
		ЗначениеРеквизита = СтрокаРеквизита.ЗначениеРеквизита;
		МетаРеквизит = МетаРеквизиты.Найти(СтрокаРеквизита.ИмяРеквизита);
		Если Истина
			И МетаРеквизит <> Неопределено
			И Не МетаРеквизит.Тип.СодержитТип(ТипЗнч(ЗначениеРеквизита))
		Тогда
			Сообщить("Значение реквизита """ + СтрокаРеквизита.ИмяРеквизита + """ не изменено (несовместимые типы)", СтатусСообщения.Информация);
			Продолжить;
		КонецЕсли;
		Попытка
			Объект[СтрокаРеквизита.ИмяРеквизита] = ЗначениеРеквизита;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Если Найти(ОписаниеОшибки, "Поле объекта недоступно для записи") = 0 Тогда
				Сообщить("Не удалось установить значение реквизита """ + СтрокаРеквизита.ИмяРеквизита + """: " + ОписаниеОшибки, СтатусСообщения.Внимание);
			КонецЕсли; 
		КонецПопытки;
	КонецЦикла;
	
	// заполним табличные части из таблиц на форме
	мдОбъекта = Объект.Метаданные();
	СтруктураТЧ = ирНеглобальный.ПолучитьТабличныеЧастиОбъектаЛкс(Объект);
	Для Каждого КлючИЗначение из СтруктураТЧ Цикл
		мПоместитьДанныеВТЧ(Объект, КлючИЗначение.Ключ);
	КонецЦикла;
	Возврат Объект;

КонецФункции // ПолучитьИзмененныйОбъект()

// Процедура заполняет реквизиты и табличные части из таблиц на форме и записывает объект
Функция ЗаписатьОбъект(Знач РежимЗаписи)
	
	Объект = ПолучитьИзмененныйОбъект();
	Попытка
		ОбменДанными = Объект.ОбменДанными;
	Исключение
		ОбменДанными = Неопределено;
	КонецПопытки; 
	Если ОбменДанными <> Неопределено Тогда
		ОбменДанными.Загрузка = Истина
			И Не ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбОбъект))
			И ЛиЗаписьБезПроверок 
			И (Ложь
				Или РежимЗаписи = Неопределено
				Или РежимЗаписи = РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Если Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбОбъект)) Тогда
		РежимЗаписи = Неопределено;
	КонецЕсли;
	ирНеглобальный.ЗаписатьОбъектЛкс(Объект, ЗаписьНаСервере, РежимЗаписи);
	Сообщить("Записываем " + Объект);
	Возврат Объект.Ссылка;
	
КонецФункции

Функция ПолучитьИмяТаблицыРегистра(МетаРегистр) Экспорт 
	
	ПолноеИмяМД = МетаРегистр.ПолноеИмя();
	ИмяТаблицы = "Движение_" + СтрЗаменить(ПолноеИмяМД, ".", "_");
	Возврат ИмяТаблицы;

КонецФункции

// Процедура заполняет реквизиты регистров накоплений из таблиц на форме и записывает их.
Процедура ЗаписатьРегистры(СсылкаДокумента)
	
	ОбъектыМД = ирНеглобальный.ПолучитьМетаданныеНаборовЗаписейПоРегистраторуЛкс(ВыбОбъект.Метаданные());
	Для Каждого МетаРегистр из ОбъектыМД Цикл
		ПолноеИмяМД = МетаРегистр.ПолноеИмя();
		НаборЗаписей = Новый (СтрЗаменить(ПолноеИмяМД, ".", "НаборЗаписей."));
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаДокумента);
		ИмяТаблицы = ПолучитьИмяТаблицыРегистра(МетаРегистр);
		НоваяТаблица = ЭлементыФормы[ИмяТаблицы].Значение;
		//НоваяТаблица.ЗаполнитьЗначения(ВыбОбъект, "Регистратор");
		НаборЗаписей.Загрузить(НоваяТаблица);
		НаборЗаписей.ОбменДанными.Загрузка = ЛиЗаписьБезПроверок;
		ирНеглобальный.ЗаписатьОбъектЛкс(НаборЗаписей, ЗаписьНаСервере);
		Сообщить("Записываем " + Строка(НаборЗаписей));
	КонецЦикла;
	
КонецПроцедуры

Функция КнопкаЗаписатьНажатие(Элемент,РежимЗаписи="")// Возвращает Истина, если удалось записать и Ложь иначе.
	
	МакетОбъекта = ПолучитьОбъект(Истина);
	Если Истина
		И МакетОбъекта.ЭтоНовый()
		И ЗначениеЗаполнено(ВыбОбъект) 
	Тогда
		Ответ = Вопрос("Вы собираетесь записать данные отсутствующего в БД объекта. Иногда разумнее восстановить их из другой базы. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	Если Истина
		И МакетОбъекта <> Неопределено
		И ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница <> ЭлементыФормы.ПанельОбъекта.Страницы.Движения
	Тогда
		Если МакетОбъекта.Заблокирован() Тогда
			Сообщить("Объект заблокирован и не может быть записан.");
			Возврат Ложь;
		КонецЕсли;
		Если ЭтоДокумент Тогда
			Если ЛиЧитатьПисатьДвижения Тогда
				Если ЛиЗаписьДвиженийВТранзакции Тогда
					НачатьТранзакцию();
					Сообщить("--Открыта транзакция");
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли; 
		НоваяСсылка = ЗаписатьОбъект(?(РежимЗаписи="", РежимЗаписиДокумента.Запись, РежимЗаписи));
		Если ЭтоДокумент Тогда
			Если ЛиЧитатьПисатьДвижения Тогда
				ЗаписатьРегистры(НоваяСсылка);
				Если ЛиЗаписьДвиженийВТранзакции Тогда
					ЗафиксироватьТранзакцию();
					Сообщить("--Зафиксирована транзакция");
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		ВыбОбъект = НоваяСсылка;
		мПеречитатьДанные();
		Модифицированность = Ложь;
	Иначе
		ЗаписатьРегистры(ВыбОбъект);
		ЗаполнитьТаблицыДвижений(ВыбОбъект);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура КнопкаПровестиНажатие(Элемент)
	
	Если Вопрос("Вы действительно хотите провести документ "+Строка(ВыбОбъект)+" ?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет,"Провести документ?")<>КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;
	КнопкаЗаписатьНажатие(Элемент,РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбъектУдалить(Кнопка)
	
	Если Не ЗначениеЗаполнено(ВыбОбъект) Тогда
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Вы осознаёте ответственность за нарушение ссылочной целостности?
		|И действительно хотите НАВСЕГДА удалить "+Строка(ВыбОбъект)+" ?",
		РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Удалить навсегда?");
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 

	Объект = ВыбОбъект.ПолучитьОбъект();
	Попытка
		Объект.ОбменДанными.Загрузка = ЛиЗаписьБезПроверок;
	Исключение
		// Это узел плана обмена
	КонецПопытки; 
	ирНеглобальный.УдалитьОбъектЛкс(Объект, ЗаписьНаСервере);
	ЭтаФорма.ВыбОбъект = "";
	ВыбОбъектОчистка(ЭлементыФормы.ВыбОбъект, Истина)
	
КонецПроцедуры

Процедура ОбъектСделатьНепроведённым(Кнопка)
	
	Если Вопрос("Вы действительно хотите отменить проведение документа "+Строка(ВыбОбъект)+" ?",РежимДиалогаВопрос.ДаНет,30,КодВозвратаДиалога.Нет,"Отменить провединие документа?")<>КодВозвратаДиалога.Да Тогда
		Возврат
	КонецЕсли;
	КнопкаЗаписатьНажатие(Кнопка,РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПанельОбъектаПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ПанельОбъекта;
	КонецЕсли; 
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элемент.Страницы.Индекс(Элемент.ТекущаяСтраница);
	КонецЕсли; 
	ДоступностьКнопок();
	Страницы = ЭлементыФормы.ПанельОбъекта.Страницы;
	Если Страницы[ТекущаяСтраница] = Страницы.СвязанныеДанные Тогда
		Если Страницы[ТекущаяСтраница].Значение = Null Тогда
			ЗаполнитьСвязанныеДанные();
		КонецЕсли; 
	ИначеЕсли Страницы[ТекущаяСтраница] = Страницы.ИзмененияНаУзлах Тогда
		Если Страницы[ТекущаяСтраница].Значение = Null Тогда
			ОбновитьДеревоУзлов();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура флПоказыватьДвиженияПриИзменении(Элемент = Неопределено) Экспорт
	
	ЗаполнитьТаблицыДвижений(ВыбОбъект);
	ДоступностьКнопок();
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Функция лкУстановитьЗначениеВЯчейку(Область, Значение, Тип)
	
	Если ТипЗнч(Значение)=Тип("Строка") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Строка", Тип.КвалификаторыСтроки);
		Область.Значение = Значение;
	ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Число", Тип.КвалификаторыЧисла);
		Область.Значение=Значение;
	ИначеЕсли ТипЗнч(Значение)=Тип("Булево") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Булево");
		Область.Значение=Значение;
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Дата", Тип.КвалификаторыДаты);
		Область.Значение=Значение;
	Иначе
		Область.Текст=Строка(Значение);
		Область.Примечание.Текст=ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;
	
КонецФункции

Функция лкПолучитьЗначениеИзЯчейки(Область)
	
	Если Область.СодержитЗначение=Истина Тогда
		Возврат Область.Значение;
	КонецЕсли;
	Если Область.Примечание.Текст<>"" Тогда
		Попытка
			Возврат ЗначениеИзСтрокиВнутр(Область.Примечание.Текст);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат Область.Текст;
	
КонецФункции

Функция ПолучитьТекущееТабличноеПоле()
	
	СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.ТекущаяСтраница;
	Если СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.Страницы.ТабличныйДокумент Тогда
		Возврат Неопределено;
	ИначеЕсли СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.Страницы.СвойстваОбъекта Тогда
		СтраницаТЧ = ЭлементыФОрмы.панельТабличныеЧасти.ТекущаяСтраница;
		Если Ложь
			Или СтраницаТЧ = ЭлементыФОрмы.панельТабличныеЧасти.Страницы.СтраницаРеквизиты 
			Или СтраницаТЧ = ЭлементыФОрмы.панельТабличныеЧасти.Страницы.РеквизитыТаблица
		Тогда
			Возврат ЭлементыФормы.РеквизитыТаблица;
		Иначе
			Возврат ЭлементыФормы[СтраницаТЧ.Имя];
		КонецЕсли;
	ИначеЕсли СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.Страницы.Движения Тогда
		ИмяПанели = ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница.Имя;
		ИмяТаблицы = ЭлементыФормы[ИмяПанели].ТекущаяСтраница.Имя;
		Если ЭлементыФормы.Найти(ИмяТаблицы) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ЭлементыФормы[ИмяТаблицы];
	Иначе
		ТабличноеПоле = ЭлементыФормы.Найти(СтраницаОбъекта.Имя);
		Возврат ТабличноеПоле;
	КонецЕсли;
	
КонецФункции

Процедура ОсновныеДействияФормыВТаблицу(Кнопка)
	
	Т=ЭлементыФормы.ТабличныйДокумент;
	Т.Очистить();

	ТЗ=ПолучитьТекущееТабличноеПоле().Значение;
	Если ТЗ=Неопределено Тогда
		Предупреждение("Не указана таблица");
		Возврат;
	КонецЕсли;
	Кол=1;
	Для Каждого КолТаблицы ИЗ ТЗ.Колонки Цикл
		Т.Область(1, Кол).Текст=КолТаблицы.Имя;
		Т.Область(1, Кол).Шрифт=Новый Шрифт(Т.Область(1, Кол).Шрифт,,,истина);
		Кол=Кол+1;
	КонецЦикла;
	Стр=2;
	Для Каждого СтрТаблицы ИЗ ТЗ Цикл
		Кол=1;
		Для Каждого КолТаблицы ИЗ ТЗ.Колонки Цикл
			Если КолТаблицы.Имя="ЗначениеРеквизита" Тогда
				Зн=ЭлементыФормы["ПолеВводаРеквизита_"+СтрТаблицы.ИмяРеквизита].Значение;
			Иначе
				Зн=СтрТаблицы[КолТаблицы.Имя];
			КонецЕсли;
			лкУстановитьЗначениеВЯчейку(Т.Область(Стр, Кол), Зн, КолТаблицы.ТипЗначения);
			Кол=Кол+1;
		КонецЦикла;
		Стр=Стр+1;
	КонецЦикла;
	ЭлементыФОрмы.ПанельОбъекта.ТекущаяСтраница=ЭлементыФОрмы.ПанельОбъекта.Страницы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИзТаблицы(Кнопка)
	
	Т=ЭлементыФормы.ТабличныйДокумент;
	ТЗ=ПолучитьТекущееТабличноеПоле().Значение;
	Если ТЗ=Неопределено Тогда
		Предупреждение("Не указана таблица");
		Возврат;
	КонецЕсли;
	Если ТЗ<>РеквизитыТаблица Тогда
		ТЗ.Очистить();
	КонецЕсли;
	//Идем по колонкам таблицы значений
	Для Каждого КолТаблицы ИЗ ТЗ.Колонки Цикл
		Если ТЗ=РеквизитыТаблица Тогда
			ИмяРеквизитаКолонка=неопределено;
			Для Кол=1 По Т.ШиринаТаблицы Цикл
				ИмяКолонкиМакета=СокрЛП(Т.Область(1, Кол).Текст);
				Если ИмяКолонкиМакета="ИмяРеквизита" Тогда
					ИмяРеквизитаКолонка=Кол;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ИмяРеквизитаКолонка=Неопределено Тогда
				Предупреждение("Нет колонки с именем реквизита");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		//Ищем похожие колонки в макете
		Для Кол=1 По Т.ШиринаТаблицы Цикл
			ИмяКолонкиМакета=СокрЛП(Т.Область(1, Кол).Текст);
			Если ИмяКолонкиМакета<>КолТаблицы.Имя Тогда
				Продолжить;
			КонецЕсли;
			//Нашли нужную нам колонку, идем по строкам
			Для Стр=2 По Т.ВысотаТаблицы Цикл
				Зн=лкПолучитьЗначениеИзЯчейки(Т.Область(Стр, Кол));
				Если ТЗ=РеквизитыТаблица Тогда
					Если КолТаблицы.Имя="ЗначениеРеквизита" Тогда
						ИмяРеквизита=лкПолучитьЗначениеИзЯчейки(Т.Область(Стр, ИмяРеквизитаКолонка));
						ЭлементУправленияРеквизита = ЭлементыФормы["ПолеВводаРеквизита_"+ИмяРеквизита];
						СтрокаТаблицы = РеквизитыТаблица.Найти(Сред(ЭлементУправленияРеквизита.Имя, СтрДлина("ПолеВводаРеквизита_") + 1), "ИмяРеквизита");
						Если СтрокаТаблицы.РазрешеноИзменение Тогда
							ЭлементУправленияРеквизита.Значение = Зн;
							ОтдельныйЭлементУправленияРеквизитаПриИзменении(ЭлементУправленияРеквизита);
						КонецЕсли; 
					КонецЕсли;
				Иначе
					Пока ТЗ.Количество()<Стр-1 Цикл
						ТЗ.Добавить();
					КонецЦикла;
					ТЗ[Стр-2][Кол-1]=Зн;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЭтаФорма.Модифицированность = Истина;
	Предупреждение("Данные загружены");
	
КонецПроцедуры

Функция мПроверитьМодифицированность()

	Отказ = Ложь;
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Продолжить не сохраняя изменения?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Не Отказ;

КонецФункции // мПроверитьМодифицированность()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или Не мПроверитьМодифицированность();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПеречитать(Кнопка)
	
	Если мПроверитьМодифицированность() Тогда 
		мПеречитатьДанные();
	КонецЕсли;

КонецПроцедуры

Процедура ВыбОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		ирНеглобальный.ВыбратьТипСсылкиВПолеВводаЛкс(Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПолеВводаСтрокаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		СтандартнаяОбработка = Ложь;
		ФормаРедактора = ирКэш.Получить().ПолучитьФорму("Текст", Элемент, Новый УникальныйИдентификатор);
		ФормаРедактора.РежимВыбора = Истина;
		ФормаРедактора.НачальноеЗначениеВыбора = Элемент.Значение;
		ФормаРедактора.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыОПодсистеме(Кнопка)
	
	ирГлобальный.ЛксОткрытьСправкуПоПодсистеме(ЭтотОбъект);

КонецПроцедуры

Процедура ВыбОбъектОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, , Истина);
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Попытка
		мПеречитатьДанные();
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИсследовать(Кнопка)
	
	Объект = ПолучитьИзмененныйОбъект();
	Если ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта Тогда 
		Если Объект <> Неопределено Тогда 
			ирОтладка.Исследовать(Объект);
		КонецЕсли; 
	ИначеЕсли ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения Тогда 
		ТекущаяСтрока = ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока;
		НаборЗаписей = Новый (ТекущаяСтрока.ТипРегистра + "НаборЗаписей." + ТекущаяСтрока.Имя);
		НаборЗаписей.Отбор.Регистратор.Установить(ВыбОбъект);
		НоваяТаблица = ЭлементыФормы["Движение_" + ТекущаяСтрока.ТипРегистра + "_" + ТекущаяСтрока.Имя].Значение;
		//НоваяТаблица.ЗаполнитьЗначения(ВыбОбъект, "Регистратор");
		НаборЗаписей.Загрузить(НоваяТаблица);
		НаборЗаписей.ОбменДанными.Загрузка = ЛиЗаписьБезПроверок;
		ирОтладка.Исследовать(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура РеквизитыТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ПризнакМодификации = Истина Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.КожаноКоричневый;
	КонецЕсли; 
	Если ДанныеСтроки.ЛиСтрокаНеограниченнойДлины = Истина Тогда
		ОформлениеСтроки.Ячейки.ЗначениеРеквизита.ЦветФона = ЦветФонаСтрокиНеограниченноДлины;
	КонецЕсли; 
	Если Истина
		И ДанныеСтроки.РазрешеноИзменение
		И ТипЗнч(ДанныеСтроки.ЗначениеРеквизита) = Тип("Булево") 
	Тогда
		ОформлениеСтроки.Ячейки.ЗначениеРеквизита.УстановитьФлажок(ДанныеСтроки.ЗначениеРеквизита);
	КонецЕсли;
	ирНеглобальный.ТабличноеПоле_ОтобразитьПиктограммыТиповЛкс(ОформлениеСтроки, "ЗначениеРеквизита");
	
КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаПриИзменении(Элемент = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.РеквизитыТаблица.Колонки.ЗначениеРеквизита.ЭлементУправления;
	КонецЕсли; 
	ОтдельныйЭлементУправленияРеквизита = ЭлементыФормы["ПолеВводаРеквизита_" + ЭлементыФормы.РеквизитыТаблица.ТекущиеДанные.ИмяРеквизита];
	ОтдельныйЭлементУправленияРеквизита.Значение = ЭлементыФормы.РеквизитыТаблица.ТекущиеДанные.ЗначениеРеквизита;
	ИмяРеквизита = ЭлементыФормы.РеквизитыТаблица.ТекущиеДанные.ИмяРеквизита;
	НадписьРеквизита = ЭлементыФормы.Найти("НадписьРеквизита_" + ИмяРеквизита);
	НадписьРеквизита.ЦветТекста = WebЦвета.КожаноКоричневый;
	ЭлементыФормы.РеквизитыТаблица.ТекущиеДанные.ПризнакМодификации = Истина;
	
КонецПроцедуры

Процедура РеквизитыТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПолеВводаЗначения = Элемент.Колонки.ЗначениеРеквизита.ЭлементУправления;
	ПолеВводаЗначения.ТолькоПросмотр = Не Элемент.ТекущаяСтрока.РазрешеноИзменение;
	ПолеВводаЗначения.КнопкаВыбора = Элемент.ТекущаяСтрока.РазрешеноИзменение;
	ПолеВводаЗначения.КнопкаОчистки = Элемент.ТекущаяСтрока.РазрешеноИзменение;
	
КонецПроцедуры

Процедура РеквизитыТаблицаПриИзмененииФлажка(Элемент, Колонка)
	
	ирГлобальный.ЛксИнтерактивноЗаписатьВКолонкуТабличногоПоля(Элемент, Колонка, Не Элемент.ТекущаяСтрока[Колонка.Данные]);
	
КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.РеквизитыТаблица.ТекущаяСтрока.ЗначениеРеквизита);

КонецПроцедуры

Процедура ОсновныеДействияФормыНайтиСсылкиНаОбъект(Кнопка)
	
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли; 
	// -+ АВВ [10.08.2012] Обработки.ирПоискСсылокНаОбъект.Создать().НайтиИПоказатьСсылки(ВыбОбъект);
	ирМобильные.ПодключитьВнешнююОбработку("ирПоискСсылокНаОбъект").НайтиИПоказатьСсылки(ВыбОбъект);
	
КонецПроцедуры

Процедура ПриАктивизацииСтрокиСтраницы(ТабличноеПоле, Панель = Неопределено, ПрефиксСтраницы = "")
	
	Если Панель = Неопределено Тогда
		Панель = ЭтаФорма.ЭлементыФормы[Сред(ТабличноеПоле.Имя, СтрДлина("Страницы") + 1)];
	КонецЕсли; 
	Панель.Видимость = ТабличноеПоле.ТекущаяСтрока <> Неопределено;
	Если Панель.Видимость Тогда
		Панель.ТекущаяСтраница = Панель.Страницы[ТабличноеПоле.ТекущаяСтрока.ИмяСтраницы];
	КонецЕсли; 
	
КонецПроцедуры

Процедура СтраницыРегистраПриАктивизацииСтроки(Элемент)
	
	ПриАктивизацииСтрокиСтраницы(Элемент);
	
КонецПроцедуры

Процедура СтраницыРегистрНакопленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ТипРегистра.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ТипРегистра.ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(ДанныеСтроки.ТипРегистра);
	
КонецПроцедуры

Процедура КП_СтраницыДвиженияСкрыватьПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементОтбора = ЭлементыФормы.СтраницыДвижения.ОтборСтрок.Количество;
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Кнопка.Пометка;
	ЭлементОтбора.Значение = 0;
	
КонецПроцедуры

Процедура ОтобратьСтраницыРегистров(Текст = Неопределено)
	
	Если Текст = Неопределено Тогда
		Текст = ФильтрИменДвижений;
	КонецЕсли; 
	ТабличноеПоле = ЭлементыФормы.СтраницыДвижения;
	ЭлементОтбора = ТабличноеПоле.ОтборСтрок.Представление;
	Если ТабличноеПоле.ТекущаяКолонка <> Неопределено Тогда
		Если Ложь
			Или ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Имя
			Или ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Представление
		Тогда
			ЭлементОтбора = ТабличноеПоле.ОтборСтрок[ТабличноеПоле.ТекущаяКолонка.Данные];
		ИначеЕсли Ложь
			Или ТабличноеПоле.Колонки.Имя.Видимость
			Или Не ТабличноеПоле.Колонки.Представление.Видимость
		Тогда
			ЭлементОтбора = ТабличноеПоле.ОтборСтрок.Имя;
		ИначеЕсли Ложь
			Или ТабличноеПоле.Колонки.Представление.Видимость
			Или Не ТабличноеПоле.Колонки.Имя.Видимость
		Тогда
			ЭлементОтбора = ТабличноеПоле.ОтборСтрок.Представление;
		КонецЕсли; 
	КонецЕсли; 
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = Текст;

КонецПроцедуры

Процедура ФильтрИменПриИзменении(Элемент)
	
	ОтобратьСтраницыРегистров(Элемент.Значение);
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ФильтрИменАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ОтобратьСтраницыРегистров(Текст);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНовый(Кнопка)
	
	Если мПроверитьМодифицированность() Тогда 
		ВыбОбъект = Новый (ТипЗнч(ВыбОбъект));
		мПеречитатьДанные();
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьОсновнуюФормуОбъекта(Кнопка)
	
	Объект = ПолучитьИзмененныйОбъект();
	ОсновнаяФормаОбъекта = Объект.ПолучитьФорму();
	ОсновнаяФормаОбъекта.Открыть();
	ОсновнаяФормаОбъекта.Модифицированность = ЭтаФорма.Модифицированность;
	
КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЗначениеИзменено = ирНеглобальный.ПолеВводаРасширенногоЗначения_НачалоВыбораЛкс(ЭлементыФормы.РеквизитыТаблица, СтандартнаяОбработка,, Истина);
	Если ЗначениеИзменено Тогда
		РеквизитыТаблицаЗначениеРеквизитаПриИзменении();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыМенеджерТабличногоПоля(Кнопка)
	
	 ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	 // -+ АВВ [10.08.2012] Обработки.ирМенеджерТабличногоПоля.ПолучитьФорму(, ЭтаФорма, ).УстановитьСвязь(ТабличноеПоле);
	 ирМобильные.ПодключитьВнешнююОбработку("ирМенеджерТабличногоПоля").ПолучитьФорму(, ЭтаФорма, ).УстановитьСвязь(ТабличноеПоле);

КонецПроцедуры

Процедура ОбновитьДеревоУзлов() Экспорт 
	
	ЭлементыФормы.ПанельОбъекта.Страницы.ИзмененияНаУзлах.Значение = Неопределено;
	ЭтаФорма.ИзмененияНаУзлах.Строки.Очистить();
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли; 
	СтрокаКорневогоТипа = ирКэш.Получить().ПолучитьСтрокуТипаМетаОбъектов("ПланОбмена");
	Для каждого ПланОбменаМД Из Метаданные.ПланыОбмена Цикл
		МассивУзлов         = Новый Массив; 
		МенеджерПланаОбмена = ПланыОбмена[ПланОбменаМД.Имя];
		ВыборкаУзлов        = МенеджерПланаОбмена.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка = МенеджерПланаОбмена.ЭтотУзел() Тогда
				Продолжить;
			КонецЕсли;
			МассивУзлов.Добавить(ВыборкаУзлов.Ссылка);
		КонецЦикла;
		Если НЕ ПланОбменаМД.Состав.Содержит(ЭтаФорма.ВыбОбъект.Метаданные()) Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаДЗ = ЭтаФорма.ИзмененияНаУзлах.Строки.Найти(ПланОбменаМД.Синоним, "УзелОбмена", Ложь);
		Если СтрокаДЗ = Неопределено Тогда
			СтрокаДЗ = ЭтаФорма.ИзмененияНаУзлах.Строки.Добавить();
			СтрокаДЗ.УзелОбмена     = ПланОбменаМД.Синоним;
			СтрокаДЗ.ИмяПланаОбмена = ПланОбменаМД.Имя;
			СтрокаДЗ.ИндексКартинки = СтрокаКорневогоТипа.ИндексКартинкиЕдинственное;
		КонецЕсли;
		//Если МассивУзлов.Количество() > 0 Тогда
			Для каждого Узел Из МассивУзлов Цикл
				СтрокаУзла = СтрокаДЗ.Строки.Найти(Узел, "УзелОбмена", Ложь);
				Если СтрокаУзла = Неопределено Тогда
					СтрокаУзла = СтрокаДЗ.Строки.Добавить();
					СтрокаУзла.УзелОбмена = Узел;
					СтрокаУзла.ИндексКартинки = ирГлобальный.ЛксПолучитьИндексКартинкиСсылки(Узел);
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
	КонецЦикла;
	Если ИзмененияНаУзлах.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Узел, 
	|	НомерСообщения 
	|ИЗ " + ВыбОбъект.Метаданные().ПолноеИмя() + ".Изменения 
	|	ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.ВыбОбъект);
	ТаблицаУзлов = Запрос.Выполнить().Выгрузить();
	Для каждого ПланОбмена Из ЭтаФорма.ИзмененияНаУзлах.Строки Цикл
		Для каждого СтрокаУзла Из ПланОбмена.Строки Цикл
			СтрокаУзла.Пометка = Ложь;
			//СтрокаУзла.Выгружен = Ложь;
			СтрокаРегистрации = ТаблицаУзлов.Найти(СтрокаУзла.УзелОбмена, "Узел");
			Если СтрокаРегистрации <> Неопределено Тогда
				СтрокаУзла.Пометка = Истина;
				СтрокаУзла.НомерСообщения = СтрокаРегистрации.НомерСообщения;
				//СтрокаУзла.Выгружен = СтрокаРегистрации.НомерСообщения <> Null;
			КонецЕсли;
			ирНеглобальный.УстановитьПометкиРодителейЛкс(СтрокаУзла);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДеревоУзловПриИзмененииФлажка(Элемент, Колонка)
	
	СтрокаУзла = Элемент.ТекущаяСтрока;
	Если СтрокаУзла.Уровень() = 0 Тогда
		ирНеглобальный.УстановитьПометкиПодчиненныхЛкс(СтрокаУзла);
		Для каждого ДочерняяСтрока Из СтрокаУзла.Строки Цикл
			Попытка
				Если ДочерняяСтрока.Пометка Тогда
					ПланыОбмена.ЗарегистрироватьИзменения(ДочерняяСтрока.УзелОбмена, ЭтаФорма.ВыбОбъект); 
				Иначе 
					ПланыОбмена.УдалитьРегистрациюИзменений(ДочерняяСтрока.УзелОбмена, ЭтаФорма.ВыбОбъект);
				КонецЕсли;
				ДочерняяСтрока.НомерСообщения = 0;
			Исключение
				ДочерняяСтрока.Пометка = Не ДочерняяСтрока.Пометка;
				ирНеглобальный.УстановитьПометкиРодителейЛкс(ДочерняяСтрока);
			КонецПопытки;
		КонецЦикла;
	Иначе
		Если СтрокаУзла.Пометка = 2 Тогда
			СтрокаУзла.Пометка = 0;
		КонецЕсли; 
		Попытка
			Если СтрокаУзла.Пометка Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(СтрокаУзла.УзелОбмена, ЭтаФорма.ВыбОбъект); 
			Иначе 
				ПланыОбмена.УдалитьРегистрациюИзменений(СтрокаУзла.УзелОбмена, ЭтаФорма.ВыбОбъект); 
			КонецЕсли;
			СтрокаУзла.НомерСообщения = 0;
		Исключение
			СтрокаУзла.Пометка = Не СтрокаУзла.Пометка;
		КонецПопытки;
		ирНеглобальный.УстановитьПометкиРодителейЛкс(СтрокаУзла);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДеревоУзловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейка = ОформлениеСтроки.Ячейки.УзелОбмена;
	Если ДанныеСтроки.Уровень() = 0 Тогда
		Если ДанныеСтроки.Строки.Количество() = 0 Тогда
			Ячейка.ТолькоПросмотр = Истина;
		КонецЕсли; 
		// Антибаг 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1020915#1020915
		//Ячейка.УстановитьКартинку(БиблиотекаКартинок.ирДеревоМетаданных);
		//Ячейка.ИндексКартинки = ДанныеСтроки.ИндексКартинки;
	Иначе
		// -+ АВВ [10.08.2012] Ячейка.УстановитьКартинку(БиблиотекаКартинок.ирСостояниеСсылки);
		Ячейка.УстановитьКартинку(ирМобильные.ПолучитьКартинку("ирСостояниеСсылки"));
		Ячейка.ИндексКартинки = ДанныеСтроки.ИндексКартинки;
		//Если ДанныеСтроки.НомерСообщения = 0 Тогда
		//	ОформлениеСтроки.Ячейки.НомерСообщения.УстановитьТекст("Нет");
		//КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДеревоУзловВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока.УзелОбмена) <> Тип("Строка") Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.УзелОбмена);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоУзловОбновить(Кнопка)
	
	ОбновитьДеревоУзлов();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЖурналРегистрации(Кнопка)
	
	// -+ АВВ [10.08.2012] Обработки.ирАнализЖурналаРегистрации.Создать().ОткрытьСПараметром("Данные", ВыбОбъект);
	ирМобильные.ПодключитьВнешнююОбработку("ирАнализЖурналаРегистрации").ОткрытьСПараметром("Данные", ВыбОбъект);
	
КонецПроцедуры

Процедура КоманднаяПанельРегламентныеЗаданияНовоеОкно(Кнопка)
	
	ирГлобальный.ЛксОткрытьНовоеОкноОбработки(ЭтотОбъект);
	
КонецПроцедуры

Процедура НайтиЗначениеВТаблицеОбъекта(ТабличноеПоле, ИмяТаблицыОбъекта, ИскомоеЗначение)
	
	ТипИскомогоЗначения = ТипЗнч(ИскомоеЗначение);
	#Если _ Тогда
	    ТаблицаТЧ = Новый ТаблицаЗначений;
	#КонецЕсли
	ТаблицаТЧ = ТабличноеПоле.Значение;
	Для Каждого Колонка Из ТаблицаТЧ.Колонки Цикл
		Если Не Колонка.ТипЗначения.СодержитТип(ТипИскомогоЗначения) Тогда
			Продолжить;
		КонецЕсли; 
		НайденныеСтроки = ТаблицаТЧ.НайтиСтроки(Новый Структура(Колонка.Имя, ИскомоеЗначение));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаРезультата = ПоискВОбъекте.Добавить();
			СтрокаРезультата.ТаблицаОбъекта = ИмяТаблицыОбъекта;
			СтрокаРезультата.НомерСтроки = ТаблицаТЧ.Индекс(НайденнаяСтрока) + 1;
			СтрокаРезультата.Реквизит = Колонка.Имя;
			СтрокаРезультата.ТабличноеПоле = ТабличноеПоле.Имя;
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

Процедура НайтиНажатие(Элемент = Неопределено)
	
	ПоискВОбъекте.Очистить();
	НайденныеСтроки = РеквизитыТаблица.НайтиСтроки(Новый Структура("ЗначениеРеквизита", ИскомоеЗначение));
	Для Каждого СтрокаРеквизита Из НайденныеСтроки Цикл
		СтрокаРезультата = ПоискВОбъекте.Добавить();
		СтрокаРезультата.Реквизит = СтрокаРеквизита.ИмяРеквизита;
	КонецЦикла; 
	Для Индекс = 2 По ЭлементыФормы.ПанельТабличныеЧасти.Страницы.Количество() - 1 Цикл
		Страница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы[Индекс];
		НайтиЗначениеВТаблицеОбъекта(ЭлементыФормы[Страница.Имя], Страница.Имя, ИскомоеЗначение);
	КонецЦикла; 
	Для Индекс = 0 По СтраницыДвижений.Количество() - 1 Цикл
		СтрокаСтраницы = СтраницыДвижений[Индекс];
		НайтиЗначениеВТаблицеОбъекта(ЭлементыФормы[Страница.Имя], СтрокаСтраницы.Имя, ИскомоеЗначение);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ПоискВОбъектеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока.ТаблицаОбъекта) Тогда
		ТабличноеПоле = ЭлементыФормы.РеквизитыТаблица;
		ИмяКолонки = "ЗначениеРеквизита";
		СтрокаРезультата = ТабличноеПоле.Значение.Найти(ВыбраннаяСтрока.Реквизит, "ИмяРеквизита");
	Иначе
		ТабличноеПоле = ЭлементыФормы[ВыбраннаяСтрока.ТабличноеПоле];
		ИмяКолонки = ВыбраннаяСтрока.Реквизит;
		СтрокаРезультата = ТабличноеПоле.Значение[ВыбраннаяСтрока.НомерСтроки - 1];
	КонецЕсли; 
	Если СтрокаРезультата <> Неопределено Тогда
		ТабличноеПоле.ТекущаяСтрока = СтрокаРезультата;
		ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки[ИмяКолонки];
		ЭтаФорма.ТекущийЭлемент = ТабличноеПоле;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СвязанныеДанныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейка = ОформлениеСтроки.Ячейки.ТипТаблицы;
	Ячейка.ОтображатьКартинку = Истина;
	ТипТаблицы = ирГлобальный.ЛксПолучитьПервыйФрагмент(ДанныеСтроки.ТипТаблицы);
	Ячейка.ИндексКартинки = ирНеглобальный.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(ТипТаблицы);

КонецПроцедуры

Процедура СвязанныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.ТипТаблицы = "Константа" Тогда
		// -+ АВВ [10.08.2012] ФормаСписка = Обработки.ирРедакторКонстант.ПолучитьФорму();
		ФормаСписка = ирМобильные.ПодключитьВнешнююОбработку("ирРедакторКонстант").ПолучитьФорму();
		ТекущаяСтрока = ирГлобальный.ЛксПолучитьПоследнийФрагмент(ВыбраннаяСтрока.ИмяТаблицы);
		ФормаСписка.НачальноеЗначениеВыбора = ТекущаяСтрока;
		ФормаСписка.Открыть();
	ИначеЕсли Истина
		И Не ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(ВыбраннаяСтрока.ТипТаблицы)
		И ВыбраннаяСтрока.ТипТаблицы <> "Изменения"
	Тогда
		ирНеглобальный.ОткрытьФормуСпискаСОтбором(ВыбраннаяСтрока.ИмяТаблицы, Новый Структура(ВыбраннаяСтрока.ИмяКолонки, ВыбОбъект));
	КонецЕсли; 
	
КонецПроцедуры

Процедура СвязанныеДанныеОбновитьКоличество(Кнопка)
	
	Если СвязанныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ТекстЗапроса = "";
	Для Каждого СтрокаСвязанныхДанных Из СвязанныеДанные Цикл
		// Антибаг 8.2.14 http://partners.v8.1c.ru/forum/thread.jsp?id=1017264#1017264
		Если ирКэш.Получить().ВерсияПлатформы >= 802014 Тогда
			Если Истина
				И СтрокаСвязанныхДанных.ТипТаблицы = "Изменения" 
				И Найти(СтрокаСвязанныхДанных.ИмяТаблицы, "РегистрСведений.") = 1
			Тогда
				Если Метаданные.ОбщиеРеквизиты.Найти(СтрокаСвязанныхДанных.ИмяКолонки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ """ + СтрокаСвязанныхДанных.ИмяТаблицы + """ КАК ИмяТаблицы, """ + СтрокаСвязанныхДанных.ИмяКолонки + """ КАК ИмяКолонки, КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ " + ирНеглобальный.ПолучитьИмяТаблицыИзМетаданныхЛкс(СтрокаСвязанныхДанных.ИмяТаблицы) + " КАК Т
		|ГДЕ Т." + СтрокаСвязанныхДанных.ИмяКолонки + " = &Ссылка";
	КонецЦикла;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ВыбОбъект);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	СтруктураОтбора = Новый Структура("ИмяТаблицы, ИмяКолонки");
	Для Каждого СтрокаСвязанныхДанных Из СвязанныеДанные Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаСвязанныхДанных); 
		НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСвязанныхДанных.КоличествоСсылок = НайденныеСтроки[0].Количество;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЛиТаблицыИзмененийПриИзменении(Элемент)
	
	ЗаполнитьСвязанныеДанные();
	
КонецПроцедуры

Процедура КП_СтраницыДвижения1СкрыватьПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементОтбора = ЭлементыФормы.СвязанныеДанные.ОтборСтрок.КоличествоСсылок;
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Кнопка.Пометка;
	ЭлементОтбора.Значение = 0;

КонецПроцедуры

Процедура ОбновитьОтборСвязанныхДанных(ТекстИмениТаблицы = Неопределено, ТекстИмениКолонки = Неопределено)
	
	ТабличноеПоле = ЭлементыФормы.СвязанныеДанные;
	
	Если ТекстИмениТаблицы = Неопределено Тогда
		ТекстИмениТаблицы = ФильтрИменТаблиц;
	КонецЕсли; 
	Если ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяТаблицы;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеТаблицы;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = ТекстИмениТаблицы;

	Если ТекстИмениКолонки = Неопределено Тогда
		ТекстИмениКолонки = ФильтрИменКолонок;
	КонецЕсли; 
	Если ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяКолонки;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеКолонки;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = ТекстИмениКолонки;
	
	ЭлементОтбора = ТабличноеПоле.ОтборСтрок.КоличествоТипов;
	ЭлементОтбора.Использование = ТолькоПростойТип;
	Если ТолькоПростойТип Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Значение = 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИмяПриИзменении(Элемент)

	ТабличноеПоле = ЭлементыФормы.СвязанныеДанные;
	СтараяКолонка = ТабличноеПоле.ТекущаяКолонка;
	ТабличноеПоле.Колонки.ПредставлениеКолонки.Видимость = Не ИмяПредставление;
	ТабличноеПоле.Колонки.ПредставлениеТаблицы.Видимость = Не ИмяПредставление;
	ТабличноеПоле.Колонки.ИмяТаблицы.Видимость = ИмяПредставление;
	ТабличноеПоле.Колонки.ИмяКолонки.Видимость = ИмяПредставление;
	Если Не ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяТаблицы;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеТаблицы;
	КонецЕсли;
	ЭлементОтбора.Значение = "";
	Если Не ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяКолонки;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеКолонки;
	КонецЕсли;
	ЭлементОтбора.Значение = "";
	Если Найти(СтараяКолонка.Имя, "таблицы") > 0 Тогда
		Если ТабличноеПоле.Колонки.ПредставлениеТаблицы.Видимость Тогда
			ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ПредставлениеТаблицы;
		Иначе
			ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ИмяТаблицы;
		КонецЕсли; 
	Иначе
		Если ТабличноеПоле.Колонки.ПредставлениеКолонки.Видимость Тогда
			ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ПредставлениеКолонки;
		Иначе
			ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ИмяКолонки;
		КонецЕсли; 
	КонецЕсли; 
	ОбновитьОтборСвязанныхДанных();
	
КонецПроцедуры

Процедура ФильтрИменТаблицПриИзменении(Элемент)
	
    ОбновитьОтборСвязанныхДанных();
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ФильтрИменКолонокПриИзменении(Элемент)
	
	ОбновитьОтборСвязанныхДанных();
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ФильтрИменКолонокАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ОбновитьОтборСвязанныхДанных(, Текст);

КонецПроцедуры

Процедура ФильтрИменТаблицАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ОбновитьОтборСвязанныхДанных(Текст, );

КонецПроцедуры

Процедура ФильтрИменДвиженийНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ИскомоеЗначениеПриИзменении(Элемент)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ИскомоеЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ФильтрИменТаблицНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ФильтрИменКолонокНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ВыбОбъектНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ТолькоПростойТипПриИзменении(Элемент)
	
	ОбновитьОтборСвязанныхДанных();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНайтиВСписке(Кнопка)
	
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	ирНеглобальный.ОткрытьСсылкуВСпискеЛкс(ВыбОбъект);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНайтиВДинамическомСписке(Кнопка)
	
	// -+ АВВ [10.08.2012] ФормаСписка = Обработки.ирДинамическийСписок.ПолучитьФорму(,, Новый УникальныйИдентификатор);
	ФормаСписка = ирМобильные.ПодключитьВнешнююОбработку("ирДинамическийСписок").ПолучитьФорму(,, Новый УникальныйИдентификатор);
	ФормаСписка.НайтиСсылкуВСписке(ВыбОбъект);
	ФормаСписка.Открыть();
	
КонецПроцедуры

Функция ПолучитьПостроительВыборкиСвязанныхСтрок(СтрокаСвязанныхДанных = Неопределено, МаксимальнаяПорция = 0)
	
	Если СтрокаСвязанныхДанных = Неопределено Тогда
		СтрокаСвязанныхДанных = ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока;
	КонецЕсли; 
	ТекстПервые = "";
	Если МаксимальнаяПорция > 0 Тогда
		ТекстПервые = " ПЕРВЫЕ " + Формат(МаксимальнаяПорция, "ЧГ=") + " ";
	КонецЕсли; 
	ТекстЗапроса = "
	|ВЫБРАТЬ " + ТекстПервые + " Т.*
	|ИЗ " + ирНеглобальный.ПолучитьИмяТаблицыИзМетаданныхЛкс(СтрокаСвязанныхДанных.ИмяТаблицы) + " КАК Т
	|{ГДЕ Т." + СтрокаСвязанныхДанных.ИмяКолонки + "}";
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса);
	Построитель.Отбор.Добавить(СтрокаСвязанныхДанных.ИмяКолонки).Установить(ВыбОбъект);
	Возврат Построитель;
	
КонецФункции

Процедура СвязанныеДанныеПриАктивизацииСтроки(Элемент)
	
	СтрокаСвязанныхДанных = Элемент.ТекущаяСтрока;
	Если СтрокаСвязанныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.СтрокиТаблицыБД = Новый ТаблицаЗначений;
	ЭлементыФормы.СтрокиТаблицыБД.СоздатьКолонки();
	
	Построитель = ПолучитьПостроительВыборкиСвязанныхСтрок();
	ЧислоСтрокДляЗагрузки = ирНеглобальный.КонтрольРазмераВыборкиПользователемЛкс(Построитель);
	Если ЧислоСтрокДляЗагрузки > 0 Тогда
		Построитель = ПолучитьПостроительВыборкиСвязанныхСтрок(, ЧислоСтрокДляЗагрузки);
	КонецЕсли;
	// http://partners.v8.1c.ru/forum/thread.jsp?id=1034151#1034151
	//МаксимальныйРазмер = 500000;
	//Построитель = ПолучитьПостроительВыборкиСвязанныхСтрок(, МаксимальныйРазмер);

	// Антибаг 8.2.14 http://partners.v8.1c.ru/forum/thread.jsp?id=1017264#1017264
	Если ирКэш.Получить().ВерсияПлатформы >= 802014 Тогда
		Если Истина
			И Элемент.ТекущаяСтрока.ТипТаблицы = "Изменения" 
			И Найти(Элемент.ТекущаяСтрока.ИмяТаблицы, "РегистрСведений.") = 1
		Тогда
			Если Метаданные.ОбщиеРеквизиты.Количество() > 0 Тогда
				Возврат;
			КонецЕсли; 
			//Для Каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			//	ВыбранноеПоле = Построитель.ВыбранныеПоля.Найти(ОбщийРеквизит.Имя);
			//	Если Истина
			//		И ВыбранноеПоле <> Неопределено
			//		И ОбъектМетаданных.Измерения.Найти(ОбщийРеквизит.Имя) = Неопределено
			//	Тогда
			//		Если ирНеглобальный.ЛиОбщийРеквизитИспользуетсяВОбъектеМетаданныхЛкс(ОбщийРеквизит, ОбъектМетаданных) Тогда
			//			Построитель.ВыбранныеПоля.Удалить(ВыбранноеПоле);
			//		КонецЕсли; 
			//	КонецЕсли; 
			//КонецЦикла; 
		КонецЕсли; 
	КонецЕсли;

	Попытка
		мРезультатСтрокиТаблицы = Построитель.Результат;
	Исключение
		// Антибаг платформы 8.2.14 http://partners.v8.1c.ru/forum/thread.jsp?id=1031481#1031481
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПервуюПорциюЛкс(ЭтаФорма, мРезультатСтрокиТаблицы, мВыборкаРезультатаСтрокиТаблицы,
		ЭлементыФормы.КоманднаяПанельСтрокиТаблицыБД);
	
	//Если СтрокиТаблицыБД.Количество() = МаксимальныйРазмер Тогда
	//	Сообщить("Были выбраны первые " + МаксимальныйРазмер + " строк таблицы");
	//КонецЕсли; 
	СтруктураОтбора = Новый Структура("ИмяТаблицы, ИмяКолонки", СтрокаСвязанныхДанных.ИмяТаблицы, СтрокаСвязанныхДанных.ИмяКолонки);
	ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаСвязанныхДанных); 
	СтрокаСвязанныхДанных.КоличествоСсылок = СтрокиТаблицыБД.Количество();
	ЭлементыФормы.СтрокиТаблицыБД.СоздатьКолонки();
	ЭлементыФормы.СтрокиТаблицыБД.ТекущаяКолонка = ЭлементыФормы.СтрокиТаблицыБД.Колонки[СтрокаСвязанныхДанных.ИмяКолонки];
	Для Каждого КолонкаТП Из ЭлементыФормы.СтрокиТаблицыБД.Колонки Цикл
		КолонкаТП.ТолькоПросмотр = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура СтрокиТаблицыБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирНеглобальный.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// КлючСтроки - Структура
Процедура ПоказатьЯчейкуДанныхОбъекта(ПолноеИмяТаблицы = "", ИмяКолонки = "", КлючСтроки = Неопределено) Экспорт
	
	ИмяТаблицы = ирГлобальный.ЛксПолучитьПоследнийФрагмент(ПолноеИмяТаблицы);
	ТипТаблицы = ирНеглобальный.ПолучитьТипТаблицыБДЛкс(ПолноеИмяТаблицы);
	Попытка
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы);
	Исключение
		// ВидыСубконто
	КонецПопытки;
	Если ирГлобальный.ЛксЛиКорневойТипСсылки(ТипТаблицы) Тогда 
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.РеквизитыТаблица;
		ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка = ЭтаФорма.ТекущийЭлемент.Колонки.ЗначениеРеквизита;
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = ЭтаФорма.ТекущийЭлемент.Значение.Найти(ИмяКолонки, "ИмяРеквизита");
		КонецЕсли; 
	Иначе
		Если ирГлобальный.ЛксЛиТипВложеннойТаблицыБД(ТипТаблицы) Тогда 
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы["ТабличнаяЧасть_" + ирГлобальный.ЛксПолучитьПоследнийФрагмент(ИмяТаблицы)];
		ИначеЕсли Истина
			И (Ложь
				Или ирГлобальный.ЛксЛиКорневойТипРегистраБД(ТипТаблицы) 
				Или ирГлобальный.ЛксЛиКорневойТипПоследовательности(ТипТаблицы))
			И (Ложь
				Или ТипТаблицы <> "РегистрСведений"
				Или ОбъектМетаданных.РежимЗаписи <> Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый)
		Тогда 
			ЭтаФорма.ЛиЧитатьПисатьДвижения = Истина;
			ЭтаФорма.флПоказыватьДвиженияПриИзменении();
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы["Движение_" + СтрЗаменить(ПолноеИмяТаблицы, ".", "_")];
		КонецЕсли;
		КолонкаТП = ЭтаФорма.ТекущийЭлемент.Колонки.Найти(ИмяКолонки);
		Если КолонкаТП <> Неопределено Тогда
			ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка = КолонкаТП;
		КонецЕсли; 
		Если КлючСтроки <> Неопределено Тогда
			НайденныеСтроки = ЭтаФорма.ТекущийЭлемент.Значение.НайтиСтроки(КлючСтроки);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = НайденныеСтроки[0];
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДРедактировать(Кнопка)
	
	ирНеглобальный.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(ЭлементыФормы.СтрокиТаблицыБД, ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока.ИмяТаблицы);
	
КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДОбновить(Кнопка)
	

	
	
КонецПроцедуры

Процедура ЛиТабличныеЧастиПриИзменении(Элемент)
	
	ЗаполнитьСвязанныеДанные();

КонецПроцедуры

Процедура КП_СтраницыДвижения1ОтборБезЗначения(Кнопка)
	
	ирНеглобальный.ТабличноеПоле_ОтборБезЗначенияВТекущейКолонке_КнопкаЛкс(ЭлементыФормы.СвязанныеДанные);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДобавитьВИзбранное(Кнопка)
	
	 ирНеглобальный.ДобавитьСсылкуВИзбранноеЛкс(ВыбОбъект);
	
КонецПроцедуры

Процедура ОбновитьРазмерДинамическойТаблицы() Экспорт

	ирНеглобальный.ПослеЗагрузкиДинамическойВыборкиВТабличноеПолеЛкс(ЭтаФорма, мВыборкаРезультатаСтрокиТаблицы,
		ЭлементыФормы.КоманднаяПанельСтрокиТаблицыБД, ЭлементыФормы.КоличествоСтрокТаблицыБД);

КонецПроцедуры // ОбновитьРазмерТаблицы()

Процедура КоманднаяПанельСтрокиТаблицыБДЗагрузитьПолностью(Кнопка)
	
	ирНеглобальный.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПолностьюЛкс(ЭтаФорма, мВыборкаРезультатаСтрокиТаблицы, 
		ЭлементыФормы.КоманднаяПанельСтрокиТаблицыБД);

КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОригинальноеЗначениеРеквизита = ЭлементыФормы.РеквизитыТаблица.ТекущаяСтрока.ОригинальноеЗначениеРеквизита;
	Если Ложь
		Или ТипЗнч(ОригинальноеЗначениеРеквизита) = Тип("ХранилищеЗначения")
	Тогда
		СтандартнаяОбработка = Ложь;
		ирОтладка.Исследовать(ЭлементыФормы.РеквизитыТаблица.ТекущаяСтрока.ОригинальноеЗначениеРеквизита);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение;
	Если ТипЗнч(Элемент.Значение) <> ТипЗнч(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = "";
	КонецЕсли; 
	Элемент.Значение = Неопределено; // Если это не сделать, то в случае строкового типа текущего значения все будет преобразовано к строковому типу

КонецПроцедуры

мСтрокаТипаТабличнойЧасти = ирКэш.Получить().ПолучитьСтрокуТипаМетаОбъектов("ТабличнаяЧасть", , 2);

ЦветФонаСтрокиНеограниченноДлины = Новый Цвет(240, 255, 255);
// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1009788#1009788
РеквизитыТаблица.Колонки.Удалить("ЗначениеРеквизита");
РеквизитыТаблица.Колонки.Добавить("ЗначениеРеквизита", ирГлобальный.ЛксПолучитьОписаниеТиповВсеРедактируемыеТипы()); // Программно нужно добавлять, чтобы все типы можно было редактировать
РеквизитыТаблица.Колонки.Добавить("ОригинальноеЗначениеРеквизита");

ИзмененияНаУзлах.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
ПоляВвода = Новый Массив();
ЭлементыФормы.Движения.Страницы.Очистить();
мПлатформа = ирКэш.Получить();

Если ирГлобальный.ЛксЛиСсылкаНаОбъектБД(КлючУникальности) Тогда
	ПараметрСсылка = КлючУникальности;
КонецЕсли;
ЛиСвязанныеТабличныеЧасти = Истина;
ЛиСвязанныеТаблицыИзменений = Ложь;
ЗаписьНаСервере = ирНеглобальный.ПолучитьРежимЗаписиНаСервереПоУмолчаниюЛкс();
ЭлементыФормы.ЗаписьНаСервере.Доступность = ирКэш.ЛиНемобильныйРежимЛкс();
ЭтаФорма.ВыбОбъект = "";
