Процедура ЗапуститьСеансПодПользователем(ИмяПользователяИнфобазы, ПарольПользователяИнфобазы, ИспользоватьAutomation = Ложь)

	Если ИспользоватьAutomation Тогда
		ирНеглобальный.СоздатьСеансИнфобазы1С8Лкс(, ИмяПользователяИнфобазы, ПарольПользователяИнфобазы, , Истина);
	Иначе
		//Если ирКэш.Получить().ВерсияПлатформы = 802015 Тогда 
		//	Предупреждение("В релиза 8.2.15 функция недоступна", 20); // Антибаг платформы 8.2.15
		//	Возврат;
		//КонецЕсли; 
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		ПараметрыЗапуска = "";
		//ПараметрыЗапуска = ПараметрыЗапуска + " ENTERPRISE /IBConnectionString""" + СтрЗаменить(СтрокаСоединения, """", """""") + """";
		ПараметрыЗапуска = ПараметрыЗапуска + " -WA /N""" + ИмяПользователяИнфобазы + """";
		Если ЗначениеЗаполнено(ПарольПользователяИнфобазы) Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " /P""" + ПарольПользователяИнфобазы + """";
		КонецЕсли;
		ПараметрыЗапуска = ПараметрыЗапуска + " /UC""" + КодРазрешения + """";
		Если РазрешитьОтладку Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " /Debug";
		КонецЕсли;
		Если ОчисткаКэшаКлиентСерверныхВызовов Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " /ClearCache";
		КонецЕсли;
		Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " " + ДополнительныеПараметры;
		КонецЕсли;
		Если РежимЗапуска = "Авто" Тогда
			// Из-за этого иногда долго стартует почему то
			ПараметрыЗапуска = ПараметрыЗапуска + " /AppAutoCheckMode";  // Автоматический выбор типа приложения для запуска
		ИначеЕсли РежимЗапуска = "ОбычноеПриложение" Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " /RunModeOrdinaryApplication";
		ИначеЕсли РежимЗапуска = "УправляемоеПриложение" Тогда
			ПараметрыЗапуска = ПараметрыЗапуска + " /RunModeManagedApplication";
		КонецЕсли;
		Если СообщитьКоманднуюСтроку Тогда
			Сообщить(ПараметрыЗапуска);
		КонецЕсли; 
		ТекущаяДата = ирСервер.ПолучитьТекущуюДатуЛкс();
		ЗапуститьСистему(ПараметрыЗапуска);
		Состояние("Ожидание запуска сеанса...");
		Успех = Ложь;
		ДатаПоследнегоВопроса = ТекущаяДата();
		Пока Не Успех Цикл
			ОбработкаПрерыванияПользователя();
			Если ТекущаяДата() - ДатаПоследнегоВопроса >= 5 Тогда
				Ответ = Вопрос("Продолжить ожидание сеанса (5 сек)?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Прервать;
				КонецЕсли;
				ДатаПоследнегоВопроса = ТекущаяДата();
			КонецЕсли; 
			Сеансы = ПолучитьСеансыИнформационнойБазы();
			Успех = Ложь;
			Для Каждого Сеанс Из Сеансы Цикл
				Если Истина
					И Сеанс.НачалоСеанса >= ТекущаяДата 
					И НРег(Сеанс.ИмяКомпьютера) = НРег(ИмяКомпьютера())
					И Сеанс.Пользователь <> Неопределено
					И НРег(Сеанс.Пользователь.Имя) = НРег(ИмяПользователяИнфобазы)
				Тогда
					Успех = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЦикла; 
	КонецЕсли; 

КонецПроцедуры

Функция УстановитьВременныйПарольПользователя() Экспорт
	
	мhash = ПользовательИБ.СохраняемоеЗначениеПароля;
	НужноВыставитьПароль = Ложь;
	НужноВернутьДомен = Ложь;
	Если ПользовательИБ.АутентификацияСтандартная = Ложь Тогда 
		ПользовательИБ.АутентификацияСтандартная = Истина;
		НужноВыставитьПароль = Истина;
	КонецЕсли;
	Если ПользовательИБ.АутентификацияОС = Истина Тогда 
		ПользовательИБ.АутентификацияОС = Ложь;
		НужноВернутьДомен = Истина;
	КонецЕсли;
	Пароль = Формат(ТекущаяДата(), "ДФ=HHmmss");
    ПользовательИБ.Пароль = Пароль;
	УдалитьРольРазработчикИР = Ложь;
	Если ВременноПредоставитьПравоРазработчикИР Тогда
		Если Не ПользовательИБ.Роли.Содержит(Метаданные.Роли.ирРазработчик) Тогда
			УдалитьРольРазработчикИР = Истина;
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ирРазработчик);
		КонецЕсли; 
	КонецЕсли; 
    ПользовательИБ.Записать();
	НаборПараметров = Новый Структура();
	НаборПараметров.Вставить("mHash", мhash);
	НаборПараметров.Вставить("НужноВыставитьПароль", НужноВыставитьПароль);
    НаборПараметров.Вставить("НужноВернутьДомен", НужноВернутьДомен);
	НаборПараметров.Вставить("ПользовательИБ", ПользовательИБ);
	НаборПараметров.Вставить("УдалитьРольРазработчикИР", УдалитьРольРазработчикИР);
	НаборПараметров.Вставить("Имя", ПользовательИБ.Имя);
	НаборПараметров.Вставить("Пароль", Пароль);
	Возврат НаборПараметров;
	
КонецФункции

Процедура ВернутьПостоянныйПарольПользователя(НаборПараметров = Неопределено) Экспорт;
	
	//УстановитьПривилегированныйРежим(Истина); 
	Если НЕ НаборПараметров = Неопределено Тогда
		мhash = НаборПараметров.mhash;
		НужноВыставитьПароль = НаборПараметров.НужноВыставитьПароль;
		НужноВернутьДомен = НаборПараметров.НужноВернутьДомен;
		ПользовательИБ = НаборПараметров.ПользовательИБ;
		УдалитьРольРазработчикИР = НаборПараметров.УдалитьРольРазработчикИР;
	Иначе
		Возврат;
	КонецЕсли;
	ПользовательИБ.СохраняемоеЗначениеПароля = мHash;
	Если НужноВыставитьПароль Тогда 
		Пользовательиб.АутентификацияСтандартная = Ложь; 
	КонецЕсли;
	Если НужноВернутьДомен Тогда 
		Пользовательиб.АутентификацияОС = Истина; 
	КонецЕсли;
	Если УдалитьРольРазработчикИР Тогда
		ПользовательИБ.Роли.Удалить(Метаданные.Роли.ирРазработчик);
	КонецЕсли; 
	ПользовательИБ.Записать();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
		СтруктураПользователя = УстановитьВременныйПарольПользователя();
		Если СтруктураПользователя = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ЗапуститьСеансПодПользователем(СтруктураПользователя.Имя, СтруктураПользователя.Пароль, ИспользоватьAutomation);
		Исключение
			ВернутьПостоянныйПарольПользователя(СтруктураПользователя);
			ВызватьИсключение;
		КонецПопытки;
		ВернутьПостоянныйПарольПользователя(СтруктураПользователя);
	//КонецЕсли; 

КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭлементыФормы.ИспользоватьAutomation.Доступность = ПравоДоступа("Automation", Метаданные, ПользовательИБ);
	Если ПользовательИБ <> Неопределено Тогда
		Заголовок = Заголовок + " " + ПользовательИБ.Имя;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнительныеПараметрыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, "ирРедакторПользователей");

КонецПроцедуры

Процедура ДополнительныеПараметрыПриИзменении(Элемент)
	
	ирНеглобальный.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, "ирРедакторПользователей");

КонецПроцедуры

Процедура ИспользоватьAutomationПриИзменении(Элемент)
	
	ЭлементыФормы.ДополнительныеПараметры.Доступность = Не ИспользоватьAutomation;
	
КонецПроцедуры

ЭтаФорма.РежимЗапуска = "Авто";
ЭтаФорма.РазрешитьОтладку = Истина;
ЭтаФорма.ВременноПредоставитьПравоРазработчикИР = Истина;